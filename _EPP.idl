module ccReg {

  /// Typ pro stanovení jazyka ve kterím se budou vracet textoví zprávy
  enum Languages  
  { 
    EN, ///< angličtina (default)
    CS ///< čeština
  };
  /// Typ pro stanovení druhu ident identifikátoru, definuje význam řetězce ident
  enum identtyp 
  {
    EMPTY, ///< Není uveden žádný význam
    RC, ///< Rodné číslo
    OP, ///< Číslo občanského průkazu
    PASS, ///< Číslo pasu
    ICO, ///< Identifikační číslo organizace
    MPSV ///< Identifikátor ministerstva práce a sociálních věcí
  };
  /// Typ pro určení významu uvedených disclose parametrů
  enum Disclose 
  {
    DISCL_EMPTY, ///< Disclose sekce chybí, ignorovat disclose parametry
    DISCL_HIDE, ///< Všechny parametry s TRUE hodnotou budou schovány
    DISCL_DISPLAY  ///< Všechny parametry s TRUE hodnotou budou zobrazeny
  };
  /// Typ pro stanovení výsledku check operace
  enum CheckAvail 
  {
    Exist, ///< Objekt existuje a není možné ho zaregistrovat
    NotExist, ///< Objekt neexistuje a je možné ho registrovat
    BadFormat, ///< Špatný formát identifikátoru
    BlackList, ///< Je zakázáno tento objekt registrovat
    DelPeriod, ///< Handle je v ochrané lhůtě pro registraci
    NotApplicable ///<Domena tvar domeny je spravny ale neni zahrnuta v zone napriklad domain.edu
  };
  /// Typ pro jeden prvek seznamu výsledků funkcí check
  struct CheckSeq 
  {
    CheckAvail avail; ///< Jaký je výsledek check operace
    string reason; ///< Pokud avail!=NotExist, je zde uveden textový dúvod
  };
  /// Jednotka casu pouzivana pri specifikaci platnosti domeny
  enum TimeUnit
  {
    unit_month,
    unit_year
  };
  /// Typ pro predavani statusu objektu
  struct Status_str
  {
    string value; ///< Nazev status flagu
    string text; ///< Doprovodny text ke status flagu
  };
  /// Typ pro predavani periody platnosti domeny
  struct Period_str
  {
    short count; ///< Pocet jednotek casu
    TimeUnit unit; ///< Jednotka casu
  };
  /// Typ pro obecný seznam rozšíření
  typedef sequence <any> ExtensionList;  
  /// Typ pro návratovou hodnotu funkcí check
  typedef sequence <CheckSeq> CheckResp;
  /// Typ pro nadefinování seznamu identifikátorů v parametru funkcí check
  typedef sequence <string> Check;
  /// Typ pro nadefinování seznamu stavů objektů
  typedef sequence <Status_str> Status;
  /// Typ pro nadefinování seznamu identifikátorů administrativních kontaktů
  typedef sequence <string> AdminContact;
  /// Typ pro identifikaci místa v parametrech, ve kterém byla nalezena chyba
  enum ErrorSpec 
  {
    unknow, ///< Není určené žádné konkrétní místo
    pollAck_msgID, ///< Chyba v msgID zprávy poll
    pollAck_msgID_missing, ///< Parametr msgID chybi v xml
    contactCreate_handle, ///< Chyba v handle při vytváření kontaktu
    contactCreate_cc, ///< Chyba v kódu země při vytváření kontaktu
    contactInfo_handle, ///< Špatný identifikátor kontaktu
    contactUpdate_cc, ///< Chyba v kódu země při update kontaktu
    contactUpdate_identtype_missing, ///< Atribut type u ident chybi v xml
    nssetCreate_handle, ///< Chyba v handle při vytváření nssetu
    nssetCreate_tech, ///< Chyba v technickém kontaktu při vytváření nssetu
    nssetCreate_ns_name, ///< Chyba v názvu nameserveru při vytváření nssetu
    nssetCreate_ns_addr, ///< Chyba v adrese nameserveru při vytváření nssetu
    nssetInfo_handle, ///< Špatný identifikátor nssetu
    nssetUpdate_ns_name_add, ///< Chyba v názvu nameserveru při přidávání ns
    nssetUpdate_ns_addr_add, ///< Chyba v adrese nameserveru při přidávání ns
    nssetUpdate_ns_name_rem, ///< Chyba v názvu nameserveru při odebírání ns
    nssetUpdate_ns_addr_rem, ///< Chyba v adrese nameserveru při odebírání ns
    nssetUpdate_tech_add, ///< Chyba v přidávaném technickém kontaktu
    nssetUpdate_tech_rem, ///< Chyba v odebíraném technickém kontaktu
    domainCreate_fqdn, ///< Chyba v názvu při vytváření domény
    domainCreate_registrant, ///< Chyba v držiteli při vytváření domény
    domainCreate_nsset, ///< Chyba v nssetu při vytváření domény
    domainCreate_period, ///< Chyba v periodě při vytváření domény
    domainCreate_admin, ///< Chyba v admin. kontaktu při vytváření domény
    domainCreate_ext_valDate, ///< Chyba v datumu validace při vytváření domény
    domainInfo_fqdn, ///< Špatný název domény
    domainRenew_fqdn, ///< Chyba v názvu při renew domény
    domainRenew_curExpDate, ///< Chyba v současném datumu expirace u domény
    domainRenew_period, ///< Chyba v periodě u renew domény
    domainRenew_ext_valDate, ///< Chyba v datumu validace u renew domény
    domainUpdate_fqdn, ///< Chyba v názvu při update domény
    domainUpdate_registrant, ///< Chyba v držiteli při update domény
    domainUpdate_nsset, ///< Chyba v nssetu při update domény
    domainUpdate_admin_add, ///< Chyba v přidávaném admin. kontaktu
    domainUpdate_admin_rem, ///< Chyba v odebíraném admin. kontaktu
    domainUpdate_ext_valDate, ///< Chyba v datumu validace při update domény
    transfer_op ///< Chybi parametr op u transferu v XML
  };
  /// Typ pro prvek seznamu chybových zpráv
  struct Error_seq
  {
    ErrorSpec code; ///< Kód chyby pro správné doplnění xml tagu v EPP serveru
    string value; ///< Chybná hodnota zadaná klientem (string)
    string reason; ///< Důvod chyby, textový popis
  };
  /// Typ pro předání chybových zpráv
  typedef sequence <Error_seq> Error;
  /// Typ pro návratovou hodnotu všech EPP funkcí
  struct Response
  {
    short errCode; ///< Návratový kód definovaný EPP protokolem
    string errMsg; ///< Zpráva příslušející návratovému kódu (podle jazyka)
    string svTRID; ///< Server transaction ID
    Error errors; ///< Seznam chybových zpráv
  };
  /// Typ pro předání dat po zavolání info_contact
  struct Contact
  {
    string handle; ///< Handle kontaktu
    string ROID; ///< Identifikátor kontaktu - repository ID
    string ClID; ///< Identifikátor registrátora, který má právo na změnu
    string CrID; ///< Identifikátor registrátora, který vytvořil kontakt
    string UpID; ///< Identifikátor registrátora, který provedl změny
    Status stat; ///< Seznam stavů kontaktu
    timestamp CrDate; ///< Datum a čas vytvoření 
    timestamp UpDate; ///< Datum a čas poslední změny
    timestamp TrDate; ///< Datum a čas posledního transferu
    string Name; ///< Jméno nebo název kontaktu
    string Organization; ///< Název organizace
    Lists Streets; ///< Adresa - maximalne 3 casti
    string City; ///< Adresa - město
    string StateOrProvince; ///< Adresa - kraj(územní celek)
    string PostalCode; ///< PSČ
    string CountryCode; ///< Country Code - dvojmístný kód země ISO 
    string Telephone; ///< Telefonní číslo 
    string Fax; ///< Faxové číslo
    string Email; ///< Kontaktní email pro zprávy o exiraci
    string NotifyEmail; ///< Upozorňovací email pro zprávy o změnách
    string VAT; ///< Daňové identifikační číslo 
    string ident; ///< ident - jednoznační identifikátor kontaktu
    identtyp identtype; ///< Typ ident - definuje význam pole ident
    string AuthInfoPw; ///< Heslo pro transfer kontaktu
    Disclose DiscloseFlag; ///< Disclose flag určující význam disclose param.
    boolean DiscloseName; ///< Vviditelnost pro parametr Name 
    boolean DiscloseOrganization; ///< Viditelnost pro parametr Organization
    boolean DiscloseAddress; ///< Viditelnost pro parametr Address
    boolean DiscloseTelephone; ///< Viditelnost pro parametr Telephone
    boolean DiscloseFax; ///< Viditelnost pro parametr Fax
    boolean DiscloseEmail; ///< Viditelnost pro parametr Email
  };
  /// Typ pro předání dat po zavolání [create|update]_contact
  struct ContactChange
  {
    string Name; ///< Jméno nebo název kontaktu
    string Organization; ///< Název organizace
    Lists Streets; ///< Adresa - maximalne 3 casti
    string City; ///< Adresa - město
    string StateOrProvince; ///< Adresa - kraj(územní celek)
    string PostalCode; ///< PSČ
    string CC; ///< Country Code - dvojmístný kód země ISO 
    string Telephone; ///< Telefonní číslo 
    string Fax; ///< Faxové číslo
    string Email; ///< Kontaktní email pro zprávy o exiraci
    string NotifyEmail; ///< Upozorňovací email pro zprávy o změnách
    string VAT; ///< Daňové identifikační číslo 
    string ident; ///< ident - jednoznační identifikátor kontaktu
    identtyp identtype; ///< Typ ident - definuje význam pole ident
    string AuthInfoPw; ///< Heslo pro transfer kontaktu
    Disclose DiscloseFlag; ///< Disclose flag určující význam disclose param.
    boolean DiscloseName; ///< Vviditelnost pro parametr Name 
    boolean DiscloseOrganization; ///< Viditelnost pro parametr Organization
    boolean DiscloseAddress; ///< Viditelnost pro parametr Address
    boolean DiscloseTelephone; ///< Viditelnost pro parametr Telephone
    boolean DiscloseFax; ///< Viditelnost pro parametr Fax
    boolean DiscloseEmail; ///< Viditelnost pro parametr Email
  };
  /// Typ pro přenos dat ve funkci info_nsset
  struct NSSet
  {
    string handle; ///< Handle nssetu
    string ROID; ///< Identifikátor nassetu - repository ID
    string ClID; ///< Identifikátor registrátora, který má právo na změnu
    string CrID; ///< Identifikátor registrátora, který vytvořil kontakt
    string UpID; ///< Identifikátor registrátora, který provedl změny
    Status stat; ///< Seznam stavů nssetu
    timestamp CrDate; ///< Datum a čas vytvoření 
    timestamp UpDate; ///< Datum a čas poslední změny
    timestamp TrDate; ///< Datum a čas posledního transferu
    string AuthInfoPw; ///< Heslo pro transfer nssetu
    DNSHost dns; ///< Seznam nameserverů  DNS
    TechContact tech; ///< Seznam identifikátorů technických kontaktů
  };
  /// Typ pro přenos dat ve funkci info_domain
  struct Domain
  {
    string ROID; ///< Identifikátor domény - repository ID
    string name; ///< Fqdn - název domény
    string Registrant; ///< Handle držitele domény
    string nsset; ///< handle NSSETu
    Status stat; ///< Seznam stavů domény
    string ClID; ///< Identifikátor registrátora, který má právo na změnu
    string CrID; ///< Identifikátor registrátora, který vytvořil kontakt
    string UpID; ///< Identifikátor registrátora, který provedl změny
    timestamp CrDate; ///< Datum a čas vytvoření 
    timestamp UpDate; ///< Datum a čas poslední změny
    timestamp TrDate; ///< Datum a čas posledního transferu
    timestamp ExDate; ///< Datum a čas expirace dom=ny
    string AuthInfoPw; ///< Heslo pro transfer domény
    AdminContact admin; ///< Seznam administrativních kontaktů
    ExtensionList ext; ///< Obecné rozšiřující informace 
  };
  /// Typ pro předání datumu validace u ENUM domen
  struct ENUMValidationExtension {
    date valExDate; ///< Datum vypršení platnosti validace
  };
    
  /// Rozhraní pro server implementující EPP protokol
  interface EPP
  {
    /** Vyjimka kterou muze vratit jakakoliv z EPP funkci v pripade zavazne
     *  chyby na strane serveru.
     */
    exception ServerIntError {
      string reason; ///< Volitelny string popisujici duvod vyjimky
    };
    /// Vrátí číslo verze serveru a aktuální čas
    /** Zjištění čísla verze a aktuálního datumu pro předání v Greeting zprávě.
     * \param datetime Aktuální lokání čas 
     * \return Číslo verze */
    string version(
      out timestamp datetime
    ) raises (ServerIntError);

    /// ulozi vystupni XML z mod_eppd do tabulky action_xml 
    boolean SaveOutXML( in string svTRID , in string XML );

    /// Zaevidování neůspěšné operace přijaté EPP protokol.
    /** V případě že byla zjištěna chyba ještě na straně EPP serveru, toto 
     volání nalezenou chybu uloží do evidence akcí a vrátí vygenerované 
     srvTRID.
     \param errCode Návratový kód chyby pro jeho zaevidování
     \param errors Vstupni chyby zaslane pro preklad do CR
     \param clientID Identifikace session získaná při volání ClientLogin.
     Pokud není klient přihlášen (k chybě došlo ještě před přihlášením)
     uvede se sem hodnota 0
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */
    Response GetTransaction (
      in short errCode,
      in Error errors,
      in long clientID,
      in string clTRID
    ) raises (ServerIntError);
    /// Potvrzení přečtení zprávy získané přes PollRequest.
    /** Označí danou zprávu jako přečtenou pokud zpráva s daným ID patří
     přihlášenému registrátorovi. Pro pokračování zpracování zpráv
     vrátí počet zbývajících zpráv a identifikaci další zprávy ve frontě.
     \param msgID Id zprávy která se potvrzujejen ciselna hodnota je sprav nee mu  zatim e zadat i token
     \param count Počet zpráv které jsou po odebrání této zprávy ve frontě
     \param newmsgID Id první další zprávy
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */
    Response PollAcknowledgement (
      in string msgID,
      out short count,
      out string newmsgID,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Získání další nepřečtené zprávy ze serveru.
    /** Vrátí obsah první další zprávy přihlášeného registrátora, která ještě 
     nebyla označena jako přečtená a nevypršel datum její expirace.
     \param msgID ID vracené zprávy
     \param count Počet zpráv ve frontě
     \param qDate Datum vložení zprávy do fronty
     \param mesg Text zprávy
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response PollRequest (
      out string msgID,
      out short count,
      out timestamp qDate,
      out string mesg,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Provede autentizaci klienta a přihlášení do systému
    /** Najde v evidenci zadaného registrátora a ověří jeho heslo a 
     otisk klientského certifikátu SSL komunikace. Pokud vše sedí, uloží
     nový záznam o session, nastaví požadovaný jazyk a případně změní heslo.
     \param ClID Identifikátor přihlašovaného registrátora
     \param passwd Heslo pro přihlášení
     \param newpass Nové heslo pokud je požadavek na změnu
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \param clientID Vrátí novou identifikaci session
     \param certID MD5 otisk klientského certifikátu použitém při přihlášení
     \param lang Požadovaný jazyk komunikace
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ClientLogin (
      in string ClID,
      in string passwd,
      in string newpass,
      in string clTRID,
      in string XML,
      out long clientID,
      in string certID,
      in Languages lang
    ) raises (ServerIntError);
    /// Provede uzavření komunikace
    /** V databázi uzavře záznam dané session.
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ClientLogout (
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Ověření možnosti registrovat kontakt s daným identifikátorem
    /** Umožňuje hromadné prozkoumání několika identifikátorů. Pro každý 
     prozkoumá validitu použitého identifikátoru, převede ho na velká
     písmena a zjistí jestli už není tento identifikátor zaregistrován, nebo
     není v ochrané lhůtě po jeho smazání. Vrátí výsledek opět ve formě 
     seznamu.
     \param handle Seznam identifikátorů
     \param a Seznam odpovědí pro jednotlivé identifikátory
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactCheck (
      in Check handle,
      out CheckResp a,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Získání informací o zaregistrovaném kontaktu
    /** Najde kontakt s daným identifikátorem. Pokud přihlášený registrátor
     není registrátorem kontaktu, zobrazí se mu položka AuthInfoPw prázdná.
     \param handle Identifikátor požadovaného objektu
     \param c Datová struktura s odpovědí
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactInfo (
      in string handle,
      out Contact c,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Vymazání zaregistrovaného kontaktu 
    /** Pokud není kontakt v nějaké vazbě s jiným objektem a pokud stav 
     objektu neobsahuje clientDeleteProhibited nebo serverDeleteProhibited, 
     provede jeho smazání. Smazat kontakt může pouze jeho určený registrátor.
     Před smazáním uloží kontakt do historie.
     \param handle Identifikátor požadovaného objektu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactDelete (
      in string handle,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Změna údajů zaregistrovaného kontaktu
    /** Pokud stav nebosahuje clientUpdateProhibited nebo 
     serverUpdateProhibited, aktualizuje na základě požadavků údaje u 
     kontaktu. Pokud je nastaven flag clientUpdateProhibited, lze pouze
     smazat tento příznak. Aktualizovat kontakt smí jen jeho učený registátor.
     Před aktualizací uloží akutální data objektu do historie. Časová značka 
     upDate se nastaví na aktuální čas.
     \param handle Identifikátor požadovaného objektu
     \param c Struktura s požadovanými změnami v kontaktu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactUpdate (
      in string handle,
      in ContactChange c,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Zaregistrování nového kontaktu
    /** Pokud identifikátor projde testem z funkce ContactCheck, založí
     se nový kontakt a přiřadí se vytvářejícímu registrátorovi. Po založení
     uloží nový kontakt do historie aby byla vždy aspoň jedna kopie 
     v historii. Pokud je uvedeno prázdné heslo, vygeneruje se automaticky.
     \param handle Identifikátor požadovaného objektu
     \param c Struktura s požadovanými hodnotamy v kontaktu
     \param crDate Vracený datum vytvoření
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactCreate (
      in string handle,
      in ContactChange c,
      out timestamp crDate,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Převod kontaktu pod jiného registrátora
    /** Ověří zadané heslo s heslem uvedeným u kontaktu a pokud stav objektu
     neobsahuje clientTransferProhibited nebo serverTransferProhibited změní
     určeného registrátora na aktuálně přihlášeného registrátora. Před změnou se
     uloží aktuální kopie do historie. Po změně se vygeneruje automaticky nové
     heslo. 
     \param handle Identifikátor požadovaného objektu
     \param authInfo Heslo pro kontrolu s údajem u objektu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactTransfer (
      in string handle,
      in string authInfo,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Výpis všech kontaktů daného registrátora
    /** Vrátí seznam identifikátorů kontaktů patřících přihlášenému
     registrátorovi.
     \param contacts Seznam identifikátorů kontaktů
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response ContactList (
      out Lists contacts,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Ověření možnosti registrovat nsset s daným identifikátorem
    /** Umožňuje hromadné prozkoumání několika identifikátorů. Pro každý 
     prozkoumá validitu použitého identifikátoru, převede ho na velká
     písmena a zjistí jestli už není tento identifikátor zaregistrován, nebo
     není v ochrané lhůtě po jeho smazání. Vrátí výsledek opět ve formě 
     seznamu.
     \param handle Seznam identifikátorů
     \param a Seznam odpovědí pro jednotlivé identifikátory
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetCheck (
      in Check handle,
      out CheckResp a,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Získání informací o zaregistrovaném nssetu
    /** Najde nsset s daným identifikátorem. Pokud přihlášený registrátor
     není registrátorem nssetu, zobrazí se mu položka AuthInfoPw prázdná.
     \param handle Identifikátor požadovaného objektu
     \param n Datová struktura s odpovědí
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetInfo (
      in string handle,
      out NSSet n,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Vymazání zaregistrovaného nssetu
    /** Pokud není nsset v nějaké vazbě s jiným objektem a pokud stav 
     objektu neobsahuje clientDeleteProhibited nebo serverDeleteProhibited, 
     provede jeho smazání. Smazat nsset může pouze jeho určený registrátor.
     Před smazáním uloží nsset do historie.
     \param handle Identifikátor požadovaného objektu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetDelete (
      in string handle,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Změna údajů zaregistrovaného nssetu
    /** Pokud stav nebosahuje clientUpdateProhibited nebo 
     serverUpdateProhibited, aktualizuje na základě požadavků údaje u 
     nssetu. Pokud je nastaven flag clientUpdateProhibited, lze pouze
     smazat tento příznak. Aktualizovat nsset smí jen jeho učený registátor. 
     Před aktualizací uloží akutální data objektu do historie. Je třeba dodržet 
     podmínky, že v nssetu musí být alespoň dva dns hosty a alespoň jeden
     technický kontakt. Dns hosty, které mají uvedenou IP adresu (GLUE) musí
     mít mít hostname ze zóny spravované tímto registrem. Je dovoleno
     používat IPv4 i IPv6 adresy z veřejného rozsahu adres. Časová
     značka upDate se nastaví na aktuální čas.
     \param handle Identifikátor požadovaného objektu
     \param authInfo_chg Změna hesla pro převod
     \param dns_add Identifikátor přidávaného hosta
     \param dns_rem Identifikátor odebíraného hosta
     \param tech_add Identifikátor přidávaného technického kontaktu
     \param tech_rem Identifikátor odebíraného technického kontaktu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetUpdate (
      in string handle,
      in string authInfo_chg,
      in DNSHost dns_add,
      in DNSHost dns_rem,
      in TechContact tech_add,
      in TechContact tech_rem,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Zaregistrování nového nssetu
    /** Pokud identifikátor projde testem z funkce NSSetCheck, založí
     se nový nsset a přiřadí se vytvářejícímu registrátorovi. Pokud je 
     uvedeno prázdné heslo, vygeneruje se automaticky. Po založení
     uloží nový nsset do historie aby byla vždy aspoň jedna kopie 
     v historii. Při vytváření platí stejná pravidla jako jsou ta zmíněna v
     popisu funkce NSSetUpdate.
     \param handle Identifikátor požadovaného objektu
     \param authInfoPw Heslo pro převod
     \param tech Seznam technických kontaktů
     \param dns Seznam hostů (nameserverů)
     \param crDate Vracený datum vytvoření
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetCreate (
      in string handle,
      in string authInfoPw,
      in TechContact tech,
      in DNSHost dns,
      out timestamp crDate,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Převod nssetu pod jiného registrátora
    /** Ověří zadané heslo s heslem uvedeným u nssetu a pokud stav objektu
     neobsahuje clientTransferProhibited nebo serverTransferProhibited změní
     určeného registrátora na aktuálně přihlášeného registrátora. Před změnou se
     uloží aktuální kopie do historie. Po změně se vygeneruje automaticky nové
     heslo. 
     \param handle Identifikátor požadovaného objektu
     \param authInfo Heslo pro kontrolu s údajem u objektu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetTransfer (
      in string handle,
      in string authInfo,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Výpis všech nssetů daného registrátora
    /** Vrátí seznam identifikátorů nssetů patřících přihlášenému
     registrátorovi.
     \param nssets Seznam identifikátorů nssetů
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response NSSetList (
      out Lists nssets,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Ověření možnosti registrovat doménu s daným názvem
    /** Umožňuje hromadné prozkoumání několika identifikátorů. Pro každý 
     prozkoumá validitu použitého identifikátoru, převede ho na malá
     písmena a zjistí jestli už není tento identifikátor zaregistrován, nebo
     není v ochrané lhůtě po jeho smazání. Vrátí výsledek opět ve formě 
     seznamu. Doména musí být ze zóny spravované registrem a musí
     splňovat pravidla podle jméno domény (včetně speciálních pravidel pro
     enum domény) daná příslušnými RFC (1035,2916). Počet úrovní nesmí
     překročit hodnu uvedenou jako parametr zóny (např. pro cz je to 1,
     pro enum domény je to maximální délka čísla). Není možné zaregistrovat
     doménu pokud již existuje její naddoména nebo poddoména.
     \param fqdn Seznam identifikátorů
     \param a Seznam odpovědí pro jednotlivé identifikátory
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainCheck (
      in Check fqdn,
      out CheckResp a,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Získání informací o zaregistrované doméně
    /** Nejprve ověří stejným způsobem jako v DomainCheck validitu
     identifkátoru. Najde doménu s daným jménem nebo se jménem naddomény
     nebo poddomény. Pokud přihlášený registrátor
     není registrátorem nalezené domény, zobrazí se mu položka AuthInfoPw 
     prázdná. Pokud se navíc jedná o enum doménu, nezobrazí se tomuto cizímu
     registrátoru ani držitel domény a administrativní kontakty. U enum domén
     se vrací navíc datum validace v obecném seznamu rozšíření.
     \param fqdn Název domény
     \param d Datová struktura s odpovědí
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainInfo (
      in string fqdn,
      out Domain d,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Vymazání zaregistrované domény
    /** Pokud stav objektu neobsahuje clientDeleteProhibited nebo 
     serverDeleteProhibited, provede jeho smazání. Smazat doménu může
     pouze její určený registrátor. Před smazáním uloží doména do historie.
     Pro tuto operaci musí mít registrátor práva k zóně dané domény.
     \param fqdn Název domény
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainDelete (
      in string fqdn,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Změna údajů zaregistrované domény
    /** Nejprve ověří stejným způsobem jako v DomainCheck validitu
     identifkátoru. Pokud stav neobsahuje clientUpdateProhibited nebo 
     serverUpdateProhibited, aktualizuje na základě požadavků údaje u 
     nssetu. Pokud je nastaven flag clientUpdateProhibited, lze pouze
     smazat tento příznak. Aktualizovat doménu smí jen její určený registrátor. 
     Před aktualizací uloží aktuální data objektu do historie. Pro tuto 
     operaci musí mít registrátor práva k zóně dané domény. Časová
     značka upDate se nastaví na aktuální čas. Jen u enum domén je možné
     uvést rozšíření obsahující datum validace. Tento datum nesmí být nastaven
     dále do budoucnosti než je uvedeno v parametrech zóny.
     \param fqdn Název domény
     \param registrant_chg Změna držitele domény
     \param authInfo_chg Změna hesla pro převod
     \param nsset_chg Změnna nssetu
     \param admin_add Identifikátor přidávaného administrativního kontaktu
     \param admin_rem Identifikátor odebíraného administrativního kontaktu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \param ext Rozšíření obsahující další údaje (např validaci u ENUM domény)
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainUpdate (
      in string fqdn,
      in string registrant_chg,
      in string authInfo_chg,
      in string nsset_chg,
      in AdminContact admin_add,
      in AdminContact admin_rem,
      in long clientID,
      in string clTRID,
      in string XML , 
      in ExtensionList ext
    ) raises (ServerIntError);
    /// Zaregistrování nové domény
    /** Pokud jméno domény projde testem z funkce DomainCheck a
     registrátor má oprávnění pro danou zónu, založí se nová doména a přiřadí
     se vytvářejícímu registrátorovi. Pokud je uvedeno prázdné heslo, 
     vygeneruje se automaticky. Po založení
     uloží novou doménu do historie aby byla vždy aspoň jedna kopie 
     v historii. Pokud není uvedena perioda, nastaví se na minimální periodu 
     podle parametrů zóny. Pokud je uvedena musí splňovat další parametry
     zóny a to maximální periodu a násobek minimální periody. Před založením
     se ještě zkontroluje zda pro tuto operaci je u registárora dostatek
     kreditu a tento kredit se registrátorovi odečte. Při založení enum domény
     je nutné zadat v rozšíření datum validace. To nesmí být větší než maximum
     uvedené v parametrech zóny.
     \param fqdn Název domény
     \param Registrant Identifikátor kontaktu držitele
     \param nsset Identifikátor přiřazeného nssetu (nebo prázdný řetězec)
     \param AuthInfoPw Heslo pro převod
     \param period Počáteční doba expirace v měsících
     \param admin Seznam administrativních kontaktů
     \param crDate Vracený datum vytvoření
     \param exDate Vrací spočtený datum expirace na základě periody
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \param ext Rozšíření obsahující další údaje (např validaci u ENUM domény)
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainCreate (
      in string fqdn,
      in string Registrant,
      in string nsset,
      in string AuthInfoPw,
      in Period_str period,
      in AdminContact admin,
      out timestamp crDate,
      out date exDate,
      in long clientID,
      in string clTRID,
      in string XML,
      in ExtensionList ext
    ) raises (ServerIntError);
    /// Prodloužení domény o zadaný počet měsíců
    /** Nejprve ověří stejným způsobem jako v DomainCheck validitu
     identifkátoru. Pokud stav nebosahuje clientRenewProhibited nebo 
     serverRenewProhibited, provede prodloužení domény o zadaný počet měsíců. 
     Zároveň je u enum domén možné prodloužit i datum expirace. Pravidla jsou
     stejná jako při vytvoření domény. Prodloužení je opět podmíněno dostatkem
     kreditu a oprávněním registrátora pro práci s danou zónou. Před změnou
     údajů se záznam uloží do historie.
     \param fqdn Název domény
     \param curExpDate Aktuální datum expirace (zjištěný z Info funkce)
     \param period Počet měsíců o které se prodlouží registrace
     \param exDate Vrací nový datum expirace
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \param ext Rozšíření obsahující další údaje (např validaci u ENUM domény)
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainRenew (
      in string fqdn,
      in date curExpDate,
      in Period_str period,
      out timestamp exDate,
      in long clientID,
      in string clTRID,
      in string XML,
      in ExtensionList ext
    ) raises (ServerIntError);
    /// Převod domény pod jiného registrátora
    /** Ověří zadané heslo s heslem uvedeným u domény a pokud stav objektu
     neobsahuje clientTransferProhibited nebo serverTransferProhibited změní
     určeného registrátora na aktuálně přihlášeného registrátora. Před změnou se
     uloží aktuální kopie do historie. Po změně se vygeneruje automaticky nové
     heslo. Pro tuto operaci musí mít registrátor práva k zóně dané domény.
     \param fqdn Název požadované domény
     \param authInfo Heslo pro kontrolu s údajem u objektu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainTransfer (
      in string fqdn,
      in string authInfo,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Výpis všech domén daného registrátora
    /**Vrátí seznam jmen domén patřících přihlášenému
     registrátorovi.
     \param domains Seznam názvů domén
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response DomainList (
      out Lists domains,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Vyzadani si authinfa pro drzetele domeny
    /**
     \param fqdn Nazev domeny pro kterou se vyzaduje authInfo
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response domainSendAuthInfo (
      in string fqdn,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Vyzadani si authinfa pro drzetele kontaktu
    /**
     \param handle Handle kontaktu pro ktery se vyzaduje authInfo
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response contactSendAuthInfo (
      in string handle,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
    /// Vyzadani si authinfa pro drzetele nssetu
    /**
     \param handle Handle nssetu pro ktery se vyzaduje authInfo
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response nssetSendAuthInfo (
      in string handle,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (ServerIntError);
  }; // interface EPP
  
}; // module ccReg
