module ccReg {

  /// type for setting langugage of output text messages
  enum Languages  
  { 
    EN, ///< english (default)
    CS ///< czech
  };
  /// type of identification possibilities, define meaning of ident string
  enum identtyp 
  {
    EMPTY, ///< unidentified
    RC, ///< born number
    OP, ///< identity card number
    PASS, ///< passport number
    ICO, ///< identification number of organization
    MPSV, ///< identification number of MPSV
    BIRTHDAY ///< date of birth
  };
  /// type for meaning of disclose parameters
  enum Disclose 
  {
    DISCL_EMPTY, ///< disclose section is missing, ignore disclose parameters
    DISCL_HIDE, ///< all parameters with TRUE value will be hidden
    DISCL_DISPLAY  ///< all parameters with TRUE value will be shown
  };
  /// type for result of check operation
  enum CheckAvail 
  {
    Exist, ///< object exists and is not available for registration
    NotExist, ///< object dosn't exist and is free for registration
    BadFormat, ///< bad format of handle
    BlackList, ///< admistrative ban for registration
    DelPeriod, ///< handle is in protection period
    NotApplicable ///< domain has invalid zone for this registry
  };
  /// Type for one item of check functions results list
  struct CheckSeq 
  {
    CheckAvail avail; ///< How is result of check operation
    string reason; ///< If it is avail!=NotExist, here is also shown text reason
  };
  /// Time unit used at specification of domain validation
  enum TimeUnit
  {
    unit_month,
    unit_year
  };
  /// Type for object state transfer
  struct Status_str
  {
    string value; ///< Flag state name 
    string text; ///< Supporting text to flag sate
  };
  /// Type for validation domain period transfer 
  struct Period_str
  {
    short count; /// Number of time units
    TimeUnit unit; /// Time unit
  };

  struct ZoneCredit_str
  {
    string zone_fqdn; ///< Zone name 
    unsigned long price; ///< price in pennies  
  };

  /// Type for registrar credit statement  
  typedef sequence<ZoneCredit_str> ZoneCredit;

  /// Type for general list of extension
  typedef sequence <any> ExtensionList;  
  /// Type for returning value of check functions
  typedef sequence <CheckSeq> CheckResp;
  /// Type for definition of identifiers list in check function parameter
  typedef sequence <string> Check;
  /// Type for definition of object states list
  typedef sequence <Status_str> Status;
  /// Type for definition of administrative contacts list
  typedef sequence <string> AdminContact;
  /// Type for transfer of translated error strings 
  typedef sequence <string> ErrorStrings;
  /// Type for indetification of place in parameters, in which error was found
  enum ParamError 
  {
    poll_msgID, ///< Error in msgID poll message
    contact_handle, ///< Error in contact handle
    contact_cc, ///< Error in country code of contact
    nsset_handle, ///< Error in nsset handle
    nsset_tech, ///< Error in nsset of technical contact
    nsset_dns_name, ///< Error in name of nameserver nsset
    nsset_dns_addr, ///< Error in address of nameserver nsset
    nsset_dns_name_add, ///< Error in nameserver name ns
    nsset_dns_name_rem, ///< Error in nameserver name ns 
    nsset_tech_add, ///< Error in added technical contact
    nsset_tech_rem, ///< Error in removed technical contact
    domain_fqdn, ///< Error in domain name
    domain_registrant, ///< Error in domain registrant
    domain_nsset, ///< Error in nsset of domain
    domain_period, ///< Error in domain period
    domain_admin, ///< Error in administrative contact of domain
    domain_tmpcontact, ///< Error in temp contact of domain
    domain_ext_valDate, ///< Error in validation date at domain creation
    domain_ext_valDate_missing, ///< Validation date is missing for ENUM domain
    domain_curExpDate, ///< Error in entered date of domain expiration 
    domain_admin_add, ///< Error in added administrative contact 
    domain_admin_rem ///< Error in removed administrative contact 
  };
  /// Errors specification already detected at XML processing in mod_eppd 
  enum XmlError
  {
    xml_not_valid, ///< libxml validation error
    poll_msgID_missing, ///< Parameter msgID is missing in xml
    contact_identtype_missing, ///< Attribute type at ident is missing in xml
    transfer_op ///< Parameter op is missing at transfer in XML 
  };
  /// Sequence of error specification already detected in mod_eppd
  typedef sequence <XmlError> XmlErrors;
  /// Indetification of missing elements in list (potentionaly buried in lists)
//   typedef sequence <short> ErrorPosition;
  /// Type for item of error messages list
  struct Error
  {
    ParamError code; ///< Error code identified wrong parameter 
    string reason; ///< Error reason, text description
    short position; ///< Identification of error place in list 
  };
  /// Type for error messages transfer
  typedef sequence <Error> Errors;
  /// Type for returning value of all EPP function
  struct Response
  {
    short code; ///< Returning code defined via EPP protocol
    string msg; ///< Message belongs to returning code (according to language)
    string svTRID; ///< Server transaction ID
  };
  /// Type for transfer data after info_contact call 
  struct Contact
  {
    string handle; ///< Contact handle
    string ROID; ///< Contact Identifier - ID repository 
    string ClID; ///< Registrar identifier, which has to right for change
    string CrID; ///< Registrar identifier, which created a contact
    string UpID; ///< Registrar identifier, which realized changes
    Status stat; ///< List of contact states
    timestamp CrDate; ///< Creation date and time 
    timestamp UpDate; ///< Date and time of last change
    timestamp TrDate; ///< Date and time of last transfer
    string Name; ///< Contact name or title
    string Organization; ///< Organisation name
    Lists Streets; ///< Address - maximum is 3 parts
    string City; ///< Address - city
    string StateOrProvince; ///< Address - region (country part)
    string PostalCode; ///< ZIP code
    string CountryCode; ///< Country Code - 2 placed ISO country code 
    string Telephone; ///< Telephone number 
    string Fax; ///< Fax number
    string Email; ///< Contact e-mail for messages about expiration
    string NotifyEmail; ///< Alerting e-mail for messages about changes 
    string VAT; ///< Value Added Tax 
    string ident; ///< ident - unique identifier of contact
    identtyp identtype; ///< Ident type - defines meaning of ident field 
    string AuthInfoPw; ///< password for contact transfer
    Disclose DiscloseFlag; ///< disclose flag determines meaning of disclose param.
    boolean DiscloseName; ///< Visibility for Name parameter 
    boolean DiscloseOrganization; ///< Visibility for Organisation parameter
    boolean DiscloseAddress; ///< Visibility for Addrss parameter
    boolean DiscloseTelephone; ///< Visibility for Telephone parametr
    boolean DiscloseFax; ///< Visibility for Fax parameter
    boolean DiscloseEmail; ///< Visibility for Email parameter
    boolean DiscloseVAT; ///< Visibility for VAT parameter
    boolean DiscloseIdent; ///< Visibility for ident parameter
    boolean DiscloseNotifyEmail; ///< Visibility for NotifyEmail parameter
  };
  /// Type for transfer data after call [create|update]_contact
  struct ContactChange
  {
    string Name; ///< Contact name or title
    string Organization; ///< Organisation name
    Lists Streets; ///< Address - maximum is 3 parts
    string City; ///< Address - city
    string StateOrProvince; ///< Address - region(country part)
    string PostalCode; ///< ZIP code
    string CC; ///< Country Code - 2 placed ISO country code 
    string Telephone; ///< Telephone number 
    string Fax; ///< Fax number
    string Email; ///< Contact e-mail for messages about expiration
    string NotifyEmail; ///< Alerting email for messages about changes
    string VAT; ///< Value Added Tax 
    string ident; ///< ident - unique contact identifier
    identtyp identtype; ///< Ident type - defines meaning of ident field
    string AuthInfoPw; ///< Password for contact transfer 
    Disclose DiscloseFlag; ///< Disclose flag determines meaning of disclose param.
    boolean DiscloseName; ///< Visibility for Name parameter 
    boolean DiscloseOrganization; ///< Visibility for Organisation parameter
    boolean DiscloseAddress; ///< Visibility for Address parameter
    boolean DiscloseTelephone; ///< Visibility for Telephone parameter
    boolean DiscloseFax; ///< Visibility for Fax parameter
    boolean DiscloseEmail; ///< Visibility for Email parameter
    boolean DiscloseVAT; ///< Visibility for VAT parameter
    boolean DiscloseIdent; ///< Visibility for ident parameter
    boolean DiscloseNotifyEmail; ///< Visibility for NotifyEmail parameter
  };
  /// Type for transfer data in info_nsset function
  struct NSSet
  {
    string handle; ///< Nsset handle 
    string ROID; ///< Nsset identifier - repository ID
    string ClID; ///< Registrar identifier, which has to right for change
    string CrID; ///< Registrar identifier, which created contact
    string UpID; ///< Registrar identifier, which realized changes
    Status stat; ///< nsset states list
    timestamp CrDate; ///< Creation date and time 
    timestamp UpDate; ///< Date and time of last change
    timestamp TrDate; ///< Date and time of last transfer
    string AuthInfoPw; ///< Password for nsset transfer
    DNSHost dns; ///< List of DNS nameservers 
    TechContact tech; ///< List of technical contacts identifier
    short level; ///< Technical tests level
  };
  /// Type for transfer data info_domain function
  struct Domain
  {
    string ROID; ///< Domain identifier - repository ID
    string name; ///< Fqdn - domain name
    string Registrant; ///< Handle of domain registrant
    string nsset; ///< NSSET handle
    Status stat; ///< Domain state list
    string ClID; ///< Registrar identifier, which has right for change
    string CrID; ///< Registrar identifier, which created contact
    string UpID; ///< Registrar identifier, which realized changes
    timestamp CrDate; ///< Creation date and time 
    timestamp UpDate; ///< Date and time of last changes
    timestamp TrDate; ///< Date and time of last transfer
    timestamp ExDate; ///< Date and time of domain expiration
    string AuthInfoPw; ///< Password for domain transfer
    AdminContact admin; ///< List of administrative contacts
    ExtensionList ext; ///< General extension information  
    AdminContact tmpcontact; ///< List of admnistrative contacts
  };
  /// Type for validation date disposition at ENUM domain
  struct ENUMValidationExtension {
    date valExDate; ///< Expiration date of valadation validity
  };
  /// Info function type.
  enum InfoType {
    IT_LIST_CONTACTS,
    IT_LIST_DOMAINS,
    IT_LIST_NSSETS,
    IT_DOMAINS_BY_NSSET,
    IT_DOMAINS_BY_CONTACT,
    IT_NSSETS_BY_CONTACT,
    IT_NSSETS_BY_NS
  };
 
  /// Server interface for EPP protocol implementation 
  interface EPP
  {
    /** Exception that can return anyone from EPP functions in case 
     *  that parameter was wrongly entered or whenever answer is wrong  
     *  (code 2xxx).
     */
    exception EppError {
      short errCode; ///< Returning code defined with EPP protocol
      string errMsg; ///< Message belonged to returning code (according to language)
      string svTRID; ///< Server transaction ID
      Errors errorList; ///< Error list
    };
    /** Exception which returns at poll commands if message queue is empty. */
    exception NoMessages {
      short code; ///< Returning code defined with EPP protocol
      string msg; ///< Message belonged to returning code (according to language)
      string svTRID; ///< Server transaction ID
    };
    /// It returns version number of server and actual time 
    /** Detect version number and actual date for Greeting message.
     * \param datetime actual local time 
     * \return version number */
    string version(
      out timestamp datetime
    );

    /// ulozi vystupni XML z mod_eppd do tabulky action_xml 
    boolean SaveOutXML( in string svTRID , in string XML );

    /// Zaevidování neůspěšné operace přijaté EPP protokol.
    /** V případě že byla zjištěna chyba ještě na straně EPP serveru, toto 
     volání nalezenou chybu uloží do evidence akcí a vrátí vygenerované 
     srvTRID.
     \param errCode Návratový kód chyby pro jeho zaevidování
     \param clientID Identifikace session získaná při volání ClientLogin.
     Pokud není klient přihlášen (k chybě došlo ještě před přihlášením)
     uvede se sem hodnota 0
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param errorCodes Kody vstupnich chyb zaslane pro preklad do CR
     \param errorStrings Vystupni prelozene stringy odpovidajici kodum chyb
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */
    Response GetTransaction (
      in short errCode,
      in long clientID,
      in string clTRID,
      in XmlErrors errorCodes,
      out ErrorStrings errStrings
    ) raises (EppError);
    /// Potvrzení přečtení zprávy získané přes PollRequest.
    /** Označí danou zprávu jako přečtenou pokud zpráva s daným ID patří
     přihlášenému registrátorovi. Pro pokračování zpracování zpráv
     vrátí počet zbývajících zpráv a identifikaci další zprávy ve frontě.
     \param msgID Id zprávy která se potvrzujejen ciselna hodnota je sprav nee mu  zatim e zadat i token
     \param count Počet zpráv které jsou po odebrání této zprávy ve frontě
     \param newmsgID Id první další zprávy
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */
    Response PollAcknowledgement (
      in string msgID,
      out short count,
      out string newmsgID,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError, NoMessages);
    /// Získání další nepřečtené zprávy ze serveru.
    /** Vrátí obsah první další zprávy přihlášeného registrátora, která ještě 
     nebyla označena jako přečtená a nevypršel datum její expirace.
     \param msgID ID vracené zprávy
     \param count Počet zpráv ve frontě
     \param qDate Datum vložení zprávy do fronty
     \param mesg Text zprávy
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response PollRequest (
      out string msgID,
      out short count,
      out timestamp qDate,
      out string mesg,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError, NoMessages);
    /// Provede autentizaci klienta a přihlášení do systému
    /** Najde v evidenci zadaného registrátora a ověří jeho heslo a 
     otisk klientského certifikátu SSL komunikace. Pokud vše sedí, uloží
     nový záznam o session, nastaví požadovaný jazyk a případně změní heslo.
     \param ClID Identifikátor přihlašovaného registrátora
     \param passwd Heslo pro přihlášení
     \param newpass Nové heslo pokud je požadavek na změnu
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \param clientID Vrátí novou identifikaci session
     \param certID MD5 otisk klientského certifikátu použitém při přihlášení
     \param lang Požadovaný jazyk komunikace
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ClientLogin (
      in string ClID,
      in string passwd,
      in string newpass,
      in string clTRID,
      in string XML,
      out long clientID,
      in string certID,
      in Languages lang
    ) raises (EppError);
    /// Provede uzavření komunikace
    /** V databázi uzavře záznam dané session.
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ClientLogout (
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);

    ///  vrati vysi creditu registratora pro jednotlive zony
    /** 
     \param clientID Identifikace session získaná z ClientLogin
     \param credit vyse  credit ( ze vsech prijatych plateb) podle jednotlivych zone
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ClientCredit (
      out ZoneCredit credit,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);

    /// Ověření možnosti registrovat kontakt s daným identifikátorem
    /** Umožňuje hromadné prozkoumání několika identifikátorů. Pro každý 
     prozkoumá validitu použitého identifikátoru, převede ho na velká
     písmena a zjistí jestli už není tento identifikátor zaregistrován, nebo
     není v ochrané lhůtě po jeho smazání. Vrátí výsledek opět ve formě 
     seznamu.
     \param handle Seznam identifikátorů
     \param a Seznam odpovědí pro jednotlivé identifikátory
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactCheck (
      in Check handle,
      out CheckResp a,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Získání informací o zaregistrovaném kontaktu
    /** Najde kontakt s daným identifikátorem. Pokud přihlášený registrátor
     není registrátorem kontaktu, zobrazí se mu položka AuthInfoPw prázdná.
     \param handle Identifikátor požadovaného objektu
     \param c Datová struktura s odpovědí
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactInfo (
      in string handle,
      out Contact c,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Vymazání zaregistrovaného kontaktu 
    /** Pokud není kontakt v nějaké vazbě s jiným objektem a pokud stav 
     objektu neobsahuje clientDeleteProhibited nebo serverDeleteProhibited, 
     provede jeho smazání. Smazat kontakt může pouze jeho určený registrátor.
     Před smazáním uloží kontakt do historie.
     \param handle Identifikátor požadovaného objektu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactDelete (
      in string handle,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Změna údajů zaregistrovaného kontaktu
    /** Pokud stav nebosahuje clientUpdateProhibited nebo 
     serverUpdateProhibited, aktualizuje na základě požadavků údaje u 
     kontaktu. Pokud je nastaven flag clientUpdateProhibited, lze pouze
     smazat tento příznak. Aktualizovat kontakt smí jen jeho učený registátor.
     Před aktualizací uloží akutální data objektu do historie. Časová značka 
     upDate se nastaví na aktuální čas.
     \param handle Identifikátor požadovaného objektu
     \param c Struktura s požadovanými změnami v kontaktu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactUpdate (
      in string handle,
      in ContactChange c,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Zaregistrování nového kontaktu
    /** Pokud identifikátor projde testem z funkce ContactCheck, založí
     se nový kontakt a přiřadí se vytvářejícímu registrátorovi. Po založení
     uloží nový kontakt do historie aby byla vždy aspoň jedna kopie 
     v historii. Pokud je uvedeno prázdné heslo, vygeneruje se automaticky.
     \param handle Identifikátor požadovaného objektu
     \param c Struktura s požadovanými hodnotamy v kontaktu
     \param crDate Vracený datum vytvoření
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactCreate (
      in string handle,
      in ContactChange c,
      out timestamp crDate,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Převod kontaktu pod jiného registrátora
    /** Ověří zadané heslo s heslem uvedeným u kontaktu a pokud stav objektu
     neobsahuje clientTransferProhibited nebo serverTransferProhibited změní
     určeného registrátora na aktuálně přihlášeného registrátora. Před změnou se
     uloží aktuální kopie do historie. Po změně se vygeneruje automaticky nové
     heslo. 
     \param handle Identifikátor požadovaného objektu
     \param authInfo Heslo pro kontrolu s údajem u objektu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactTransfer (
      in string handle,
      in string authInfo,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Výpis všech kontaktů daného registrátora
    /** Vrátí seznam identifikátorů kontaktů patřících přihlášenému
     registrátorovi.
     \param contacts Seznam identifikátorů kontaktů
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response ContactList (
      out Lists contacts,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Ověření možnosti registrovat nsset s daným identifikátorem
    /** Umožňuje hromadné prozkoumání několika identifikátorů. Pro každý 
     prozkoumá validitu použitého identifikátoru, převede ho na velká
     písmena a zjistí jestli už není tento identifikátor zaregistrován, nebo
     není v ochrané lhůtě po jeho smazání. Vrátí výsledek opět ve formě 
     seznamu.
     \param handle Seznam identifikátorů
     \param a Seznam odpovědí pro jednotlivé identifikátory
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetCheck (
      in Check handle,
      out CheckResp a,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Získání informací o zaregistrovaném nssetu
    /** Najde nsset s daným identifikátorem. Pokud přihlášený registrátor
     není registrátorem nssetu, zobrazí se mu položka AuthInfoPw prázdná.
     \param handle Identifikátor požadovaného objektu
     \param n Datová struktura s odpovědí
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetInfo (
      in string handle,
      out NSSet n,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Vymazání zaregistrovaného nssetu
    /** Pokud není nsset v nějaké vazbě s jiným objektem a pokud stav 
     objektu neobsahuje clientDeleteProhibited nebo serverDeleteProhibited, 
     provede jeho smazání. Smazat nsset může pouze jeho určený registrátor.
     Před smazáním uloží nsset do historie.
     \param handle Identifikátor požadovaného objektu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetDelete (
      in string handle,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Změna údajů zaregistrovaného nssetu
    /** Pokud stav nebosahuje clientUpdateProhibited nebo 
     serverUpdateProhibited, aktualizuje na základě požadavků údaje u 
     nssetu. Pokud je nastaven flag clientUpdateProhibited, lze pouze
     smazat tento příznak. Aktualizovat nsset smí jen jeho učený registátor. 
     Před aktualizací uloží akutální data objektu do historie. Je třeba dodržet 
     podmínky, že v nssetu musí být alespoň dva dns hosty a alespoň jeden
     technický kontakt. Dns hosty, které mají uvedenou IP adresu (GLUE) musí
     mít mít hostname ze zóny spravované tímto registrem. Je dovoleno
     používat IPv4 i IPv6 adresy z veřejného rozsahu adres. Časová
     značka upDate se nastaví na aktuální čas.
     \param handle Identifikátor požadovaného objektu
     \param authInfo_chg Změna hesla pro převod
     \param dns_add Identifikátor přidávaného hosta
     \param dns_rem Identifikátor odebíraného hosta
     \param tech_add Identifikátor přidávaného technického kontaktu
     \param tech_rem Identifikátor odebíraného technického kontaktu
     \param level Uroven technickych testu (-1 znamena nezadano)
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetUpdate (
      in string handle,
      in string authInfo_chg,
      in DNSHost dns_add,
      in DNSHost dns_rem,
      in TechContact tech_add,
      in TechContact tech_rem,
      in short level,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Zaregistrování nového nssetu
    /** Pokud identifikátor projde testem z funkce NSSetCheck, založí
     se nový nsset a přiřadí se vytvářejícímu registrátorovi. Pokud je 
     uvedeno prázdné heslo, vygeneruje se automaticky. Po založení
     uloží nový nsset do historie aby byla vždy aspoň jedna kopie 
     v historii. Při vytváření platí stejná pravidla jako jsou ta zmíněna v
     popisu funkce NSSetUpdate.
     \param handle Identifikátor požadovaného objektu
     \param authInfoPw Heslo pro převod
     \param tech Seznam technických kontaktů
     \param dns Seznam hostů (nameserverů)
     \param level Uroven technickych testu (-1 znamena nezadano)
     \param crDate Vracený datum vytvoření
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetCreate (
      in string handle,
      in string authInfoPw,
      in TechContact tech,
      in DNSHost dns,
      in short level,
      out timestamp crDate,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Převod nssetu pod jiného registrátora
    /** Ověří zadané heslo s heslem uvedeným u nssetu a pokud stav objektu
     neobsahuje clientTransferProhibited nebo serverTransferProhibited změní
     určeného registrátora na aktuálně přihlášeného registrátora. Před změnou se
     uloží aktuální kopie do historie. Po změně se vygeneruje automaticky nové
     heslo. 
     \param handle Identifikátor požadovaného objektu
     \param authInfo Heslo pro kontrolu s údajem u objektu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetTransfer (
      in string handle,
      in string authInfo,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Výpis všech nssetů daného registrátora
    /** Vrátí seznam identifikátorů nssetů patřících přihlášenému
     registrátorovi.
     \param nssets Seznam identifikátorů nssetů
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response NSSetList (
      out Lists nssets,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Asynchronní vyvolání technické kontroly nssetu.
    /**
     \param handle Identifikátor nssetu.
     \param fqdns Doménova jména, které máji být otestována s nssetem.
     \param level Uroven technickych testu (pokud je -1 bere se level nssetu).
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response nssetTest (
      in string handle,
      in short level,
      in Lists fqdns,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Ověření možnosti registrovat doménu s daným názvem
    /** Umožňuje hromadné prozkoumání několika identifikátorů. Pro každý 
     prozkoumá validitu použitého identifikátoru, převede ho na malá
     písmena a zjistí jestli už není tento identifikátor zaregistrován, nebo
     není v ochrané lhůtě po jeho smazání. Vrátí výsledek opět ve formě 
     seznamu. Doména musí být ze zóny spravované registrem a musí
     splňovat pravidla podle jméno domény (včetně speciálních pravidel pro
     enum domény) daná příslušnými RFC (1035,2916). Počet úrovní nesmí
     překročit hodnu uvedenou jako parametr zóny (např. pro cz je to 1,
     pro enum domény je to maximální délka čísla). Není možné zaregistrovat
     doménu pokud již existuje její naddoména nebo poddoména.
     \param fqdn Seznam identifikátorů
     \param a Seznam odpovědí pro jednotlivé identifikátory
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainCheck (
      in Check fqdn,
      out CheckResp a,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Získání informací o zaregistrované doméně
    /** Nejprve ověří stejným způsobem jako v DomainCheck validitu
     identifkátoru. Najde doménu s daným jménem nebo se jménem naddomény
     nebo poddomény. Pokud přihlášený registrátor
     není registrátorem nalezené domény, zobrazí se mu položka AuthInfoPw 
     prázdná. Pokud se navíc jedná o enum doménu, nezobrazí se tomuto cizímu
     registrátoru ani držitel domény a administrativní kontakty. U enum domén
     se vrací navíc datum validace v obecném seznamu rozšíření.
     \param fqdn Název domény
     \param d Datová struktura s odpovědí
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainInfo (
      in string fqdn,
      out Domain d,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Vymazání zaregistrované domény
    /** Pokud stav objektu neobsahuje clientDeleteProhibited nebo 
     serverDeleteProhibited, provede jeho smazání. Smazat doménu může
     pouze její určený registrátor. Před smazáním uloží doména do historie.
     Pro tuto operaci musí mít registrátor práva k zóně dané domény.
     \param fqdn Název domény
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainDelete (
      in string fqdn,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Změna údajů zaregistrované domény
    /** Nejprve ověří stejným způsobem jako v DomainCheck validitu
     identifkátoru. Pokud stav neobsahuje clientUpdateProhibited nebo 
     serverUpdateProhibited, aktualizuje na základě požadavků údaje u 
     nssetu. Pokud je nastaven flag clientUpdateProhibited, lze pouze
     smazat tento příznak. Aktualizovat doménu smí jen její určený registrátor. 
     Před aktualizací uloží aktuální data objektu do historie. Pro tuto 
     operaci musí mít registrátor práva k zóně dané domény. Časová
     značka upDate se nastaví na aktuální čas. Jen u enum domén je možné
     uvést rozšíření obsahující datum validace. Tento datum nesmí být nastaven
     dále do budoucnosti než je uvedeno v parametrech zóny.
     \param fqdn Název domény
     \param registrant_chg Změna držitele domény
     \param authInfo_chg Změna hesla pro převod
     \param nsset_chg Změnna nssetu
     \param admin_add Identifikátor přidávaného administrativního kontaktu
     \param admin_rem Identifikátor odebíraného administrativního kontaktu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \param ext Rozšíření obsahující další údaje (např validaci u ENUM domény)
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainUpdate (
      in string fqdn,
      in string registrant_chg,
      in string authInfo_chg,
      in string nsset_chg,
      in AdminContact admin_add,
      in AdminContact admin_rem,
      in AdminContact tmpcontact_rem,
      in long clientID,
      in string clTRID,
      in string XML , 
      in ExtensionList ext
    ) raises (EppError);
    /// Zaregistrování nové domény
    /** Pokud jméno domény projde testem z funkce DomainCheck a
     registrátor má oprávnění pro danou zónu, založí se nová doména a přiřadí
     se vytvářejícímu registrátorovi. Pokud je uvedeno prázdné heslo, 
     vygeneruje se automaticky. Po založení
     uloží novou doménu do historie aby byla vždy aspoň jedna kopie 
     v historii. Pokud není uvedena perioda, nastaví se na minimální periodu 
     podle parametrů zóny. Pokud je uvedena musí splňovat další parametry
     zóny a to maximální periodu a násobek minimální periody. Před založením
     se ještě zkontroluje zda pro tuto operaci je u registárora dostatek
     kreditu a tento kredit se registrátorovi odečte. Při založení enum domény
     je nutné zadat v rozšíření datum validace. To nesmí být větší než maximum
     uvedené v parametrech zóny.
     \param fqdn Název domény
     \param Registrant Identifikátor kontaktu držitele
     \param nsset Identifikátor přiřazeného nssetu (nebo prázdný řetězec)
     \param AuthInfoPw Heslo pro převod
     \param period Počáteční doba expirace v měsících
     \param admin Seznam administrativních kontaktů
     \param crDate Vracený datum vytvoření
     \param exDate Vrací spočtený datum expirace na základě periody
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \param ext Rozšíření obsahující další údaje (např validaci u ENUM domény)
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainCreate (
      in string fqdn,
      in string Registrant,
      in string nsset,
      in string AuthInfoPw,
      in Period_str period,
      in AdminContact admin,
      out timestamp crDate,
      out date exDate,
      in long clientID,
      in string clTRID,
      in string XML,
      in ExtensionList ext
    ) raises (EppError);
    /// Prodloužení domény o zadaný počet měsíců
    /** Nejprve ověří stejným způsobem jako v DomainCheck validitu
     identifkátoru. Pokud stav nebosahuje clientRenewProhibited nebo 
     serverRenewProhibited, provede prodloužení domény o zadaný počet měsíců. 
     Zároveň je u enum domén možné prodloužit i datum expirace. Pravidla jsou
     stejná jako při vytvoření domény. Prodloužení je opět podmíněno dostatkem
     kreditu a oprávněním registrátora pro práci s danou zónou. Před změnou
     údajů se záznam uloží do historie.
     \param fqdn Název domény
     \param curExpDate Aktuální datum expirace (zjištěný z Info funkce)
     \param period Počet měsíců o které se prodlouží registrace
     \param exDate Vrací nový datum expirace
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \param ext Rozšíření obsahující další údaje (např validaci u ENUM domény)
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainRenew (
      in string fqdn,
      in date curExpDate,
      in Period_str period,
      out timestamp exDate,
      in long clientID,
      in string clTRID,
      in string XML,
      in ExtensionList ext
    ) raises (EppError);
    /// Převod domény pod jiného registrátora
    /** Ověří zadané heslo s heslem uvedeným u domény a pokud stav objektu
     neobsahuje clientTransferProhibited nebo serverTransferProhibited změní
     určeného registrátora na aktuálně přihlášeného registrátora. Před změnou se
     uloží aktuální kopie do historie. Po změně se vygeneruje automaticky nové
     heslo. Pro tuto operaci musí mít registrátor práva k zóně dané domény.
     \param fqdn Název požadované domény
     \param authInfo Heslo pro kontrolu s údajem u objektu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainTransfer (
      in string fqdn,
      in string authInfo,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Výpis všech domén daného registrátora
    /**Vrátí seznam jmen domén patřících přihlášenému
     registrátorovi.
     \param domains Seznam názvů domén
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response DomainList (
      out Lists domains,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Vyzadani si authinfa pro drzetele domeny
    /**
     \param fqdn Nazev domeny pro kterou se vyzaduje authInfo
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response domainSendAuthInfo (
      in string fqdn,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Vyzadani si authinfa pro drzetele kontaktu
    /**
     \param handle Handle kontaktu pro ktery se vyzaduje authInfo
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response contactSendAuthInfo (
      in string handle,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Vyzadani si authinfa pro drzetele nssetu
    /**
     \param handle Handle nssetu pro ktery se vyzaduje authInfo
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response nssetSendAuthInfo (
      in string handle,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Tato funkce zapouzdruje vsechny rozsirujici info funkce
    /**
     \param type Typ vyhledavaci funkce, viz enum InfoType.
     \param handle Handle podle ktereho se ma vyhledavat.
     \param count Pocet nalezenych vysledku.
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response info (
      in InfoType type,
      in string handle,
      out long count,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Ziskej seznam vysledku info funkce
    /**
     \param handles Seznam vracenych handlu.
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response getInfoResults (
      out Lists handles,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
  }; // interface EPP
  
}; // module ccReg
