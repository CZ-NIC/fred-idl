module ccReg {

  /// type for setting langugage of output text messages
  enum Languages  
  { 
    EN, ///< english (default)
    CS ///< czech
  };
  /// type of identification possibilities, define meaning of ident string
  enum identtyp 
  {
    EMPTY, ///< unidentified
    RC, ///< born number
    OP, ///< identity card number
    PASS, ///< passport number
    ICO, ///< identification number of organization
    MPSV, ///< identification number of MPSV
    BIRTHDAY ///< date of birth
  };
  /// type for meaning of disclose parameters
  enum Disclose 
  {
    DISCL_EMPTY, ///< disclose section is missing, ignore disclose parameters
    DISCL_HIDE, ///< all parameters with TRUE value will be hidden
    DISCL_DISPLAY  ///< all parameters with TRUE value will be shown
  };
  /// type for result of check operation
  enum CheckAvail 
  {
    Exist, ///< object exists and is not available for registration
    NotExist, ///< object dosn't exist and is free for registration
    BadFormat, ///< bad format of handle
    BlackList, ///< admistrative ban for registration
    DelPeriod, ///< handle is in protection period
    NotApplicable ///< domain has invalid zone for this registry
  };
  /// Typ pro jeden prvek seznamu výsledků funkcí check
  struct CheckSeq 
  {
    CheckAvail avail; ///< Jaký je výsledek check operace
    string reason; ///< Pokud avail!=NotExist, je zde uveden textový dúvod
  };
  /// Jednotka casu pouzivana pri specifikaci platnosti domeny
  enum TimeUnit
  {
    unit_month,
    unit_year
  };
  /// Typ pro predavani statusu objektu
  struct Status_str
  {
    string value; ///< Nazev status flagu
    string text; ///< Doprovodny text ke status flagu
  };
  /// Typ pro predavani periody platnosti domeny
  struct Period_str
  {
    short count; ///< Pocet jednotek casu
    TimeUnit unit; ///< Jednotka casu
  };

  struct ZoneCredit_str
  {
    string zone_fqdn; ///< nazev zony
    unsigned long price; ///< castka v halirich  
  };

  /// Typ pro vypis creditu registratora  
  typedef sequence<ZoneCredit_str> ZoneCredit;

  /// Typ pro obecný seznam rozšíření
  typedef sequence <any> ExtensionList;  
  /// Typ pro návratovou hodnotu funkcí check
  typedef sequence <CheckSeq> CheckResp;
  /// Typ pro nadefinování seznamu identifikátorů v parametru funkcí check
  typedef sequence <string> Check;
  /// Typ pro nadefinování seznamu stavů objektů
  typedef sequence <Status_str> Status;
  /// Typ pro nadefinování seznamu identifikátorů administrativních kontaktů
  typedef sequence <string> AdminContact;
  /// Typ pro predavani prelozenych chybovych stringu
  typedef sequence <string> ErrorStrings;
  /// Typ pro identifikaci místa v parametrech, ve kterém byla nalezena chyba
  enum ParamError 
  {
    poll_msgID, ///< Chyba v msgID zprávy poll
    contact_handle, ///< Chyba v handle kontaktu
    contact_cc, ///< Chyba v kódu země kontaktu
    nsset_handle, ///< Chyba v handle nssetu
    nsset_tech, ///< Chyba v technickém kontaktu nssetu
    nsset_dns_name, ///< Chyba v názvu nameserveru nssetu
    nsset_dns_addr, ///< Chyba v adrese nameserveru nssetu
    nsset_dns_name_add, ///< Chyba v názvu nameserveru ns
    nsset_dns_name_rem, ///< Chyba v názvu nameserveru ns
    nsset_tech_add, ///< Chyba v přidávaném technickém kontaktu
    nsset_tech_rem, ///< Chyba v odebíraném technickém kontaktu
    domain_fqdn, ///< Chyba v názvu domény
    domain_registrant, ///< Chyba v držiteli domény
    domain_nsset, ///< Chyba v nssetu domény
    domain_period, ///< Chyba v periodě domény
    domain_admin, ///< Chyba v admin kontaktu domény
    domain_tmpcontact, ///< Chyba v temp kontaktu domény
    domain_ext_valDate, ///< Chyba v datumu validace při vytváření domény
    domain_ext_valDate_missing, ///< Datumu validace chybi pro ENUM domenu
    domain_curExpDate, ///< Chyba v zad zadanem atumu expirace u domény
    domain_admin_add, ///< Chyba v přidávaném admin. kontaktu
    domain_admin_rem ///< Chyba v odebíraném admin. kontaktu
  };
  /// Specifikace chyb detekovanych uz pri zpravovani XML v mod_eppd
  enum XmlError
  {
    xml_not_valid, ///< Chyba validace validatorem libxml
    poll_msgID_missing, ///< Parametr msgID chybi v xml
    contact_identtype_missing, ///< Atribut type u ident chybi v xml
    transfer_op ///< Chybi parametr op u transferu v XML
  };
  /// Sekvence specifikace chyb detekovanych uz v mod_eppd
  typedef sequence <XmlError> XmlErrors;
  /// Identifikace chybneho elementu v listu (potencialne zanorenych listech)
//   typedef sequence <short> ErrorPosition;
  /// Typ pro prvek seznamu chybových zpráv
  struct Error
  {
    ParamError code; ///< Kód chyby identifikujici chybny parametr
    string reason; ///< Důvod chyby, textový popis
    short position; ///< Identifikace mista chyby v listu
  };
  /// Typ pro předání chybových zpráv
  typedef sequence <Error> Errors;
  /// Typ pro návratovou hodnotu všech EPP funkcí
  struct Response
  {
    short code; ///< Návratový kód definovaný EPP protokolem
    string msg; ///< Zpráva příslušející návratovému kódu (podle jazyka)
    string svTRID; ///< Server transaction ID
  };
  /// Typ pro předání dat po zavolání info_contact
  struct Contact
  {
    string handle; ///< Handle kontaktu
    string ROID; ///< Identifikátor kontaktu - repository ID
    string ClID; ///< Identifikátor registrátora, který má právo na změnu
    string CrID; ///< Identifikátor registrátora, který vytvořil kontakt
    string UpID; ///< Identifikátor registrátora, který provedl změny
    Status stat; ///< Seznam stavů kontaktu
    timestamp CrDate; ///< Datum a čas vytvoření 
    timestamp UpDate; ///< Datum a čas poslední změny
    timestamp TrDate; ///< Datum a čas posledního transferu
    string Name; ///< Jméno nebo název kontaktu
    string Organization; ///< Název organizace
    Lists Streets; ///< Adresa - maximalne 3 casti
    string City; ///< Adresa - město
    string StateOrProvince; ///< Adresa - kraj(územní celek)
    string PostalCode; ///< PSČ
    string CountryCode; ///< Country Code - dvojmístný kód země ISO 
    string Telephone; ///< Telefonní číslo 
    string Fax; ///< Faxové číslo
    string Email; ///< Kontaktní email pro zprávy o exiraci
    string NotifyEmail; ///< Upozorňovací email pro zprávy o změnách
    string VAT; ///< Daňové identifikační číslo 
    string ident; ///< ident - jednoznační identifikátor kontaktu
    identtyp identtype; ///< Typ ident - definuje význam pole ident
    string AuthInfoPw; ///< Heslo pro transfer kontaktu
    Disclose DiscloseFlag; ///< Disclose flag určující význam disclose param.
    boolean DiscloseName; ///< Vviditelnost pro parametr Name 
    boolean DiscloseOrganization; ///< Viditelnost pro parametr Organization
    boolean DiscloseAddress; ///< Viditelnost pro parametr Address
    boolean DiscloseTelephone; ///< Viditelnost pro parametr Telephone
    boolean DiscloseFax; ///< Viditelnost pro parametr Fax
    boolean DiscloseEmail; ///< Viditelnost pro parametr Email
    boolean DiscloseVAT; ///< Viditelnost pro parametr VAT
    boolean DiscloseIdent; ///< Viditelnost pro parametr ident
    boolean DiscloseNotifyEmail; ///< Viditelnost pro parametr NotifyEmail
  };
  /// Typ pro předání dat po zavolání [create|update]_contact
  struct ContactChange
  {
    string Name; ///< Jméno nebo název kontaktu
    string Organization; ///< Název organizace
    Lists Streets; ///< Adresa - maximalne 3 casti
    string City; ///< Adresa - město
    string StateOrProvince; ///< Adresa - kraj(územní celek)
    string PostalCode; ///< PSČ
    string CC; ///< Country Code - dvojmístný kód země ISO 
    string Telephone; ///< Telefonní číslo 
    string Fax; ///< Faxové číslo
    string Email; ///< Kontaktní email pro zprávy o exiraci
    string NotifyEmail; ///< Upozorňovací email pro zprávy o změnách
    string VAT; ///< Daňové identifikační číslo 
    string ident; ///< ident - jednoznační identifikátor kontaktu
    identtyp identtype; ///< Typ ident - definuje význam pole ident
    string AuthInfoPw; ///< Heslo pro transfer kontaktu
    Disclose DiscloseFlag; ///< Disclose flag určující význam disclose param.
    boolean DiscloseName; ///< Vviditelnost pro parametr Name 
    boolean DiscloseOrganization; ///< Viditelnost pro parametr Organization
    boolean DiscloseAddress; ///< Viditelnost pro parametr Address
    boolean DiscloseTelephone; ///< Viditelnost pro parametr Telephone
    boolean DiscloseFax; ///< Viditelnost pro parametr Fax
    boolean DiscloseEmail; ///< Viditelnost pro parametr Email
    boolean DiscloseVAT; ///< Viditelnost pro parametr VAT
    boolean DiscloseIdent; ///< Viditelnost pro parametr ident
    boolean DiscloseNotifyEmail; ///< Viditelnost pro parametr NotifyEmail
  };
  /// Typ pro přenos dat ve funkci info_nsset
  struct NSSet
  {
    string handle; ///< Handle nssetu
    string ROID; ///< Identifikátor nassetu - repository ID
    string ClID; ///< Identifikátor registrátora, který má právo na změnu
    string CrID; ///< Identifikátor registrátora, který vytvořil kontakt
    string UpID; ///< Identifikátor registrátora, který provedl změny
    Status stat; ///< Seznam stavů nssetu
    timestamp CrDate; ///< Datum a čas vytvoření 
    timestamp UpDate; ///< Datum a čas poslední změny
    timestamp TrDate; ///< Datum a čas posledního transferu
    string AuthInfoPw; ///< Heslo pro transfer nssetu
    DNSHost dns; ///< Seznam nameserverů  DNS
    TechContact tech; ///< Seznam identifikátorů technických kontaktů
    short level; ///< Uroven technickych testu
  };
  /// Typ pro přenos dat ve funkci info_domain
  struct Domain
  {
    string ROID; ///< Identifikátor domény - repository ID
    string name; ///< Fqdn - název domény
    string Registrant; ///< Handle držitele domény
    string nsset; ///< handle NSSETu
    Status stat; ///< Seznam stavů domény
    string ClID; ///< Identifikátor registrátora, který má právo na změnu
    string CrID; ///< Identifikátor registrátora, který vytvořil kontakt
    string UpID; ///< Identifikátor registrátora, který provedl změny
    timestamp CrDate; ///< Datum a čas vytvoření 
    timestamp UpDate; ///< Datum a čas poslední změny
    timestamp TrDate; ///< Datum a čas posledního transferu
    timestamp ExDate; ///< Datum a čas expirace dom=ny
    string AuthInfoPw; ///< Heslo pro transfer domény
    AdminContact admin; ///< Seznam administrativních kontaktů
    ExtensionList ext; ///< Obecné rozšiřující informace 
    AdminContact tmpcontact; ///< Seznam administrativních kontaktů
  };
  /// Typ pro předání datumu validace u ENUM domen
  struct ENUMValidationExtension {
    date valExDate; ///< Datum vypršení platnosti validace
  };
  /// Typ info funkce.
  enum InfoType {
    IT_LIST_CONTACTS,
    IT_LIST_DOMAINS,
    IT_LIST_NSSETS,
    IT_DOMAINS_BY_NSSET,
    IT_DOMAINS_BY_CONTACT,
    IT_NSSETS_BY_CONTACT,
    IT_NSSETS_BY_NS
  };
 
  /// Rozhraní pro server implementující EPP protokol
  interface EPP
  {
    /** Vyjimka kterou muze vratit jakakoliv z EPP funkci v pripade chybne
     *  zadaneho parametru nebo proste kdykoliv kdy odpoved je chybova
     *  (to znamena kod 2xxx).
     */
    exception EppError {
      short errCode; ///< Návratový kód definovaný EPP protokolem
      string errMsg; ///< Zpráva příslušející návratovému kódu (podle jazyka)
      string svTRID; ///< Server transaction ID
      Errors errorList; ///< Seznam chyb
    };
    /** Vyjimka ktera se vrati na poll prikazy pokud je message queue prazdna. */
    exception NoMessages {
      short code; ///< Návratový kód definovaný EPP protokolem
      string msg; ///< Zpráva příslušející návratovému kódu (podle jazyka)
      string svTRID; ///< Server transaction ID
    };
    /// Vrátí číslo verze serveru a aktuální čas
    /** Zjištění čísla verze a aktuálního datumu pro předání v Greeting zprávě.
     * \param datetime Aktuální lokání čas 
     * \return Číslo verze */
    string version(
      out timestamp datetime
    );

    /// ulozi vystupni XML z mod_eppd do tabulky action_xml 
    boolean SaveOutXML( in string svTRID , in string XML );

    /// Zaevidování neůspěšné operace přijaté EPP protokol.
    /** V případě že byla zjištěna chyba ještě na straně EPP serveru, toto 
     volání nalezenou chybu uloží do evidence akcí a vrátí vygenerované 
     srvTRID.
     \param errCode Návratový kód chyby pro jeho zaevidování
     \param clientID Identifikace session získaná při volání ClientLogin.
     Pokud není klient přihlášen (k chybě došlo ještě před přihlášením)
     uvede se sem hodnota 0
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param errorCodes Kody vstupnich chyb zaslane pro preklad do CR
     \param errorStrings Vystupni prelozene stringy odpovidajici kodum chyb
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */
    Response GetTransaction (
      in short errCode,
      in long clientID,
      in string clTRID,
      in XmlErrors errorCodes,
      out ErrorStrings errStrings
    ) raises (EppError);
    /// Potvrzení přečtení zprávy získané přes PollRequest.
    /** Označí danou zprávu jako přečtenou pokud zpráva s daným ID patří
     přihlášenému registrátorovi. Pro pokračování zpracování zpráv
     vrátí počet zbývajících zpráv a identifikaci další zprávy ve frontě.
     \param msgID Id zprávy která se potvrzujejen ciselna hodnota je sprav nee mu  zatim e zadat i token
     \param count Počet zpráv které jsou po odebrání této zprávy ve frontě
     \param newmsgID Id první další zprávy
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */
    Response PollAcknowledgement (
      in string msgID,
      out short count,
      out string newmsgID,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError, NoMessages);
    /// Získání další nepřečtené zprávy ze serveru.
    /** Vrátí obsah první další zprávy přihlášeného registrátora, která ještě 
     nebyla označena jako přečtená a nevypršel datum její expirace.
     \param msgID ID vracené zprávy
     \param count Počet zpráv ve frontě
     \param qDate Datum vložení zprávy do fronty
     \param mesg Text zprávy
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response PollRequest (
      out string msgID,
      out short count,
      out timestamp qDate,
      out string mesg,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError, NoMessages);
    /// Provede autentizaci klienta a přihlášení do systému
    /** Najde v evidenci zadaného registrátora a ověří jeho heslo a 
     otisk klientského certifikátu SSL komunikace. Pokud vše sedí, uloží
     nový záznam o session, nastaví požadovaný jazyk a případně změní heslo.
     \param ClID Identifikátor přihlašovaného registrátora
     \param passwd Heslo pro přihlášení
     \param newpass Nové heslo pokud je požadavek na změnu
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \param clientID Vrátí novou identifikaci session
     \param certID MD5 otisk klientského certifikátu použitém při přihlášení
     \param lang Požadovaný jazyk komunikace
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ClientLogin (
      in string ClID,
      in string passwd,
      in string newpass,
      in string clTRID,
      in string XML,
      out long clientID,
      in string certID,
      in Languages lang
    ) raises (EppError);
    /// Provede uzavření komunikace
    /** V databázi uzavře záznam dané session.
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ClientLogout (
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);

    ///  vrati vysi creditu registratora pro jednotlive zony
    /** 
     \param clientID Identifikace session získaná z ClientLogin
     \param credit vyse  credit ( ze vsech prijatych plateb) podle jednotlivych zone
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ClientCredit (
      out ZoneCredit credit,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);

    /// Ověření možnosti registrovat kontakt s daným identifikátorem
    /** Umožňuje hromadné prozkoumání několika identifikátorů. Pro každý 
     prozkoumá validitu použitého identifikátoru, převede ho na velká
     písmena a zjistí jestli už není tento identifikátor zaregistrován, nebo
     není v ochrané lhůtě po jeho smazání. Vrátí výsledek opět ve formě 
     seznamu.
     \param handle Seznam identifikátorů
     \param a Seznam odpovědí pro jednotlivé identifikátory
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactCheck (
      in Check handle,
      out CheckResp a,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Získání informací o zaregistrovaném kontaktu
    /** Najde kontakt s daným identifikátorem. Pokud přihlášený registrátor
     není registrátorem kontaktu, zobrazí se mu položka AuthInfoPw prázdná.
     \param handle Identifikátor požadovaného objektu
     \param c Datová struktura s odpovědí
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactInfo (
      in string handle,
      out Contact c,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Vymazání zaregistrovaného kontaktu 
    /** Pokud není kontakt v nějaké vazbě s jiným objektem a pokud stav 
     objektu neobsahuje clientDeleteProhibited nebo serverDeleteProhibited, 
     provede jeho smazání. Smazat kontakt může pouze jeho určený registrátor.
     Před smazáním uloží kontakt do historie.
     \param handle Identifikátor požadovaného objektu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactDelete (
      in string handle,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Změna údajů zaregistrovaného kontaktu
    /** Pokud stav nebosahuje clientUpdateProhibited nebo 
     serverUpdateProhibited, aktualizuje na základě požadavků údaje u 
     kontaktu. Pokud je nastaven flag clientUpdateProhibited, lze pouze
     smazat tento příznak. Aktualizovat kontakt smí jen jeho učený registátor.
     Před aktualizací uloží akutální data objektu do historie. Časová značka 
     upDate se nastaví na aktuální čas.
     \param handle Identifikátor požadovaného objektu
     \param c Struktura s požadovanými změnami v kontaktu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactUpdate (
      in string handle,
      in ContactChange c,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Zaregistrování nového kontaktu
    /** Pokud identifikátor projde testem z funkce ContactCheck, založí
     se nový kontakt a přiřadí se vytvářejícímu registrátorovi. Po založení
     uloží nový kontakt do historie aby byla vždy aspoň jedna kopie 
     v historii. Pokud je uvedeno prázdné heslo, vygeneruje se automaticky.
     \param handle Identifikátor požadovaného objektu
     \param c Struktura s požadovanými hodnotamy v kontaktu
     \param crDate Vracený datum vytvoření
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactCreate (
      in string handle,
      in ContactChange c,
      out timestamp crDate,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Převod kontaktu pod jiného registrátora
    /** Ověří zadané heslo s heslem uvedeným u kontaktu a pokud stav objektu
     neobsahuje clientTransferProhibited nebo serverTransferProhibited změní
     určeného registrátora na aktuálně přihlášeného registrátora. Před změnou se
     uloží aktuální kopie do historie. Po změně se vygeneruje automaticky nové
     heslo. 
     \param handle Identifikátor požadovaného objektu
     \param authInfo Heslo pro kontrolu s údajem u objektu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response ContactTransfer (
      in string handle,
      in string authInfo,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Výpis všech kontaktů daného registrátora
    /** Vrátí seznam identifikátorů kontaktů patřících přihlášenému
     registrátorovi.
     \param contacts Seznam identifikátorů kontaktů
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response ContactList (
      out Lists contacts,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Ověření možnosti registrovat nsset s daným identifikátorem
    /** Umožňuje hromadné prozkoumání několika identifikátorů. Pro každý 
     prozkoumá validitu použitého identifikátoru, převede ho na velká
     písmena a zjistí jestli už není tento identifikátor zaregistrován, nebo
     není v ochrané lhůtě po jeho smazání. Vrátí výsledek opět ve formě 
     seznamu.
     \param handle Seznam identifikátorů
     \param a Seznam odpovědí pro jednotlivé identifikátory
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetCheck (
      in Check handle,
      out CheckResp a,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Získání informací o zaregistrovaném nssetu
    /** Najde nsset s daným identifikátorem. Pokud přihlášený registrátor
     není registrátorem nssetu, zobrazí se mu položka AuthInfoPw prázdná.
     \param handle Identifikátor požadovaného objektu
     \param n Datová struktura s odpovědí
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetInfo (
      in string handle,
      out NSSet n,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Vymazání zaregistrovaného nssetu
    /** Pokud není nsset v nějaké vazbě s jiným objektem a pokud stav 
     objektu neobsahuje clientDeleteProhibited nebo serverDeleteProhibited, 
     provede jeho smazání. Smazat nsset může pouze jeho určený registrátor.
     Před smazáním uloží nsset do historie.
     \param handle Identifikátor požadovaného objektu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetDelete (
      in string handle,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Změna údajů zaregistrovaného nssetu
    /** Pokud stav nebosahuje clientUpdateProhibited nebo 
     serverUpdateProhibited, aktualizuje na základě požadavků údaje u 
     nssetu. Pokud je nastaven flag clientUpdateProhibited, lze pouze
     smazat tento příznak. Aktualizovat nsset smí jen jeho učený registátor. 
     Před aktualizací uloží akutální data objektu do historie. Je třeba dodržet 
     podmínky, že v nssetu musí být alespoň dva dns hosty a alespoň jeden
     technický kontakt. Dns hosty, které mají uvedenou IP adresu (GLUE) musí
     mít mít hostname ze zóny spravované tímto registrem. Je dovoleno
     používat IPv4 i IPv6 adresy z veřejného rozsahu adres. Časová
     značka upDate se nastaví na aktuální čas.
     \param handle Identifikátor požadovaného objektu
     \param authInfo_chg Změna hesla pro převod
     \param dns_add Identifikátor přidávaného hosta
     \param dns_rem Identifikátor odebíraného hosta
     \param tech_add Identifikátor přidávaného technického kontaktu
     \param tech_rem Identifikátor odebíraného technického kontaktu
     \param level Uroven technickych testu (-1 znamena nezadano)
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetUpdate (
      in string handle,
      in string authInfo_chg,
      in DNSHost dns_add,
      in DNSHost dns_rem,
      in TechContact tech_add,
      in TechContact tech_rem,
      in short level,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Zaregistrování nového nssetu
    /** Pokud identifikátor projde testem z funkce NSSetCheck, založí
     se nový nsset a přiřadí se vytvářejícímu registrátorovi. Pokud je 
     uvedeno prázdné heslo, vygeneruje se automaticky. Po založení
     uloží nový nsset do historie aby byla vždy aspoň jedna kopie 
     v historii. Při vytváření platí stejná pravidla jako jsou ta zmíněna v
     popisu funkce NSSetUpdate.
     \param handle Identifikátor požadovaného objektu
     \param authInfoPw Heslo pro převod
     \param tech Seznam technických kontaktů
     \param dns Seznam hostů (nameserverů)
     \param level Uroven technickych testu (-1 znamena nezadano)
     \param crDate Vracený datum vytvoření
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetCreate (
      in string handle,
      in string authInfoPw,
      in TechContact tech,
      in DNSHost dns,
      in short level,
      out timestamp crDate,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Převod nssetu pod jiného registrátora
    /** Ověří zadané heslo s heslem uvedeným u nssetu a pokud stav objektu
     neobsahuje clientTransferProhibited nebo serverTransferProhibited změní
     určeného registrátora na aktuálně přihlášeného registrátora. Před změnou se
     uloží aktuální kopie do historie. Po změně se vygeneruje automaticky nové
     heslo. 
     \param handle Identifikátor požadovaného objektu
     \param authInfo Heslo pro kontrolu s údajem u objektu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response NSSetTransfer (
      in string handle,
      in string authInfo,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Výpis všech nssetů daného registrátora
    /** Vrátí seznam identifikátorů nssetů patřících přihlášenému
     registrátorovi.
     \param nssets Seznam identifikátorů nssetů
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response NSSetList (
      out Lists nssets,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Asynchronní vyvolání technické kontroly nssetu.
    /**
     \param handle Identifikátor nssetu.
     \param fqdns Doménova jména, které máji být otestována s nssetem.
     \param level Uroven technickych testu (pokud je -1 bere se level nssetu).
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response nssetTest (
      in string handle,
      in short level,
      in Lists fqdns,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Ověření možnosti registrovat doménu s daným názvem
    /** Umožňuje hromadné prozkoumání několika identifikátorů. Pro každý 
     prozkoumá validitu použitého identifikátoru, převede ho na malá
     písmena a zjistí jestli už není tento identifikátor zaregistrován, nebo
     není v ochrané lhůtě po jeho smazání. Vrátí výsledek opět ve formě 
     seznamu. Doména musí být ze zóny spravované registrem a musí
     splňovat pravidla podle jméno domény (včetně speciálních pravidel pro
     enum domény) daná příslušnými RFC (1035,2916). Počet úrovní nesmí
     překročit hodnu uvedenou jako parametr zóny (např. pro cz je to 1,
     pro enum domény je to maximální délka čísla). Není možné zaregistrovat
     doménu pokud již existuje její naddoména nebo poddoména.
     \param fqdn Seznam identifikátorů
     \param a Seznam odpovědí pro jednotlivé identifikátory
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainCheck (
      in Check fqdn,
      out CheckResp a,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Získání informací o zaregistrované doméně
    /** Nejprve ověří stejným způsobem jako v DomainCheck validitu
     identifkátoru. Najde doménu s daným jménem nebo se jménem naddomény
     nebo poddomény. Pokud přihlášený registrátor
     není registrátorem nalezené domény, zobrazí se mu položka AuthInfoPw 
     prázdná. Pokud se navíc jedná o enum doménu, nezobrazí se tomuto cizímu
     registrátoru ani držitel domény a administrativní kontakty. U enum domén
     se vrací navíc datum validace v obecném seznamu rozšíření.
     \param fqdn Název domény
     \param d Datová struktura s odpovědí
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainInfo (
      in string fqdn,
      out Domain d,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Vymazání zaregistrované domény
    /** Pokud stav objektu neobsahuje clientDeleteProhibited nebo 
     serverDeleteProhibited, provede jeho smazání. Smazat doménu může
     pouze její určený registrátor. Před smazáním uloží doména do historie.
     Pro tuto operaci musí mít registrátor práva k zóně dané domény.
     \param fqdn Název domény
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainDelete (
      in string fqdn,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Změna údajů zaregistrované domény
    /** Nejprve ověří stejným způsobem jako v DomainCheck validitu
     identifkátoru. Pokud stav neobsahuje clientUpdateProhibited nebo 
     serverUpdateProhibited, aktualizuje na základě požadavků údaje u 
     nssetu. Pokud je nastaven flag clientUpdateProhibited, lze pouze
     smazat tento příznak. Aktualizovat doménu smí jen její určený registrátor. 
     Před aktualizací uloží aktuální data objektu do historie. Pro tuto 
     operaci musí mít registrátor práva k zóně dané domény. Časová
     značka upDate se nastaví na aktuální čas. Jen u enum domén je možné
     uvést rozšíření obsahující datum validace. Tento datum nesmí být nastaven
     dále do budoucnosti než je uvedeno v parametrech zóny.
     \param fqdn Název domény
     \param registrant_chg Změna držitele domény
     \param authInfo_chg Změna hesla pro převod
     \param nsset_chg Změnna nssetu
     \param admin_add Identifikátor přidávaného administrativního kontaktu
     \param admin_rem Identifikátor odebíraného administrativního kontaktu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \param ext Rozšíření obsahující další údaje (např validaci u ENUM domény)
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainUpdate (
      in string fqdn,
      in string registrant_chg,
      in string authInfo_chg,
      in string nsset_chg,
      in AdminContact admin_add,
      in AdminContact admin_rem,
      in AdminContact tmpcontact_rem,
      in long clientID,
      in string clTRID,
      in string XML , 
      in ExtensionList ext
    ) raises (EppError);
    /// Zaregistrování nové domény
    /** Pokud jméno domény projde testem z funkce DomainCheck a
     registrátor má oprávnění pro danou zónu, založí se nová doména a přiřadí
     se vytvářejícímu registrátorovi. Pokud je uvedeno prázdné heslo, 
     vygeneruje se automaticky. Po založení
     uloží novou doménu do historie aby byla vždy aspoň jedna kopie 
     v historii. Pokud není uvedena perioda, nastaví se na minimální periodu 
     podle parametrů zóny. Pokud je uvedena musí splňovat další parametry
     zóny a to maximální periodu a násobek minimální periody. Před založením
     se ještě zkontroluje zda pro tuto operaci je u registárora dostatek
     kreditu a tento kredit se registrátorovi odečte. Při založení enum domény
     je nutné zadat v rozšíření datum validace. To nesmí být větší než maximum
     uvedené v parametrech zóny.
     \param fqdn Název domény
     \param Registrant Identifikátor kontaktu držitele
     \param nsset Identifikátor přiřazeného nssetu (nebo prázdný řetězec)
     \param AuthInfoPw Heslo pro převod
     \param period Počáteční doba expirace v měsících
     \param admin Seznam administrativních kontaktů
     \param crDate Vracený datum vytvoření
     \param exDate Vrací spočtený datum expirace na základě periody
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \param ext Rozšíření obsahující další údaje (např validaci u ENUM domény)
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainCreate (
      in string fqdn,
      in string Registrant,
      in string nsset,
      in string AuthInfoPw,
      in Period_str period,
      in AdminContact admin,
      out timestamp crDate,
      out date exDate,
      in long clientID,
      in string clTRID,
      in string XML,
      in ExtensionList ext
    ) raises (EppError);
    /// Prodloužení domény o zadaný počet měsíců
    /** Nejprve ověří stejným způsobem jako v DomainCheck validitu
     identifkátoru. Pokud stav nebosahuje clientRenewProhibited nebo 
     serverRenewProhibited, provede prodloužení domény o zadaný počet měsíců. 
     Zároveň je u enum domén možné prodloužit i datum expirace. Pravidla jsou
     stejná jako při vytvoření domény. Prodloužení je opět podmíněno dostatkem
     kreditu a oprávněním registrátora pro práci s danou zónou. Před změnou
     údajů se záznam uloží do historie.
     \param fqdn Název domény
     \param curExpDate Aktuální datum expirace (zjištěný z Info funkce)
     \param period Počet měsíců o které se prodlouží registrace
     \param exDate Vrací nový datum expirace
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \param ext Rozšíření obsahující další údaje (např validaci u ENUM domény)
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainRenew (
      in string fqdn,
      in date curExpDate,
      in Period_str period,
      out timestamp exDate,
      in long clientID,
      in string clTRID,
      in string XML,
      in ExtensionList ext
    ) raises (EppError);
    /// Převod domény pod jiného registrátora
    /** Ověří zadané heslo s heslem uvedeným u domény a pokud stav objektu
     neobsahuje clientTransferProhibited nebo serverTransferProhibited změní
     určeného registrátora na aktuálně přihlášeného registrátora. Před změnou se
     uloží aktuální kopie do historie. Po změně se vygeneruje automaticky nové
     heslo. Pro tuto operaci musí mít registrátor práva k zóně dané domény.
     \param fqdn Název požadované domény
     \param authInfo Heslo pro kontrolu s údajem u objektu
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */   
    Response DomainTransfer (
      in string fqdn,
      in string authInfo,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Výpis všech domén daného registrátora
    /**Vrátí seznam jmen domén patřících přihlášenému
     registrátorovi.
     \param domains Seznam názvů domén
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response DomainList (
      out Lists domains,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Vyzadani si authinfa pro drzetele domeny
    /**
     \param fqdn Nazev domeny pro kterou se vyzaduje authInfo
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response domainSendAuthInfo (
      in string fqdn,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Vyzadani si authinfa pro drzetele kontaktu
    /**
     \param handle Handle kontaktu pro ktery se vyzaduje authInfo
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response contactSendAuthInfo (
      in string handle,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Vyzadani si authinfa pro drzetele nssetu
    /**
     \param handle Handle nssetu pro ktery se vyzaduje authInfo
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response nssetSendAuthInfo (
      in string handle,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Tato funkce zapouzdruje vsechny rozsirujici info funkce
    /**
     \param type Typ vyhledavaci funkce, viz enum InfoType.
     \param handle Handle podle ktereho se ma vyhledavat.
     \param count Pocet nalezenych vysledku.
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response info (
      in InfoType type,
      in string handle,
      out long count,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
    /// Ziskej seznam vysledku info funkce
    /**
     \param handles Seznam vracenych handlu.
     \param clientID Identifikace session získaná z ClientLogin
     \param clTRID Klientem poskytnuté číslo transakce pro jeho zaevidování
     \param XML Kompletní XML zpráva která přišla přes EPP protokol
     \return Obecná odpověď s výsledkem operace a chybovými hláškami */       
    Response getInfoResults (
      out Lists handles,
      in long clientID,
      in string clTRID,
      in string XML
    ) raises (EppError);
  }; // interface EPP
  
}; // module ccReg
