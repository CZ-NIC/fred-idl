module ccReg {

  /// Structure for handling day
  struct DateType {
    short day; ///< day of month (1..31)
    short month; ///< month in year (1..12)
    short year; ///< year (i.e. 2006)
  };
  
  /// Structure for handling interval of days
  struct DateInterval {
    DateType from; ///< start of interval - Date(0,0,0) means ignore this field
    DateType to; ///< end of interval - Date(0,0,0) means ignore this field 
  };
  
  /// Structure for handling date and time
  struct DateTimeType {
    DateType date;
    short hour; ///< hour (0..23)
    short minute; ///< minute (0..59)
    short second; ///< second (0..59)
  };
  
  /// Structure for handling interval of times
  struct DateTimeInterval {
    DateTimeType from; ///< start of interval 
    DateTimeType to; ///< end of interval
  };

  /// Type for EPP commands
  typedef string EPPActionType;
  
  /// List of EPP command types
  typedef sequence<EPPActionType> EPPActionTypeSeq;

  typedef string CountryCode;
  struct CountryDesc {
    CountryCode cc;
    string name;
  };
  typedef sequence<CountryDesc> CountryDescSeq;
  
  /// Description structure for object status
  struct ObjectStatusDesc {
    short id;
    string name;
  };
  /// Sequence of status descriptions 
  typedef sequence<ObjectStatusDesc> ObjectStatusDescSeq;
  /// Sequence of status values
  typedef sequence<short> ObjectStatusSeq;

  /// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  ///          Table management
  /// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  /// One row of Table
  typedef sequence<string> TableRow;

  interface Filter;
  /// Table for data
  interface Table {
    enum ColumnType {
       CT_REGISTRAR_HANDLE,
       CT_CONTACT_HANDLE,
       CT_DOMAIN_HANDLE,
       CT_NSSET_HANDLE,
       CT_DATE,
       CT_TIME,
       CT_OTHER
    };
    struct ColumnDesc {
       string name;
       ColumnType type;
    };
    typedef sequence<ColumnDesc> ColumnHeaders;
    /// Exception for accessing invalid row
    exception INVALID_ROW {};
    /// Number of rows in table
    readonly attribute short numRows;
    /// Number of columns in table
    readonly attribute short numColumns;
    /// Return descriptions of all columns
    ColumnHeaders getColumnHeaders();
    /// Return ona row of string representation of data in table
    TableRow getRow(in short row) raises (INVALID_ROW);
    /// Sort data by column index
    void sortByColumn(in short column, in boolean dir);
    /// Output data in CSV format
    string outputCSV();
    /// Return filter
    readonly attribute Filter aFilter;
    /// Return id of record at index
    long getRowId(in short pageRow) raises (INVALID_ROW);
  };
  
  /// Table divided into pages
  interface PageTable : Table {
    /// Exception for accessing invalid page
    exception INVALID_PAGE {};
    /// Size of one page
    attribute short pageSize;
    /// Current page index
    readonly attribute short page;
    /// Set current page
    void setPage(in short page) raises (INVALID_PAGE);
    /// Start row of current page
    readonly attribute short start;
    /// Number of pages
    readonly attribute short numPages;
    /// Exact size of one page (always < pageSize)
    readonly attribute short numPageRows;
    /// Return row by index in page
    TableRow getPageRow(in short pageRow) raises (INVALID_ROW);
    /// Return id of record at index
    long getPageRowId(in short pageRow) raises (INVALID_ROW);
  };

  /// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  ///          Filter management
  /// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  /// Common interface for data
  interface Filter {
    /// Reload data
    void reload();
    /// Clear filter and reload data
    void clear();
  };

  /// Filter for common registry object
  interface RegObjectFilter : Filter {
    /// Those made by specific registrar
    attribute short registrar;    
    /// Those made by specific registrar byt handle
    attribute string registrarHandle;
    /// Those created by specific registrar
    attribute short createRegistrar;    
    /// Those created by specific registrar byt handle
    attribute string createRegistrarHandle;
    /// Those updated by specific registrar
    attribute short updateRegistrar;    
    /// Those updated by specific registrar byt handle
    attribute string updateRegistrarHandle;
    /// Interval of crDate
    attribute DateInterval crDate;
    /// Interval of trDate
    attribute DateInterval trDate;
    /// Interval of upDate
    attribute DateInterval upDate;
    /// Search in status - 'and' operator between values
    attribute ObjectStatusSeq status;
  };

  /// Filter for Registrar
  interface RegistrarsFilter : Filter {
    /// Fulltext search in handle
    attribute string fulltext;
    /// Fulltext search in name
    attribute string name;
    /// Fulltext search in handle
    attribute string handle;
  };

  /// Filter for EPPActions
  interface EPPActionsFilter : Filter {
    /// Result classification type
    enum ResultType {
     RT_OK, ///< result < 2000
     RT_FAIL, ///< result >= 2000 or no result code at all
     RT_ALL ///< all actions
    };
    /// Those made by specific registrar
    attribute short registrar;
    /// Those made by specific registrar byt handle
    attribute string registrarHandle;
    /// Those of specific type
    attribute EPPActionType type;
    /// Those refefing to object with this handle
    attribute string handle;
    /// Those having substring in xml
    attribute string xml;
    /// Those with this result code
    attribute short result;
    /// Those having proper result classification
    attribute ResultType resultClass;
    /// Those processed at this date interval
    attribute DateTimeInterval time;
    /// Those with specified clTRID
    attribute string clTRID;
    /// Those with specified svTRID
    attribute string svTRID;
  };

  /// Filter for Domains
  interface DomainsFilter : RegObjectFilter {
    /// Those having substring in fqdn
    attribute string fqdn;
    /// Those holding by specific registrant
    attribute short registrant;
    /// Those holding by specific registrant by handle
    attribute string registrantHandle;
    /// Those refering to specific nsset
    attribute short nsset;
    /// Those refering to specific nsset by handle
    attribute string nssetHandle;
    /// Those having specific admin contact
    attribute short admin;
    /// Those having specific admin contact by Handle
    attribute string adminHandle;
    /// Those having expiration date in supplied interval
    attribute DateInterval exDate;
    /// Those having validation date in supplied interval
    attribute DateInterval valExDate;
    /// Those having nsset with this tech admin 
    attribute string techAdminHandle;
    /// Those having nsset with IP address
    attribute string nssetIP;
  };

  /// Filter for Contacts
  interface ContactsFilter : RegObjectFilter {
    /// Search in handle
    attribute string handle;
    /// Search in name
    attribute string name;
    /// Search in organization
    attribute string org;
    /// Search in identification number
    attribute string ident;
    /// Search in email
    attribute string email;
    /// Search in email
    attribute string vat;
  };

  /// Filter for NSSets
  interface NSSetsFilter : RegObjectFilter {
    /// Search in handle
    attribute string handle;
    /// Search in admin
    attribute string adminHandle;
    /// Search in hostname
    attribute string hostname;
    /// Search in ip
    attribute string ip;
  };
  
  module AuthInfoRequest {
    enum RequestType {
      RT_EPP,
      RT_AUTO_PIF,
      RT_EMAIL_PIF,
      RT_POST_PIF
    };
    enum RequestStatus {
      RS_NEW,
      RS_ANSWERED,
      RS_INVALID
    } ;
    enum ObjectType {
      OT_DOMAIN,
      OT_CONTACT,
      OT_NSSET
    } ;
    interface Filter : ccReg::Filter {
      attribute long id;
      attribute string handle;
      attribute RequestStatus status;
      attribute RequestType type;
      attribute DateTimeInterval crTime;
      attribute DateTimeInterval closeTime;
      attribute string reason;
      attribute string svTRID;
      attribute string email;
    };
    struct Detail {
      long id;
      string handle;
      RequestStatus status;
      RequestType type;
      string crTime;
      string closeTime;
      string reason;
      string svTRID;
      string email;
      long answerEmailId;
      ObjectType oType;
      long objectId;
      string registrar;
    }; 
  };

  /// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  ///          Concrete object tables
  /// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  /// List of registrars
  interface Registrars : PageTable, RegistrarsFilter {
  };

  /// List of EPPActions
  interface EPPActions : PageTable, EPPActionsFilter {
  };

  /// List of Domains
  interface Domains : PageTable, DomainsFilter {
  };

  /// List of Contacts
  interface Contacts : PageTable, ContactsFilter {
  };

  /// List of NSSets
  interface NSSets : PageTable, NSSetsFilter {
  };
 
  interface AuthInfoRequests: PageTable, AuthInfoRequest::Filter {
  };

  /// Main interface for registrar session
  interface Session {   
    Registrars getRegistrars();
    EPPActions getEPPActions();
    Domains getDomains();
    Contacts getContacts();
    NSSets getNSSets();
    AuthInfoRequests getAuthInfoRequests();
  };

  /// Money type in smallest unit (hallers)
  typedef unsigned long Money;

  /// Access structure
  struct EPPAccess {
    string password; ///< epp login password
    string md5Cert; ///< md5 of certificate
  };
  
  /// List of access structures
  typedef sequence<EPPAccess> EPPAccessSeq;
  
  /// Registrar detail structure
  struct Registrar {
    long id; ///< registrar ID
    string handle; ///< registrar identification
    string name; ///< registrar name
    string organization; ///< organization name
    string street1; ///< address part 1
    string street2; ///< address part 2
    string street3; ///< address part 3
    string city; ///< city of registrar headquaters
    string stateorprovince; ///< address part
    string postalcode; ///< address part
    CountryCode country; ///< country code
    string telephone; ///< phne number
    string fax; ///< fax number
    string email; ///< contact email
    string url; ///< URL
    Money credit; ///< actual credit
    EPPAccessSeq access; ///< list of epp access data
  };

  struct EPPAction {
    short id; ///< id of action
    string time; /// < processing time
    string xml; ///< xml of request
    EPPActionType type; ///< type of request
    string objectHandle; ///< handle of major object
    string registrarHandle; ///< handle of registrar processiong request
    short result; ///< result code
    string clTRID; ///< token provided by registrar
    string svTRID; ///< token attached by server
  };
 
  typedef sequence<string> ContactHandleSeq;
  struct DomainDetail {
     short id;
     string fqdn;
     string roid;
     string registrarHandle;
     string createDate;
     string transferDate;
     string updateDate;
     string createRegistrarHandle;
     string updateRegistrarHandle;
     string authInfo;
     string registrantHandle;
     string expirationDate;
     string valExDate;
     string nssetHandle;
     ContactHandleSeq admins;
     ObjectStatusSeq statusList;
  };

  struct ContactDetail {
     short id;
     string handle;
     string roid;
     string registrarHandle;
     string createDate;
     string transferDate;
     string updateDate;
     string createRegistrarHandle;
     string updateRegistrarHandle;
     string authInfo;
     string name;
     string organization;
     string street1;
     string street2;
     string street3;
     string province;
     string postalcode;
     string city;
     string country;
     string telephone;
     string fax;
     string email;
     string notifyEmail;
     string ssn;
     string ssnType;
     string vat;
     boolean discloseName;
     boolean discloseOrganization;
     boolean discloseEmail;
     boolean discloseAddress;
     boolean discloseTelephone;
     boolean discloseFax;
     ObjectStatusSeq statusList;
  };

  struct NSSetDetail {
     short id;
     string handle;
     string roid;
     string registrarHandle;
     string createDate;
     string transferDate;
     string updateDate;
     string createRegistrarHandle;
     string updateRegistrarHandle;
     string authInfo;
     ContactHandleSeq admins;
     DNSHost hosts;
     ObjectStatusSeq statusList;     
  };

  // Typ pro seznam registrátorů 
  typedef sequence<Registrar> RegistrarList;

  /// Typ pro výsledek klasifikace identifikátoru
  enum CheckHandleClass {
    CH_ENUM_BAD_ZONE, ///< Handle je enum číslo minmo registr
    CH_ENUM, ///< Handle je enum číslo
    CH_DOMAIN_PART, ///< Handle je část domény (připojí se defaultní koncovka)
    CH_DOMAIN_BAD_ZONE, ///< Handle je doména mimo registr
    CH_DOMAIN_LONG, ///< Handle je doména nepovolené délky (zkrácena)
    CH_DOMAIN, ///< Handle je doména
    CH_NSSET, ///< Handle je nsset
    CH_CONTACT, ///< Handle je kontakt
    CH_INVALID ///< Handle není validní
  };
  
  /// Typ návratové hodnoty funkce checkHandle
  struct CheckHandleType {
    string newHandle; ///< Přeložený handle pokud je třeba
    CheckHandleClass handleClass; ///< Výsledek klasifikace handle
  };

  typedef string SessionIDType;
  
  /// Administrátorské rozhraní
  interface Admin
  {
    /// Vyjímka pro případ nenalezení hledaného objektu
    exception ObjectNotFound {};
    /// Vyjímka pro případ nepovedeného updatu objektu
    exception UpdateFailed {};
    /// exception when authentification failed
    exception AuthFailed {};
    /// log into administrator interface 
    SessionIDType login(in string username, in string password) raises (AuthFailed);
    /// get session
    Session getSession(in SessionIDType sessionID) raises (ObjectNotFound);
    /// Vrátí kompletní seznam registrátorů
    /** 
     \return Seznam registrátorů */
    RegistrarList getRegistrars();
    /// Najde jednoho registrátora podle zadaného handle
    /**
     \param handle Identifikátor hledaného registrátora
     \return Nalezený registrátor pokud není vyjímka */
    Registrar getRegistrarByHandle(in string handle) raises (ObjectNotFound);
    /// Return registrar detail for specified id
    Registrar getRegistrarById(in long id) raises (ObjectNotFound);
    /// Uloží registrátora
    void putRegistrar(in Registrar regData) raises (UpdateFailed);
    /// Return contact detail for specified handel
    ContactDetail getContactByHandle(in string handle) raises (ObjectNotFound);
    /// Return contact detail for specified id
    ContactDetail getContactById(in long id) raises (ObjectNotFound);
    /// Return nsset detail for specified handel
    NSSetDetail getNSSetByHandle(in string handle) raises (ObjectNotFound);
    /// Return nsset detail for specified id
    NSSetDetail getNSSetById(in long id) raises (ObjectNotFound);
    /// Return domain detail for specified handel
    DomainDetail getDomainByFQDN(in string fqdn) raises (ObjectNotFound);
    /// Return domain detail for specified id
    DomainDetail getDomainById(in long id) raises (ObjectNotFound);
    /// Return EPP action detail for specified id
    EPPAction getEPPActionById(in long id) raises (ObjectNotFound);
    /// Return AuthInfoRequest detail for specified id
    AuthInfoRequest::Detail getAuthInfoRequestById(in long id) raises (ObjectNotFound);
    /// Return count of registred ENUM domains
    long getEnumDomainCount();
    /// Return count of numbers described by all registred ENUM domains
    long getEnumNumberCount();
    /// Classify input handle according to registry policy
    /**
     \param handle Input handle for classification
     \param ch Output structure with classification */
    void checkHandle(
      in string handle,
      out CheckHandleType ch
    );
    /// Return list of epp action types
    EPPActionTypeSeq getEPPActionTypeList();
    /// Return country code list
    CountryDescSeq getCountryDescList();
    /// Return default country code
    CountryCode getDefaultCountry();
    /// Return list with descriptions of available object status for domain
    ObjectStatusDescSeq getDomainStatusDescList();
    /// Return list with descriptions of available object status for contact
    ObjectStatusDescSeq getContactStatusDescList();
    /// Return list with descriptions of available object status for nsset
    ObjectStatusDescSeq getNSSetStatusDescList();
    
    /// Type of auth_info request
    enum RequestType 
    {
      RT_EPP, ///< Request was created by registrar through EPP
      RT_AUTO_PIF, ///< Request for automatic answer created through PIF
      RT_EMAIL_PIF, ///< Request waiting for autorization by signed email
      RT_POST_PIF ///< Request waiting for autorization by checked letter
    };
    /// Exception for unspecified email in ([AUTO|POST]_PIF) request
    exception BAD_EMAIL {};
    /// Exception for bad object id
    exception OBJECT_NOT_FOUND {};
    /// Exception for bad EPP action id in EPP request
    exception ACTION_NOT_FOUND {};
    /// Exception for bad EPP action id in EPP request
    exception SQL_ERROR {};
    /// Create request for auth_info
    long createAuthInfoRequest(
      in long objectId, ///< id of object to take auth_info from
      in RequestType type, ///< type of request
      in long eppActionId, ///< id of EPP action (EPP)
      in string requestReason, ///< reason from PIF (*_PIF)
      in string emailToAnswer ///< email to answer ([AUTO|POST]_PIF)
    ) raises (BAD_EMAIL, OBJECT_NOT_FOUND, ACTION_NOT_FOUND, SQL_ERROR);
    /// Process request by sending email with auth_info
    void processAuthInfoRequest(in long id) raises (SQL_ERROR);
  };
};
