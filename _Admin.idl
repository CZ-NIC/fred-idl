module ccReg {



  /// One row of Table
  typedef sequence<string> TableRow;

  /// Table for data
  interface Table {
    /// Exception for accessing invalid row
    exception INVALID_ROW {};
    /// Number of rows in table
    readonly attribute short numRows;
    /// Number of columns in table
    readonly attribute short numColumns;
    /// Return names of all columns
    TableRow getColumnNames();
    /// Return ona row of string representation of data in table
    TableRow getRow(in short row) raises (INVALID_ROW);
    /// Sort data by column index
    void sortByColumn(in short column, in boolean dir);
    /// Output data in CSV format
    string outputCSV();
  };
  
  /// Table divided into pages
  interface PageTable : Table {
    /// Exception for accessing invalid page
    exception INVALID_PAGE {};
    /// Size of one page
    attribute short pageSize;
    /// Current page index
    readonly attribute short page;
    /// Set current page
    void setPage(in short page) raises (INVALID_PAGE);
    /// Start row of current page
    readonly attribute short start;
    /// Number of pages
    readonly attribute short numPages;
    /// Exact size of one page (always < pageSize)
    readonly attribute short numPageRows;
    /// Return row by index in page
    TableRow getPageRow(in short pageRow) raises (INVALID_ROW);

  };
  
  /// Common interface for data
  interface Filter {
    /// Reload data
    void reload();
  };

  /// List of registrars
  interface Registrars : PageTable, Filter {
    /// Fulltext search in handle
    attribute string fulltext;
  };

  /// List of EPPActions
  interface EPPActions : PageTable, Filter {
    /// Those made by specific registrar
    attribute short registrar;
  };

  /// List of Domains
  interface Domains : PageTable, Filter {
    /// Those managed by specific registrar
    attribute short registrar;
    /// Those holding by specific registrant
    attribute short registrant;
  };

  /// List of Contacts
  interface Contacts : PageTable, Filter {
  };

  /// List of NSSets
  interface NSSets : PageTable, Filter {
  };

  /// Main interface for registrar session
  interface Session {   
    Registrars getRegistrars();
    EPPActions getEPPActions();
    Domains getDomains();
    Contacts getContacts();
    NSSets getNSSets();
  };

  /// Typ pro kredit registrátora, celé číslo v haléřích
  typedef unsigned long price;

  /// Struktura s detailem registrátora
  struct Registrar {
    long id; ///< ID
    string handle; ///< Identifkátor
    string name; ///< Jméno
    string organization; ///< Název organizace
    string street1; ///< Adresa 1
    string street2; ///< Adresa 2
    string street3; ///< Adresa 3
    string city; ///< Město
    string stateorprovince; ///< Kraj
    string postalcode; ///< PSČ
    string country; ///< Kód země
    string telephone; ///< Telefonní číslo
    string fax; ///< Faxové číslo
    string email; ///< Kontaktní email
    string url; ///< URL 
    price credit; ///< Aktuální víše kreditu
  };

  // Typ pro seznam registrátorů 
  typedef sequence<Registrar> RegistrarList;

  /// Typ pro výsledek klasifikace identifikátoru
  enum CheckHandleClass {
    CH_ENUM_BAD_ZONE, ///< Handle je enum číslo minmo registr
    CH_ENUM, ///< Handle je enum číslo
    CH_DOMAIN_PART, ///< Handle je část domény (připojí se defaultní koncovka)
    CH_DOMAIN_BAD_ZONE, ///< Handle je doména mimo registr
    CH_DOMAIN_LONG, ///< Handle je doména nepovolené délky (zkrácena)
    CH_DOMAIN, ///< Handle je doména
    CH_NSSET, ///< Handle je nsset
    CH_CONTACT, ///< Handle je kontakt
    CH_INVALID ///< Handle není validní
  };
  
  /// Typ návratové hodnoty funkce checkHandle
  struct CheckHandleType {
    string newHandle; ///< Přeložený handle pokud je třeba
    CheckHandleClass handleClass; ///< Výsledek klasifikace handle
  };

  typedef string SessionIDType;

  /// Administrátorské rozhraní
  interface Admin
  {
    /// log into administrator interface 
    SessionIDType login(in string username, in string password);
    /// get session
    Session getSession(in SessionIDType sessionID);
    /// Vyjímka pro případ nenalezení hledaného objektu
    exception ObjectNotFound {};
    /// Vrátí kompletní seznam registrátorů
    /**
     \return Seznam registrátorů */
    RegistrarList getRegistrars();
    /// Najde jednoho registrátora podle zadaného handle
    /**
     \param handle Identifikátor hledaného registrátora
     \return Nalezený registrátor pokud není vyjímka */
    Registrar getRegistrarByHandle(
     in string handle
    ) raises (ObjectNotFound);

    /// Klasifikuje vstupní handle podle pravidel registru
    /**
     \param handle Vstupní handle pro klasifikaci
     \param ch Výstupní struktura s klasifikací */
    void checkHandle(
      in string handle,
      out CheckHandleType ch
    );
  };
};
