module ccReg {

  /// date structure
  struct DateType {
    short day; ///< day of month (1..31)
    short month; ///< month in year (1..12)
    short year; ///< year (i.e. 2006)
  };
  
  /// date interval
  struct DateInterval {
    DateType from; ///< start of interval - Date(0,0,0) means ignore this field
    DateType to; ///< end of interval - Date(0,0,0) means ignore this field 
  };
 
  /// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  ///          Table management
  /// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  /// One row of Table
  typedef sequence<string> TableRow;

  interface Filter;
  /// Table for data
  interface Table {
    enum ColumnType {
       CT_REGISTRAR_HANDLE,
       CT_CONTACT_HANDLE,
       CT_DOMAIN_HANDLE,
       CT_NSSET_HANDLE,
       CT_OTHER
    };
    struct ColumnDesc {
       string name;
       ColumnType type;
    };
    typedef sequence<ColumnDesc> ColumnHeaders;
    /// Exception for accessing invalid row
    exception INVALID_ROW {};
    /// Number of rows in table
    readonly attribute short numRows;
    /// Number of columns in table
    readonly attribute short numColumns;
    /// Return descriptions of all columns
    ColumnHeaders getColumnHeaders();
    /// Return ona row of string representation of data in table
    TableRow getRow(in short row) raises (INVALID_ROW);
    /// Sort data by column index
    void sortByColumn(in short column, in boolean dir);
    /// Output data in CSV format
    string outputCSV();
    /// Return filter
    readonly attribute Filter aFilter;   
  };
  
  /// Table divided into pages
  interface PageTable : Table {
    /// Exception for accessing invalid page
    exception INVALID_PAGE {};
    /// Size of one page
    attribute short pageSize;
    /// Current page index
    readonly attribute short page;
    /// Set current page
    void setPage(in short page) raises (INVALID_PAGE);
    /// Start row of current page
    readonly attribute short start;
    /// Number of pages
    readonly attribute short numPages;
    /// Exact size of one page (always < pageSize)
    readonly attribute short numPageRows;
    /// Return row by index in page
    TableRow getPageRow(in short pageRow) raises (INVALID_ROW);
  };

  /// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  ///          Filter management
  /// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  /// Common interface for data
  interface Filter {
    /// Reload data
    void reload();
    /// Clear filter and reload data
    void clear();
  };

  /// Filter for common registry object
  interface RegObjectFilter : Filter {
    /// Those made by specific registrar
    attribute short registrar;    
    /// Those made by specific registrar byt handle
    attribute string registrarHandle;
    /// Interval of crDate
    attribute DateInterval crDate;
  };

  /// Filter for Registrar
  interface RegistrarsFilter : Filter {
    /// Fulltext search in handle
    attribute string fulltext;
    /// Fulltext search in name
    attribute string name;
    /// Fulltext search in handle
    attribute string handle;
  };

  /// Filter for EPPActions
  interface EPPActionsFilter : Filter {
    /// Those made by specific registrar
    attribute short registrar;
    /// Those made by specific registrar byt handle
    attribute string registrarHandle;
    /// Those of specific type
    attribute string type;
    /// Those rerefing to object with this handle
    attribute string handle;
    /// Those with this result code
    attribute short result;
    /// Those processed at this date interval
    attribute DateInterval time;
    /// Those with specified clTRID
    attribute string clTRID;
    /// Those with specified svTRID
    attribute string svTRID;
  };

  /// Filter for Domains
  interface DomainsFilter : RegObjectFilter {
    /// Those having substring in fqdn
    attribute string fqdn;
    /// Those holding by specific registrant
    attribute short registrant;
    /// Those holding by specific registrant by handle
    attribute string registrantHandle;
    /// Those refering to specific nsset
    attribute short nsset;
    /// Those refering to specific nsset by handle
    attribute string nssetHandle;
    /// Those having specific admin contact
    attribute short admin;
    /// Those having specific admin contact by Handle
    attribute string adminHandle;
    /// Those having expiration date in supplied interval
    attribute DateInterval exDate;
    /// Those having validation date in supplied interval
    attribute DateInterval valExDate;
    /// Those having nsset with this tech admin 
    attribute string techAdminHandle;
    /// Those having nsset with IP address
    attribute string nssetIP;
  };

  /// Filter for Contacts
  interface ContactsFilter : RegObjectFilter {
    /// Fulltext search in handle
    attribute string handle;
  };

  /// Filter for NSSets
  interface NSSetsFilter : RegObjectFilter {
    /// Fulltext search in handle
    attribute string handle;
  };

  /// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  ///          Concrete object tables
  /// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  /// List of registrars
  interface Registrars : PageTable, RegistrarsFilter {
  };

  /// List of EPPActions
  interface EPPActions : PageTable, EPPActionsFilter {
  };

  /// List of Domains
  interface Domains : PageTable, DomainsFilter {
  };

  /// List of Contacts
  interface Contacts : PageTable, ContactsFilter {
  };

  /// List of NSSets
  interface NSSets : PageTable, NSSetsFilter {
  };

  /// Main interface for registrar session
  interface Session {   
    Registrars getRegistrars();
    EPPActions getEPPActions();
    Domains getDomains();
    Contacts getContacts();
    NSSets getNSSets();
  };

  /// Typ pro kredit registrátora, celé číslo v haléřích
  typedef unsigned long price;

  /// Struktura s detailem registrátora
  struct Registrar {
    long id; ///< ID
    string handle; ///< Identifkátor
    string name; ///< Jméno
    string organization; ///< Název organizace
    string street1; ///< Adresa 1
    string street2; ///< Adresa 2
    string street3; ///< Adresa 3
    string city; ///< Město
    string stateorprovince; ///< Kraj
    string postalcode; ///< PSČ
    string country; ///< Kód země
    string telephone; ///< Telefonní číslo
    string fax; ///< Faxové číslo
    string email; ///< Kontaktní email
    string url; ///< URL 
    price credit; ///< Aktuální výše kreditu
    string password; ///< Heslo
    string md5Cert; ///< md5 certifikátu
  };

  struct EPPAction {
    short id;
    string time;
    string xml;
    string type;
    string registrarHandle;
    short result;
    string clTRID;
    string svTRID;
  };
 
  typedef sequence<string> ContactHandleSeq;
  struct DomainDetail {
     short id;
     string fqdn;
     string roid;
     string registrarHandle;
     string createDate;
     string transferDate;
     string updateDate;
     string createRegistrarHandle;
     string updateRegistrarHandle;
     string authInfo;
     string registrantHandle;
     string expirationDate;
     string valExDate;
     string nssetHandle;
     ContactHandleSeq admins;
  };

  struct ContactDetail {
     short id;
     string handle;
     string roid;
     string registrarHandle;
     string createDate;
     string transferDate;
     string updateDate;
     string createRegistrarHandle;
     string updateRegistrarHandle;
     string authInfo;
     string name;
     string organization;
     string street1;
     string street2;
     string street3;
     string province;
     string postalcode;
     string city;
     string country;
     string telephone;
     string fax;
     string email;
     string notifyEmail;
     string ssn;
  };

  struct NSSetDetail {
     short id;
     string handle;
     string roid;
     string registrarHandle;
     string createDate;
     string transferDate;
     string updateDate;
     string createRegistrarHandle;
     string updateRegistrarHandle;
     string authInfo;
     ContactHandleSeq admins;
     DNSHost hosts;
  };

  // Typ pro seznam registrátorů 
  typedef sequence<Registrar> RegistrarList;

  /// Typ pro výsledek klasifikace identifikátoru
  enum CheckHandleClass {
    CH_ENUM_BAD_ZONE, ///< Handle je enum číslo minmo registr
    CH_ENUM, ///< Handle je enum číslo
    CH_DOMAIN_PART, ///< Handle je část domény (připojí se defaultní koncovka)
    CH_DOMAIN_BAD_ZONE, ///< Handle je doména mimo registr
    CH_DOMAIN_LONG, ///< Handle je doména nepovolené délky (zkrácena)
    CH_DOMAIN, ///< Handle je doména
    CH_NSSET, ///< Handle je nsset
    CH_CONTACT, ///< Handle je kontakt
    CH_INVALID ///< Handle není validní
  };
  
  /// Typ návratové hodnoty funkce checkHandle
  struct CheckHandleType {
    string newHandle; ///< Přeložený handle pokud je třeba
    CheckHandleClass handleClass; ///< Výsledek klasifikace handle
  };

  typedef string SessionIDType;

  /// Administrátorské rozhraní
  interface Admin
  {
    /// log into administrator interface 
    SessionIDType login(in string username, in string password);
    /// get session
    Session getSession(in SessionIDType sessionID);
    /// Vyjímka pro případ nenalezení hledaného objektu
    exception ObjectNotFound {};
    /// Vyjímka pro případ nepovedeného updatu objektu
    exception UpdateFailed {};
    /// Vrátí kompletní seznam registrátorů
    /**
     \return Seznam registrátorů */
    RegistrarList getRegistrars();
    /// Najde jednoho registrátora podle zadaného handle
    /**
     \param handle Identifikátor hledaného registrátora
     \return Nalezený registrátor pokud není vyjímka */
    Registrar getRegistrarByHandle(
     in string handle
    ) raises (ObjectNotFound);
    void putRegistrar(
      in Registrar regData
    ) raises (UpdateFailed);
    ContactDetail getContactByHandle(
     in string handle
    ) raises (ObjectNotFound);
    NSSetDetail getNSSetByHandle(
     in string handle
    ) raises (ObjectNotFound);
    DomainDetail getDomainByFQDN(
     in string fqdn
    ) raises (ObjectNotFound);
    long getEnumDomainCount();
    long getEnumNumberCount();
    /// Klasifikuje vstupní handle podle pravidel registru
    /**
     \param handle Vstupní handle pro klasifikaci
     \param ch Výstupní struktura s klasifikací */
    void checkHandle(
      in string handle,
      out CheckHandleType ch
    );
  };
};
