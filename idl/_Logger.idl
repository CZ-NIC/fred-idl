module ccReg {
    interface Logger {
        exception SESSION_NOT_EXISTS {};
        exception REQUEST_NOT_EXISTS {};
        exception REQUEST_TYPE_NOT_EXITS {}; 
        exception RESPONSE_CODE_NOT_EXISTS {}; 
        exception OBJECT_TYPE_NOT_EXISTS {}; 
        exception INTERNAL_SERVER_ERROR {};
        exception LIMITS_EXCEEDED {};

        struct ObjectReference {
            string type;
            TID id;
        };

        typedef sequence< ObjectReference > ObjectReferences;

        typedef sequence< string > ObjectTypeList;

/* session_id is optional parameter */
        TID createRequest(in string source_ip, in RequestServiceType serv,
                      in string content, in RequestProperties props,
                      in ObjectReferences refs, in RequestType action_type,
                      in TID session_id);

/* session_id is optional parameter */
        void closeRequest(in TID id, in string content, in RequestProperties props,
                      in ObjectReferences refs, in long result_code, in TID session_id);

        TID createSession (in TID user_id, in string user_name);

        void closeSession (in TID id);

        RequestTypeList getRequestTypesByService(in RequestServiceType serv);

        RequestServiceList getServices();

        ResultCodeList getResultCodesByService(in RequestServiceType serv);

        ObjectTypeList getObjectTypes();

    /* OBSOLETE do not use in new applications (please) */
        void addRequestProperties(in TID id, in RequestProperties props);


    // methods which allow to run logd on separate database/host
        Registry::PageTable createPageTable(in string session_id);
        void deletePageTable(in string session_id);

        Registry::Request::Detail getDetail(in TID id) raises (ccReg::Admin::ObjectNotFound);

    };
};

