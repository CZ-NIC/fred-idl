/*
 * Copyright (C) 2018  CZ.NIC, z.s.p.o.
 *
 * This file is part of FRED.
 *
 * FRED is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * FRED is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FRED.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef PUBLIC_REQUEST_IDL_9AA62C3370464AE092F31804EA9A5F0F
#define PUBLIC_REQUEST_IDL_9AA62C3370464AE092F31804EA9A5F0F

#include "Buffer.idl"
#include "NullableTypes.idl"

module Registry
{
module PublicRequest
{

module ObjectType_PR
{
    enum Type
    {
        contact,
        nsset,
        domain,
        keyset
    };
};

module ConfirmedBy
{
    enum Type
    {
        signed_email,
        notarized_letter,
        government
    };
};

module LockRequestType // renamed as in domain browser
{
    enum Type
    {
        block_transfer,
        block_transfer_and_update,
        unblock_transfer,
        unblock_transfer_and_update
    };
};

module Language
{
    enum Type
    {
        cs,
        en
    };
};

exception OBJECT_NOT_FOUND {};
exception OBJECT_TRANSFER_PROHIBITED {};
exception INTERNAL_SERVER_ERROR {};
exception INVALID_EMAIL {};
exception OBJECT_ALREADY_BLOCKED {};
exception OBJECT_NOT_BLOCKED {};
exception HAS_DIFFERENT_BLOCK {};
exception INVALID_PUBLIC_REQUEST_TYPE {};
exception OPERATION_PROHIBITED {};

interface PublicRequestIntf
{
    unsigned long long create_authinfo_request_registry_email(
        in ObjectType_PR::Type object_type,
        in string object_handle,
        in NullableULongLong log_request_id
    )
        raises (OBJECT_NOT_FOUND, INTERNAL_SERVER_ERROR, INVALID_EMAIL, OBJECT_TRANSFER_PROHIBITED);

    unsigned long long create_authinfo_request_non_registry_email(
        in ObjectType_PR::Type object_type,
        in string object_handle,
        in NullableULongLong log_request_id,
        in ConfirmedBy::Type confirmation_method,
        in string specified_email
    )
        raises (OBJECT_NOT_FOUND, INTERNAL_SERVER_ERROR, INVALID_EMAIL, OBJECT_TRANSFER_PROHIBITED);

    unsigned long long create_block_unblock_request(
        in ObjectType_PR::Type object_type,
        in string object_handle,
        in NullableULongLong log_request_id,
        in ConfirmedBy::Type confirmation_method,
        in LockRequestType::Type lock_request_type
    )
        raises (OBJECT_NOT_FOUND, INTERNAL_SERVER_ERROR, OBJECT_ALREADY_BLOCKED, OBJECT_NOT_BLOCKED, HAS_DIFFERENT_BLOCK,
                OPERATION_PROHIBITED);

    unsigned long long create_personal_info_request_registry_email(
        in string contact_handle,
        in NullableULongLong log_request_id
    )
        raises (OBJECT_NOT_FOUND, INTERNAL_SERVER_ERROR, INVALID_EMAIL);

    unsigned long long create_personal_info_request_non_registry_email(
        in string contact_handle,
        in NullableULongLong log_request_id,
        in ConfirmedBy::Type confirmation_method,
        in string specified_email
    )
        raises (OBJECT_NOT_FOUND, INTERNAL_SERVER_ERROR, INVALID_EMAIL);

    Buffer create_public_request_pdf(in unsigned long long public_request_id, in Language::Type lang)
        raises (INTERNAL_SERVER_ERROR, INVALID_PUBLIC_REQUEST_TYPE, OBJECT_NOT_FOUND);
};

}; // module Registry::PublicRequest
}; // module Registry

#endif
