module ccReg {

  /// Status of registered domain in repository.
  enum WhoisDomainStatus  { WHOIS_ACTIVE, WHOIS_EXPIRED };

  /// Type of whois error (result of fqdn classification).
  enum WhoisErrorType {
    WE_DOMAIN_BAD_ZONE, ///< Domain is not in zone managed by register.
    WE_DOMAIN_LONG,     ///< Domain fqdn is too long.
    WE_INVALID,         ///< Domain fqdn is not valid.
    WE_NOTFOUND         ///< Domain is not registered.
  };
 
  /// Structure containing data about a domain needed by whois.
  struct DomainWhois
  {
    string fqdn;         ///< Fqdn of the domain.
    boolean enum_domain; ///< True if domain is ENUM domain.
    string created;      ///< Date of domain registration.
    string expired;      ///< Date of domain expiration.
    string registrarName;///< Name of registrar.
    string registrarUrl; ///< Web site address of registrar.
    NameServers ns;      ///< List of nameservers.
    TechContact tech;    ///< List of technical contacts for the domain.
    WhoisDomainStatus status; ///< Status of the domain (see WhoisDomainStatus).
  };

  /// Whois interface.
  interface Whois
  {
    /// Exception thrown in case of internal error (i.e. database error).
    exception WhoisError {
      string message; ///< Textual description of error.
    };

    /** Exception thrown in case of softer error resulting from classification
     *  of a domain.
     */
    exception DomainError {
      /// Timestamp is needed for response even if error occurred.
      string timestamp;
      WhoisErrorType type; ///< Identifier of error (see WhoisErrorType).
    };

    /** Retrieves information about a domain needed by whois from register.
     *
     *  \param domain_name   Fqdn of a domain.
     *  \param timestamp     Timestamp of information retrieval.
     *  \return              Information about the domain.
     */
    DomainWhois getDomain(
      in string domain_name,
      out string timestamp
    ) raises (WhoisError, DomainError);
  };
};
