/**
 * @file
 * mojeid interface
 */


#ifndef MOJEID_IDL_
#define MOJEID_IDL_

module Registry
{
module MojeID
{

    struct Date
    {
        string value;///< iso format YYYY-MM-DD
    };

    struct DateTime
    {
        string value;///< iso (extended) format: YYYY-MM-DDTHH:MM:SS.fffffffff; always in UTC
    };

    valuetype NullableString string;
    valuetype NullableDate Date;

    struct Address
    {
        string street1;
        NullableString street2;
        NullableString street3;
        string city;
        NullableString state;
        string postal_code;
        string country;
    };

    valuetype NullableAddress Address;

    struct ShippingAddress
    {
        NullableString company_name;
        string street1;
        NullableString street2;
        NullableString street3;
        string city;
        NullableString state;
        string postal_code;
        string country;
    };

    valuetype NullableShippingAddress ShippingAddress;


    enum ValidationResult
    {
        OK,
        NOT_AVAILABLE,
        INVALID,
        REQUIRED
    };

    struct AddressValidationResult
    {
        ValidationResult street1;
        ValidationResult city;
        ValidationResult postal_code;
        ValidationResult country;
    };

    struct MandatoryAddressValidationResult
    {
        ValidationResult address_presence;
        ValidationResult street1;
        ValidationResult city;
        ValidationResult postal_code;
        ValidationResult country;
    };


    typedef unsigned long long ContactId;    ///< type used for representing contact numeric identification
    typedef unsigned long long LogRequestId; ///< type used for representing request identification in logger

    struct CreateContact
    {
        string username;
        string first_name;
        string last_name;
        NullableString organization;
        NullableString vat_reg_num;
        NullableDate birth_date;
        NullableString id_card_num;
        NullableString passport_num;
        NullableString ssn_id_num;
        NullableString vat_id_num;
        string email;
        NullableString notify_email;
        string telephone;
        NullableString fax;
        Address permanent;
        NullableAddress mailing;
        NullableAddress billing;
        NullableShippingAddress shipping;
        NullableShippingAddress shipping2;
        NullableShippingAddress shipping3;
    };


    struct UpdateContact
    {
        string first_name;
        string last_name;
        NullableString organization;
        NullableString vat_reg_num;
        NullableDate birth_date;
        NullableString id_card_num;
        NullableString passport_num;
        NullableString ssn_id_num;
        NullableString vat_id_num;
        string email;
        NullableString notify_email;
        NullableString telephone;
        NullableString fax;
        Address permanent;
        NullableAddress mailing;
        NullableAddress billing;
        NullableShippingAddress shipping;
        NullableShippingAddress shipping2;
        NullableShippingAddress shipping3;
    };

    struct InfoContact
    {
        ContactId id;
        string first_name;
        string last_name;
        NullableString organization;
        NullableString vat_reg_num;
        NullableDate birth_date;
        NullableString id_card_num;
        NullableString passport_num;
        NullableString ssn_id_num;
        NullableString vat_id_num;
        string email;
        NullableString notify_email;
        NullableString telephone;
        NullableString fax;
        Address permanent;
        NullableAddress mailing;
        NullableAddress billing;
        NullableShippingAddress shipping;
        NullableShippingAddress shipping2;
        NullableShippingAddress shipping3;
    };


    struct UpdateTransferContact
    {
        string full_name;
        NullableString organization;
        NullableString vat_reg_num;
        NullableDate birth_date;
        NullableString vat_id_num;
        string email;
        NullableString notify_email;
        string telephone;
        NullableString fax;
        Address permanent;
        NullableAddress mailing;
    };

    struct ContactStateInfo
    {
        ContactId contact_id;
        DateTime mojeid_activation_datetime;
        NullableDate identification_date;
        NullableDate validation_date;
        NullableDate linked_date;
    };

    typedef sequence<ContactStateInfo> ContactStateInfoList;

    typedef sequence<octet> BufferValue;

    struct Buffer
    {
        BufferValue value;
    };

    typedef sequence<string> ContactHandleList;

    struct InfoContactPublishFlags
    {
        boolean first_name;
        boolean last_name;
        boolean organization;
        boolean vat_reg_num;
        boolean birth_date;
        boolean id_card_num;
        boolean passport_num;
        boolean ssn_id_num;
        boolean vat_id_num;
        boolean email;
        boolean notify_email;
        boolean telephone;
        boolean fax;
        boolean permanent;
        boolean mailing;
        boolean billing;
        boolean shipping;
        boolean shipping2;
        boolean shipping3;
    };

    interface Server
    {

        exception INTERNAL_SERVER_ERROR { };

        exception OBJECT_EXISTS { };

        exception OBJECT_NOT_EXISTS { };

        exception IDENTIFICATION_FAILED { };

        exception IDENTIFICATION_ALREADY_PROCESSED { };

        exception IDENTIFICATION_ALREADY_INVALIDATED { };

        exception VALIDATION_ALREADY_PROCESSED { };

        exception OBJECT_CHANGED { };

        exception OBJECT_USER_BLOCKED { };

        exception OBJECT_ADMIN_BLOCKED { };

        exception ALREADY_MOJEID_CONTACT { };

        exception IDENTIFICATION_REQUEST_NOT_EXISTS { };

        exception MESSAGE_LIMIT_EXCEEDED
        {
            DateTime limit_expire_datetime;     ///< When a new message can be sent
        };

        exception REGISTRATION_VALIDATION_ERROR
        {
            ValidationResult                 username;
            ValidationResult                 first_name;
            ValidationResult                 last_name;
            ValidationResult                 birth_date;
            ValidationResult                 vat_id_num;
            ValidationResult                 email;
            ValidationResult                 notify_email;
            ValidationResult                 phone;
            ValidationResult                 fax;
            MandatoryAddressValidationResult permanent;
            AddressValidationResult          mailing;
            AddressValidationResult          billing;
            AddressValidationResult          shipping;
            AddressValidationResult          shipping2;
            AddressValidationResult          shipping3;
        };

        /**
         * create contact and identification request
         *
         * @param contact        create contact data structure
         * @param trans_id       database transaction identifier
         *                       for 2-phase commit
         * @param log_request_id associated request id in logger
         * @param ident          (output) unique identifier of the created identification request
         *
         * @throw REGISTRATION_VALIDATION_ERROR in case of incorrect input data
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return               contact id
         */
        ContactId create_contact_prepare(
                in CreateContact contact,
                in string trans_id,
                in LogRequestId log_request_id,
                out string ident)
            raises (INTERNAL_SERVER_ERROR, REGISTRATION_VALIDATION_ERROR);

        /**
         * create identification request. When the request is processed successfully,
         * the contact is transfered to the mojeID registrar
         *
         * @param handle         contact handle
         * @param trans_id       transaction identifier
         * @param log_request_id associated request id in logger
         * @param ident          (output) unique identifier of the created identification request
         *
         * @throw OBJECT_NOT_EXISTS in case contact handle is not registered
         * @throw REGISTRATION_VALIDATION_ERROR in case of nontransferable contact data
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         * @throw OBJECT_USER_BLOCKED object manipulations constrained by user
         * @throw OBJECT_ADMIN_BLOCKED object manipulations constrained by administrator
         * @throw ALREADY_MOJEID_CONTACT object is mojeID contact already
         *
         * @return               data of the contact having the given username
         */
        InfoContact transfer_contact_prepare(
                in string handle,
                in string trans_id,
                in LogRequestId log_request_id,
                out string ident)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS, REGISTRATION_VALIDATION_ERROR,
                    OBJECT_USER_BLOCKED, OBJECT_ADMIN_BLOCKED, ALREADY_MOJEID_CONTACT);


        exception UPDATE_CONTACT_PREPARE_VALIDATION_ERROR
        {
            ValidationResult                 first_name;
            ValidationResult                 last_name;
            ValidationResult                 birth_date;
            ValidationResult                 email;
            ValidationResult                 notify_email;
            ValidationResult                 phone;
            ValidationResult                 fax;
            MandatoryAddressValidationResult permanent;
            AddressValidationResult          mailing;
            AddressValidationResult          billing;
            AddressValidationResult          shipping;
            AddressValidationResult          shipping2;
            AddressValidationResult          shipping3;
        };

        /**
         * prepares contact for update (2-phase commit)
         *
         * @param contact_id     id of updated contact
         * @param contact        contact data after update
         * @param trans_id       database transaction identifier
         *                       for 2-phase commit
         * @param log_request_id associated request id in logger
         *
         * @throw UPDATE_CONTACT_PREPARE_VALIDATION_ERROR in case of incorrect input data
         * @throw OBJECT_NOT_EXISTS      in case of contact isn't registered or isn't mojeID contact
         * @throw INTERNAL_SERVER_ERROR  in case of internal server error
         * @throw MESSAGE_LIMIT_EXCEEDED in case of too many letters have been sent
         */
        void update_contact_prepare(
                in ContactId contact_id,
                in UpdateContact contact,
                in string trans_id,
                in LogRequestId log_request_id)
            raises (INTERNAL_SERVER_ERROR, UPDATE_CONTACT_PREPARE_VALIDATION_ERROR, OBJECT_NOT_EXISTS,
                    MESSAGE_LIMIT_EXCEEDED);

        /**
         * update contact data and create corresponding request for transfer into mojeID
         *
         * @param username       contact handle
         * @param contact_data   contact new data
         * @param trans_id       database transaction identifier
         *                       for 2-phase commit
         * @param log_request_id associated request id in logger
         * @param ident          (output) unique identifier of the created identification request
         *
         * @throw INTERNAL_SERVER_ERROR  in case of internal server error
         * @throw OBJECT_NOT_EXISTS      in case of contact isn't registered
         * @throw OBJECT_ADMIN_BLOCKED   object manipulations constrained by administrator
         * @throw OBJECT_USER_BLOCKED    object manipulations constrained by user
         * @throw ALREADY_MOJEID_CONTACT object is mojeID contact already
         * @throw MESSAGE_LIMIT_EXCEEDED in case of too many letters have been sent
         * @throw REGISTRATION_VALIDATION_ERROR in case of incorrect input data
         *
         * @return               contact new data
         */
        InfoContact update_transfer_contact_prepare(
            in string username,
            in UpdateTransferContact contact_data,
            in string trans_id,
            in LogRequestId log_request_id,
            out string ident)
        raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS, OBJECT_ADMIN_BLOCKED, OBJECT_USER_BLOCKED,
                ALREADY_MOJEID_CONTACT, MESSAGE_LIMIT_EXCEEDED, REGISTRATION_VALIDATION_ERROR);


        /**
         * return contact information
         *
         * @param username       contact handle
         * 
         * @throw OBJECT_NOT_EXISTS      in case of contact isn't registered
         * @throw INTERNAL_SERVER_ERROR  in case of internal server error
         * 
         * @return               contact data
         */
        InfoContact info_contact(in string username)
        raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);


        /**
         * return contact publish flags information
         *
         * @param contact_id     contact id
         * 
         * @throw OBJECT_NOT_EXISTS      in case of contact isn't registered
         * @throw INTERNAL_SERVER_ERROR  in case of internal server error
         * 
         * @return               contact publish flags information
         */
        InfoContactPublishFlags get_contact_info_publish_flags(in ContactId contact_id)
        raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);


        exception PROCESS_REGISTRATION_VALIDATION_ERROR
        {
            ValidationResult email;
            ValidationResult phone;
        };

        /**
         * finishes contact registration request
         *
         * @param ident_request_id unique identifier of the processed request
         * @param password         contact authorization
         * @param log_request_id   associated request id in logger
         *
         * @throw INTERNAL_SERVER_ERROR  in case of internal server error
         * @throw IDENTIFICATION_REQUEST_NOT_EXISTS in case of no identification request exists
         *                               for given contact
         * @throw IDENTIFICATION_FAILED  in case of password doesn't match
         * @throw IDENTIFICATION_ALREADY_PROCESSED in case of contact already identified
         * @throw IDENTIFICATION_ALREADY_INVALIDATED in case of contact identification cancelled
         * @throw OBJECT_CHANGED         in case of contact data changed
         * @throw ALREADY_MOJEID_CONTACT in case of contact identification already done
         * @throw OBJECT_ADMIN_BLOCKED   in case of contact changes forbidden due to administrative blocking
         * @throw OBJECT_USER_BLOCKED    in case of contact changes forbidden due to user blocking
         * @throw PROCESS_REGISTRATION_VALIDATION_ERROR in case of incorrect data of contact
         */
        ContactId process_registration_request(
                in string ident_request_id,
                in string password,
                in LogRequestId log_request_id)
            raises (INTERNAL_SERVER_ERROR,
                    IDENTIFICATION_REQUEST_NOT_EXISTS,
                    IDENTIFICATION_FAILED, IDENTIFICATION_ALREADY_PROCESSED, IDENTIFICATION_ALREADY_INVALIDATED,
                    OBJECT_CHANGED, ALREADY_MOJEID_CONTACT, OBJECT_ADMIN_BLOCKED, OBJECT_USER_BLOCKED,
                    PROCESS_REGISTRATION_VALIDATION_ERROR);


        /**
         * process contact (re)identification public request
         *
         * @param contact_id     contact numeric identification
         * @param password       contact authorization
         * @param log_request_id associated request id in logger
         *
         * @throw INTERNAL_SERVER_ERROR  in case of internal server error
         * @throw OBJECT_NOT_EXISTS      in case of contact isn't registered
         * @throw IDENTIFICATION_REQUEST_NOT_EXISTS in case of no identification request exists
         *                               for given contact
         * @throw IDENTIFICATION_FAILED  in case of password doesn't match
         * @throw IDENTIFICATION_ALREADY_PROCESSED in case of contact already identified
         */
        void process_identification_request(
                in ContactId contact_id,
                in string password,
                in LogRequestId log_request_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS, IDENTIFICATION_REQUEST_NOT_EXISTS,
                    IDENTIFICATION_FAILED, IDENTIFICATION_ALREADY_PROCESSED);


        /**
         * commit prepared update contact transaction
         *
         * @param trans_id        transaction identifier
         *
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         */
        void commit_prepared_transaction(
                in string trans_id)
            raises (INTERNAL_SERVER_ERROR);


        /**
         * rollback prepared update contact transaction
         *
         * @param trans_id        transaction identifier
         *
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         */
        void rollback_prepared_transaction(
                in string trans_id)
            raises (INTERNAL_SERVER_ERROR);


        /**
         * return buffer with pdf content generated from contact
         * validation request
         *
         * @param contact_id      contact id
         *
         * @throw OBJECT_NOT_EXISTS in case no MojeID contact validation public request is found for given contact_id
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return                validation pdf
         */
        Buffer get_validation_pdf(
                in ContactId contact_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);


        exception CREATE_VALIDATION_REQUEST_VALIDATION_ERROR
        {
            ValidationResult                 first_name;
            ValidationResult                 last_name;
            ValidationResult                 birth_date;
            ValidationResult                 vat_id_num;
            ValidationResult                 email;
            ValidationResult                 notify_email;
            ValidationResult                 phone;
            ValidationResult                 fax;
            MandatoryAddressValidationResult permanent;
        };
        /**
         * create validation request
         *
         * @param contact_id      contact id
         * @param log_request_id  associated request id in logger
         *
         * @throw OBJECT_NOT_EXISTS in case contact_id isn't registered or isn't mojeID contact
         * @throw OBJECT_EXISTS in case public request for contact_id validation already exists
         * @throw VALIDATION_ALREADY_PROCESSED in case contact_id is already validated
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         * @throw CREATE_VALIDATION_REQUEST_VALIDATION_ERROR in case of invalid contact data
         */
        void create_validation_request(
                in ContactId contact_id,
                in LogRequestId log_request_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_EXISTS, OBJECT_NOT_EXISTS,
                    VALIDATION_ALREADY_PROCESSED, CREATE_VALIDATION_REQUEST_VALIDATION_ERROR);

        /**
         * sets flag validatedContact to the contact
         *
         * @param contact_id      contact id
         * @param log_request_id  associated request id in logger
         *
         * @throw OBJECT_NOT_EXISTS in case contact_id isn't registered or isn't mojeID contact
         * @throw VALIDATION_ALREADY_PROCESSED in case contact_id is already validated
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         */
        void validate_contact(
                in ContactId contact_id,
                in LogRequestId log_request_id) 
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS,
                    VALIDATION_ALREADY_PROCESSED, CREATE_VALIDATION_REQUEST_VALIDATION_ERROR);


        /**
         * Get list of infos about states of those contacts which states changed in past `last_hours` hours.
         *
         * States for contacts which no longer have `mojeidContact` state are not included.
         *
         * @param last_hours      number of last hours to search in past
         *
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return                list of current contact states
         */
         ContactStateInfoList get_contacts_state_changes(
                in unsigned long last_hours)
            raises (INTERNAL_SERVER_ERROR);


        /**
         * Get info about contact state
         *
         * @param contact_id      contact id
         *
         * @throw OBJECT_NOT_EXISTS If contact doesn't exist or doesn't have `mojeidContact` state.
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return                current contact state
         */
        ContactStateInfo get_contact_state(
                in ContactId contact_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);


        /**
         *  cancel `mojeidContact` state at given mojeid contact
         *
         * @param contact_id     ID of the contact
         * @param trans_id       database transaction identifier
         *                       for 2-phase commit
         * @param log_request_id associated request id in logger
         *
         * @throw OBJECT_NOT_EXISTS     in case of contact_id isn't registered or isn't mojeID contact
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         */
        void cancel_account_prepare(
                in ContactId contact_id,
                in string trans_id,
                in LogRequestId log_request_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);


        /**
         * get contact handles which can't be registered
         *
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return list of contact handles in string sequence
         */
        ContactHandleList get_unregistrable_handles()
            raises (INTERNAL_SERVER_ERROR);


        /**
         * create new mojeid_contact_(re)identification request and generate new PIN3 letter
         *
         * @param contact_id      contact id
         * @param log_request_id  associated request id in logger
         *
         * @throw OBJECT_NOT_EXISTS if the contact doesn't exist or doesn't have `mojeidContact` state.
         * @throw IDENTIFICATION_REQUEST_NOT_EXISTS in case no opened mojeid_contact_(re)identification request exists
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         * @throw MESSAGE_LIMIT_EXCEEDED in case of too many letters have been sent
         */
        void send_new_pin3(
                in ContactId contact_id,
                in LogRequestId log_request_id)
            raises (OBJECT_NOT_EXISTS,
                    IDENTIFICATION_REQUEST_NOT_EXISTS,
                    INTERNAL_SERVER_ERROR,
                    MESSAGE_LIMIT_EXCEEDED);

        /**
         * generate new emergency card letter
         *
         * @param contact_id      contact id
         * @param log_request_id  associated request id in logger
         *
         * @throw OBJECT_NOT_EXISTS      if the contact doesn't exist or doesn't have `mojeidContact` state
         * @throw INTERNAL_SERVER_ERROR  in case of internal server error
         * @throw MESSAGE_LIMIT_EXCEEDED in case of too many letters have been sent
         */
        void send_mojeid_card(
                in ContactId contact_id,
                in LogRequestId log_request_id)
            raises (OBJECT_NOT_EXISTS,
                    INTERNAL_SERVER_ERROR,
                    MESSAGE_LIMIT_EXCEEDED);

        /**
         * generate sms messages associated with open (state new) public requests
         * of mojeid_contact_conditional_identification type
         * @throw INTERNAL_SERVER_ERROR  in case of internal server error
         */
        void generate_sms_messages() raises (INTERNAL_SERVER_ERROR);

        /**
         * enable generation of sms messages associated with open (state new) public requests
         * of mojeid_contact_conditional_identification type
         * @throw INTERNAL_SERVER_ERROR  in case of internal server error
         */
        void enable_sms_messages_generation(in boolean enable) raises (INTERNAL_SERVER_ERROR);

        /**
         * generate email messages associated with open (state new) public requests
         * of mojeid_contact_conditional_identification, mojeid_conditionally_identified_contact_transfer or
         * mojeid_identified_contact_transfer types
         * @throw INTERNAL_SERVER_ERROR  in case of internal server error
         */
        void generate_email_messages() raises (INTERNAL_SERVER_ERROR);

        /**
         * enable generation of email messages associated with open (state new) public requests
         * of mojeid_contact_conditional_identification, mojeid_conditionally_identified_contact_transfer or
         * mojeid_identified_contact_transfer types
         * @throw INTERNAL_SERVER_ERROR  in case of internal server error
         */
        void enable_email_messages_generation(in boolean enable) raises (INTERNAL_SERVER_ERROR);

        /**
         * generate letters associated with open (state new) public requests
         * of mojeid_contact_identification or mojeid_contact_reidentification types
         * @throw INTERNAL_SERVER_ERROR  in case of internal server error
         */
        void generate_letter_messages() raises (INTERNAL_SERVER_ERROR);

        /**
         * enable generation of letters associated with open (state new) public requests
         * of mojeid_contact_identification or mojeid_contact_reidentification types
         * @throw INTERNAL_SERVER_ERROR  in case of internal server error
         */
        void enable_letter_messages_generation(in boolean enable) raises (INTERNAL_SERVER_ERROR);

    };
};
};

#endif//MOJEID_IDL_
