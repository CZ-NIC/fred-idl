/**
 * @file
 * mojeid interface
 */


#ifndef MOJEID_IDL_
#define MOJEID_IDL_

module Registry {
module MojeID {

    struct Date {
        short day;
        short month;
        short year;
    };

    valuetype NullableString string;
    valuetype NullableBoolean boolean;
    valuetype NullableDate Date;
    valuetype NullableULongLong unsigned long long;


    struct Address {
        string type;
        NullableString company_name;
        string street1;
        NullableString street2;
        NullableString street3;
        string city;
        NullableString state;
        string postal_code;
        string country;
    };

    typedef sequence<Address> AddressList;

    struct Email {
        string type;
        string email_address;
    };

    typedef sequence<Email> EmailList;

    struct IMAccount {
        string type;
        string username;
    };

    typedef sequence<IMAccount> IMAccountList;

    struct Phone {
        string type;
        string number;
    };

    typedef sequence<Phone> PhoneList;

    struct URLAddress {
        string type;
        string url;
    };

    typedef sequence<URLAddress> URLAddressList;

    struct Contact {
        NullableULongLong id;
        string username;
        string first_name;
        string last_name;
        NullableString organization;
        NullableString vat_reg_num;
        NullableDate birth_date;
        NullableString id_card_num;
        NullableString passport_num;
        NullableString ssn_id_num;
        NullableString vat_id_num;
        AddressList addresses;
        EmailList emails;
        IMAccountList imaccounts;
        PhoneList phones;
        URLAddressList urladdresses;
    };

    typedef string DateTime; // iso (extended) format: YYYY-MM-DDTHH:MM:SS.fffffffff

    struct ContactStateInfo {
        unsigned long long contact_id;
        DateTime mojeid_activation_datetime;
        Date conditionally_identification_date;
        NullableDate identification_date;
        NullableDate validation_date;
        NullableDate linked_date;
    };

    typedef sequence<ContactStateInfo> ContactStateInfoList;

    typedef sequence<octet> Buffer;

    typedef sequence<string> ContactHandleList;

    interface ContactHandleListIter
    {
        exception INTERNAL_SERVER_ERROR
        {
        };

        exception NOT_ACTIVE
        {
        };

        /**
         * gets next handle in list
         * @throws NOT_ACTIVE in case instance was previously destroyed by @ref destroy
         */
        ContactHandleList getNext(in unsigned long count)
            raises (INTERNAL_SERVER_ERROR, NOT_ACTIVE);

        /**
         * destroys ContactHandleListIter
         */
        void destroy()
            raises (INTERNAL_SERVER_ERROR);
    };

    interface Server {

        exception INTERNAL_SERVER_ERROR
        {
            string message;
        };

        enum ValidationError
        {
            NOT_AVAILABLE,
            INVALID,
            REQUIRED
        };

        struct DataFieldError
        {
            string name;
            ValidationError error;
        };

        typedef sequence<DataFieldError> ValidationErrorList;

        exception DATA_VALIDATION_ERROR
        {
            ValidationErrorList errors;
        };

        exception OBJECT_EXISTS { };

        exception OBJECT_NOT_EXISTS { };

        exception IDENTIFICATION_FAILED { };

        exception IDENTIFICATION_ALREADY_PROCESSED
        {
            boolean success;
        };

        exception VALIDATION_ALREADY_PROCESSED { };

        exception OBJECT_CHANGED { };

        exception IDENTIFICATION_REQUEST_NOT_EXISTS { };

        exception MESSAGE_LIMIT_EXCEEDED
        {
            Date limit_expire_date;               ///< when user can send next letter
            unsigned short letters_sent;          ///< number of sent letters during watched period (letter_limit_interval)
            unsigned short during_period_in_days; ///< how long was sent first letter
        };

        /**
         * create contact and identification request
         * chosen
         *
         * @param c             contact data structure
         * @param trans_id      database transaction identifier
         *                      for 2-phase commit
         * @param request_id    associated request id in logger
         * @param ident         (output) unique identificator of created identification request
         *
         * @throw DATA_VALIDATION_ERROR with possible data combinations:
         *  -  "address.city" REQUIRED
         *  -  "address.country" INVALID
         *  -  "address.country" REQUIRED
         *  -  "address.postal_code" INVALID
         *  -  "address.postal_code" REQUIRED
         *  -  "address.street1" REQUIRED
         *  -  "contact.birth_date" INVALID
         *  -  "contact.first_name" REQUIRED
         *  -  "contact.last_name" REQUIRED
         *  -  "contact.username" INVALID
         *  -  "contact.username" REQUIRED
         *  -  "email.email" INVALID
         *  -  "email.email" NOT_AVAILABLE in case same e-mail was used for any conditionaly identified contact during last 1 month
         *  -  "email.email" REQUIRED
         *  -  "email.notify_email" INVALID
         *  -  "phone.fax" INVALID
         *  -  "phone.number" INVALID
         *  -  "phone.number" NOT_AVAILABLE  in case same phone was used for any conditionaly identified contact during last 1 month
         *  -  "phone.number" REQUIRED
         *  -  in case username is already used: "contact.username" NOT_AVAILABLE
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return              contact id
         */
        unsigned long long contactCreatePrepare(
                in Contact c,
                in string trans_id,
                in unsigned long long request_id,
                out string ident)
            raises (INTERNAL_SERVER_ERROR, DATA_VALIDATION_ERROR);

        /**
         * create identification request. After
         * successfully processing request contact is transfered to
         * mojeid registrar
         *
         * @param handle        contact handle
         * @param trans_id      transaction identifier
         * @param request_id    associated request id in logger
         * @param ident         (output) unique identificator of created identification request
         *
         * @throw OBJECT_NOT_EXISTS in case contact handle is not registered
         * @throw DATA_VALIDATION_ERROR with possible data combinations:
         *  -  "address.city" REQUIRED
         *  -  "address.country" REQUIRED
         *  -  "address.postal_code" REQUIRED
         *  -  "address.street1" REQUIRED
         *  -  "contact.authinfo" INVALID
         *  -  "contact.authinfo" REQUIRED
         *  -  "contact.birth_date" INVALID
         *  -  "contact.first_name" REQUIRED
         *  -  "contact.last_name" REQUIRED
         *  -  "contact.username" INVALID
         *  -  "contact.username" REQUIRED
         *  -  "email.email" INVALID
         *  -  "email.email" REQUIRED
         *  -  "email.notify_email" INVALID
         *  -  if ( MojeID contact )
         *    -   "contact.status" NOT_AVAILABLE
         *  -  else if ( SERVER_TRANSFER_PROHIBITED   OR   SERVER_UPDATE_PROHIBITED )
         *    -   "contact.status" INVALID
         *  -  if ( NOT CONDITIONALLY_IDENTIFIED_CONTACT   AND   NOT IDENTIFIED_CONTACT )
         *    -   "address.country" INVALID
         *    -   "address.postal_code" INVALID
         *    -   "email.email" NOT_AVAILABLE in case same e-mail was used for any conditionaly identified contact during last 1 month
         *    -   "phone.fax" INVALID
         *    -   "phone.number" INVALID
         *    -   "phone.number" NOT_AVAILABLE  in case same phone was used for any conditionaly identified contact during last 1 month
         *    -   "phone.number" REQUIRED
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return              contact id
         */
        unsigned long long contactTransferPrepare(
                in string handle,
                in string trans_id,
                in unsigned long long request_id,
                out string ident)
            raises (INTERNAL_SERVER_ERROR, DATA_VALIDATION_ERROR, OBJECT_NOT_EXISTS);

        /**
         * prepares contact for update (2-phase commit)
         *
         * @param c             contact data structure
         * @param trans_id      database transaction identifier
         *                      for 2-phase commit
         * @param request_id    associated request id in logger
         *
         * @throw DATA_VALIDATION_ERROR with possible data combinations:
         *  -  "contact.first_name" REQUIRED
         *  -  "contact.last_name" REQUIRED
         *  -  "address.street1" REQUIRED
         *  -  "address.city" REQUIRED
         *  -  "address.postal_code" REQUIRED
         *  -  "address.country" REQUIRED
         *  -  "email.email" INVALID
         *  -  "email.email" REQUIRED
         *  -  "phone.number" INVALID
         *  -  "email.notify_email" INVALID
         *  -  "phone.fax" INVALID
         *  -  "contact.birth_date" INVALID
         *
         * @throw OBJECT_NOT_EXISTS in case contact c is not registered
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         * @throw MESSAGE_LIMIT_EXCEEDED in case of too many letters sent
         */
        void contactUpdatePrepare(
                in Contact c,
                in string trans_id,
                in unsigned long long request_id)
            raises (INTERNAL_SERVER_ERROR, DATA_VALIDATION_ERROR, OBJECT_NOT_EXISTS,
                    MESSAGE_LIMIT_EXCEEDED);


        /**
         * contact data getter
         *
         * @param contact_id    contact id
         *
         * @throw OBJECT_NOT_EXISTS in case contact id is not registered
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return              contact data
         */
        Contact contactInfo(
                in unsigned long long contact_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);


        /**
         * identification request processing
         *
         * @param ident_request_id   request identifier (\see getIdentificationInfo() method)
         * @param password           passwords sent to user joined together
         * @param request_id         associated request id in logger
         *
         * @throw IDENTIFICATION_FAILED in case no request with ident_request_id is found or password is invalid
         * @throw IDENTIFICATION_ALREADY_PROCESSED in case ident_request_id was already processed
         * @throw OBJECT_CHANGED when processing conditional identification request and object was changed since request creation
         * @throw DATA_VALIDATION_ERROR with possible data combinations:
         *  -  "contact.status" INVALID
         *  -  "email.email" NOT_AVAILABLE  in case same e-mail was used for any conditionaly identified contact during last 1 month
         *  -  "phone.number" NOT_AVAILABLE  in case same phone was used for any conditionaly identified contact during last 1 month
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return                contact id
         */
        unsigned long long processIdentification(
                in string ident_request_id,
                in string password,
                in unsigned long long request_id)
            raises (INTERNAL_SERVER_ERROR, IDENTIFICATION_FAILED,
                    IDENTIFICATION_ALREADY_PROCESSED, DATA_VALIDATION_ERROR,
                    OBJECT_CHANGED);


        /**
         * get request identifier for given contact
         *
         * @param contact_id      contact id
         *
         * @throw OBJECT_NOT_EXISTS in case contact id is not registered
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return                request string identifier
         */
        string getIdentificationInfo(
                in unsigned long long contact_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);


        /**
         * commit prepared update contact transaction
         *
         * @param trans_id        transaction identifier
         *
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         */
        void commitPreparedTransaction(
                in string trans_id)
            raises (INTERNAL_SERVER_ERROR);


        /**
         * rollback prepared update contact transaction
         *
         * @param trans_id        transaction identifier
         *
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         */
        void rollbackPreparedTransaction(
                in string trans_id)
            raises (INTERNAL_SERVER_ERROR);


        /**
         * return buffer with pdf content generated from contact
         * validation request
         *
         * @param contact_id      contact id
         *
         * @throw OBJECT_NOT_EXISTS in case no MojeID contact validation public request is found for given contact_id
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return                validation pdf
         */
        Buffer getValidationPdf(
                in unsigned long long contact_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);


        /*
         * create validation request
         *
         * @param contact_id      contact id
         * @param request_id      associated request id in logger
         *
         * @throw OBJECT_NOT_EXISTS in case contact_id is not registered
         * @throw OBJECT_EXISTS in case public request for contact_id validation already exists
         * @throw VALIDATION_ALREADY_PROCESSED in case contact_id is already validated
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         * @throw DATA_VALIDATION_ERROR with possible data combinations:
         *  -  "contact.birth_date" REQUIRED in case contact represents regular user and birth date is not set
         *  -  "contact.birth_date" INVALID in case contact represents regular user and birth date is invalid value
         *  -  "contact.vat_id" REQUIRED in case contact represent company (organization is set) and vat identification number is not set
         */
        void createValidationRequest(
                in unsigned long long contact_id,
                in unsigned long long request_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_EXISTS, OBJECT_NOT_EXISTS,
                    VALIDATION_ALREADY_PROCESSED, DATA_VALIDATION_ERROR);


        /*
         * Get list of contact states, one for every contact which state changed in past `last_hours` hours.
         *
         * States for contacts which have no longer `mojeidContact` state are not included.
         *
         * @param last_hours      number of hours to search in past
         *
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return                list of current contact states
         */
         ContactStateInfoList getContactsStateChanges(
                in unsigned long last_hours)
            raises (INTERNAL_SERVER_ERROR);


        /**
         * Get contact state
         *
         * @param contact_id      contact id
         *
         * @throw OBJECT_NOT_EXISTS If contact doesn't exist or doesn't have `mojeidContact` state.
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return                current contact state
         */
        ContactStateInfo getContactState(
                in unsigned long long contact_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);


        /**
         * get contact id by its handle
         *
         * @param handle          contact handle
         *
         * @throw OBJECT_NOT_EXISTS in case contact handle is not registered
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return                contact id
         */
        unsigned long long getContactId(
                in string handle)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);

        /**
         *  cancel state mojeidContact at given mojeid contact
         *
         * @param contact_id    ID of the contact
         * @param trans_id      database transaction identifier
         *                      for 2-phase commit
         * @param request_id    associated request id in logger
         *
         * @throw OBJECT_NOT_EXISTS in case contact_id is not registered
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         */

        void contactCancelAccountPrepare(
                in unsigned long long contact_id,
                in string trans_id,
                in unsigned long long request_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);

        /**
         * get contact handles
         *
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return list of mojeid enabled contact handles in string sequence
         */
        ContactHandleList getUnregistrableHandles()
            raises (INTERNAL_SERVER_ERROR);

        ContactHandleListIter getUnregistrableHandlesIter()
            raises (INTERNAL_SERVER_ERROR);

        /**
         * get auth info for given contact
         *
         * @param contact_id          contact_id
         *
         * @throw OBJECT_NOT_EXISTS in case contact_id is not registered
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return auth_info
         */
        string contactAuthInfo(in unsigned long long contact_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);

        /*
         * create new mojeid_contact_(re)identification request and generate new PIN3 letter
         *
         * @param contact_id      contact id
         * @param request_id      associated request id in logger
         *
         * @throw OBJECT_NOT_EXISTS if contact doesn't exist or doesn't have `mojeidContact` state.
         * @throw IDENTIFICATION_REQUEST_NOT_EXISTS in case no opened mojeid_contact_(re)identification request exists
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         * @throw MESSAGE_LIMIT_EXCEEDED in case of too many letters sent
         */
        void sendNewPIN3(
                in unsigned long long contact_id,
                in unsigned long long request_id)
            raises (OBJECT_NOT_EXISTS, IDENTIFICATION_REQUEST_NOT_EXISTS, INTERNAL_SERVER_ERROR,
                    MESSAGE_LIMIT_EXCEEDED);
    };

};
};

#endif
