#ifndef WHOIS_IDL_15354554
#define WHOIS_IDL_15354554

#include "NullableTypes.idl"

module Registry
{
module Whois
{
    // utils
    typedef sequence<string> StringSeq;

    struct DisclosableString {
        string     value;
        boolean    disclose;
    };

    struct PlaceAddress {
        string street1;
        string street2;
        string street3;
        string city;
        string stateorprovince;
        string postalcode;
        string country_code;
    };

    struct DisclosablePlaceAddress {
        PlaceAddress    value;
        boolean         disclose;
    };

    struct ObjectStatusDesc {
      string handle;
      string name;
    };
    typedef sequence<ObjectStatusDesc> ObjectStatusDescSeq;

    // output structures

    struct Registrar {
        string          handle;
        string          organization;
        string          url;
        string          phone;
        string          fax;
        PlaceAddress    address;
    };
    typedef sequence<Registrar> RegistrarSeq;

    struct Domain {
        string              handle;
        string              registrant_handle;
        StringSeq           admin_contact_handles;
        NullableString      nsset_handle;
        NullableString      keyset_handle;
        string              registrar_handle;
        StringSeq           statuses;
        DateTime            registered;
        NullableDateTime    changed;
        NullableDateTime    last_transfer;
        Date                expire;
        NullableDate        validated_to;
    };
    typedef sequence<Domain> DomainSeq;

    struct ContactIdentification {
        // should be together because it's visibility is controlled by single disclose flag
        string identification_type;
        string identification_data;
    };
    struct DisclosableContactIdentification {
        ContactIdentification   value;
        boolean                 disclose;
    };

    struct Contact {
        string                              handle;
        DisclosableString                   organization;
        DisclosableString                   name;
        DisclosablePlaceAddress             address;
        DisclosableString                   phone;
        DisclosableString                   fax;
        DisclosableString                   email;
        DisclosableString                   notify_email;
        DisclosableString                   vat_number;
        DisclosableContactIdentification    identification;
        string                              creating_registrar_handle;
        string                              sponsoring_registrar_handle;
        DateTime                            created;
        NullableDateTime                    changed;
        NullableDateTime                    last_transfer;
        StringSeq                           statuses;
    };
    typedef sequence<Contact> ContactSeq;

    enum IPVersion {IPv4, IPv6};

    struct IPAddress {
        string      address;
        IPVersion   version;
    };
    typedef sequence<IPAddress> IPAddressSeq;

    struct NameServer {
        string          fqdn;
        IPAddressSeq    ip_addresses;
    };
    typedef sequence<NameServer> NameServerSeq;

    struct NSSet {
        string              handle;
        NameServerSeq       nservers;
        StringSeq           tech_contact_handles;
        string              registrar_handle;
        DateTime            created;
        NullableDateTime    changed;
        NullableDateTime    last_transfer;
        StringSeq           statuses;
    };
    typedef sequence<NSSet> NSSetSeq;

    struct DNSKey {
        short   flags;
        short   protocol;
        short   alg;
        string  public_key;
    };
    typedef sequence<DNSKey> DNSKeySeq;

    struct KeySet {
        string              handle;
        DNSKeySeq           dns_keys;
        StringSeq           tech_contact_handles;
        string              registrar_handle;
        DateTime            created;
        NullableDateTime    changed;
        NullableDateTime    last_transfer;
        StringSeq           statuses;
    };
    typedef sequence<KeySet> KeySetSeq;
    
    typedef sequence<string> RegistrarHandleList;
    struct RegistrarGroup
    {
        string name;
        RegistrarHandleList members;
    };
    typedef sequence<RegistrarGroup> RegistrarGroupList;
    
    struct RegistrarCertification
    {
        string registrar_handle;
        short score;
        unsigned long long evaluation_file_id;
    };
    typedef sequence<RegistrarCertification> RegistrarCertificationList;
    
    typedef sequence<string> ZoneFqdnList;
    
    exception INTERNAL_SERVER_ERROR {};
    exception OBJECT_NOT_FOUND {};
    exception INVALID_HANDLE {};

    exception UNMANAGED_ZONE {};
    exception TOO_MANY_LABELS {};
    exception INVALID_LABEL {};
    exception INVALID_LANG {};

    interface WhoisIntf
    {
        Registrar           get_registrar_by_handle(     in string handle)
                                raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);
        RegistrarSeq        get_registrars() raises (INTERNAL_SERVER_ERROR);

        RegistrarGroupList  get_registrar_groups() raises (INTERNAL_SERVER_ERROR);

        RegistrarCertificationList get_registrar_certification_list() raises (INTERNAL_SERVER_ERROR);

        ZoneFqdnList        get_managed_zone_list() raises (INTERNAL_SERVER_ERROR);

        Contact             get_contact_by_handle(       in string handle)
                                raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);

        NSSet               get_nsset_by_handle(         in string handle)
                                raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);
        NSSetSeq            get_nssets_by_ns(
                                in string handle,
                                in unsigned long limit,
                                out boolean limit_exceeded)
                                raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);
        NSSetSeq            get_nssets_by_tech_c(
                                in string handle,
                                in unsigned long limit,
                                out boolean limit_exceeded)
                                raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);

        NameServer          get_nameserver_by_fqdn(      in string fqdn  )
                                raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);

        KeySet              get_keyset_by_handle(        in string handle)
                                raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);
        KeySetSeq           get_keysets_by_tech_c(
                                in string handle,
                                in unsigned long limit,
                                out boolean limit_exceeded)
                                raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);

        Domain              get_domain_by_handle(in string handle)
                                raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_LABEL, TOO_MANY_LABELS, UNMANAGED_ZONE);
        DomainSeq           get_domains_by_registrant(
                                in string handle,
                                in unsigned long limit,
                                out boolean limit_exceeded)
                                raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);
        DomainSeq           get_domains_by_admin_contact(
                                in string handle,
                                in unsigned long limit,
                                out boolean limit_exceeded)
                                raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);
        DomainSeq           get_domains_by_nsset(
                                in string handle,
                                in unsigned long limit,
                                out boolean limit_exceeded)
                                raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);
        DomainSeq           get_domains_by_keyset(
                                in string handle,
                                in unsigned long limit,
                                out boolean limit_exceeded)
                                raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);

        ObjectStatusDescSeq get_domain_status_descriptions(  in string lang) raises (INTERNAL_SERVER_ERROR, INVALID_LANG);
        ObjectStatusDescSeq get_contact_status_descriptions( in string lang) raises (INTERNAL_SERVER_ERROR, INVALID_LANG);
        ObjectStatusDescSeq get_nsset_status_descriptions(   in string lang) raises (INTERNAL_SERVER_ERROR, INVALID_LANG);
        ObjectStatusDescSeq get_keyset_status_descriptions(  in string lang) raises (INTERNAL_SERVER_ERROR, INVALID_LANG);
    };
};
};

#endif
