#ifndef WHOIS_IDL_15354554
#define WHOIS_IDL_15354554

#include "NullableIsoDate.idl"
#include "NullableIsoDateTime.idl"
#include "NullableTypes.idl"

module Registry
{
module Whois
{
    typedef sequence<string> StringSeq;

    /**
     * Value (string) with flag which determines whether or not
     * it should be disclosed to public
     */
    struct DisclosableString {
        string     value;
        boolean    disclose;
    };

    /**
     * Address data
     */
    struct PlaceAddress {
        string street1;
        string street2;
        string street3;
        string city;
        string stateorprovince;
        string postalcode;
        string country_code;
    };

    /**
     * Value (PlaceAddress) with flag which determines whether or not
     * it should be disclosed to public
     */
    struct DisclosablePlaceAddress {
        PlaceAddress    value;
        boolean         disclose;
    };

    /**
     * Object status description
     */
    struct ObjectStatusDesc {
      string handle; /**< short name (identifier) */
      string name;   /**< human readable description */
    };

    typedef sequence<ObjectStatusDesc> ObjectStatusDescSeq;


    /**
     * Registrar data
     */
    struct Registrar {
        string          handle;       /**< identifier */
        string          name;
        string          organization;
        string          url;
        string          phone;
        string          fax;
        PlaceAddress    address;
    };

    typedef sequence<Registrar> RegistrarSeq;


    /**
     * Domain data
     */
    struct Domain {
        string              handle;                     /**< fqdn */
        string              registrant_handle;          /**< domain holder identifier */
        StringSeq           admin_contact_handles;      /**< list of domain administrative contacts identifiers */
        NullableString      nsset_handle;               /**< nsset identifier */
        NullableString      keyset_handle;              /**< keyset identifier */
        string              registrar_handle;           /**< sponsoring registrar identifier */
        StringSeq           statuses;                   /**< list of status identifiers */
        IsoDateTime         registered;                 /**< timestamp of creation */
        NullableIsoDateTime changed;                    /**< timestamp of last update */
        NullableIsoDateTime last_transfer;              /**< timestamp of last transfer */
        IsoDate             expire;                     /**< domain expiration date */
        IsoDateTime         expire_time_estimate;       /**< computed expiration date time according to object update status procedure run */
        NullableIsoDateTime expire_time_actual;         /**< actual date time of expiration - time when 'expired' status was set */
        NullableIsoDate     validated_to;               /**< enum domain expiration date of validation */
        NullableIsoDateTime validated_to_time_estimate; /**< computed validation expiration date time according to object update status procedure run */
        NullableIsoDateTime validated_to_time_actual;   /**< actual date time of expiration - time when 'not_validated' status was set */
    };

    typedef sequence<Domain> DomainSeq;


    /**
     * Identification of person
     * XXX: change `identification_type` to enum type
     */
    struct ContactIdentification {
        string identification_type; /**< one of RC, OP, PASS, ICO, MPSV, BIRTHDAY */
        string identification_data;
    };

    /**
     * Value (ContactIdentification) with flag which determines whether or not
     * it should be disclosed to public
     */
    struct DisclosableContactIdentification {
        ContactIdentification   value;
        boolean                 disclose;
    };

    /**
     * Contact data
     */
    struct Contact {
        string                            handle;        /**< identifier */
        DisclosableString                 organization;
        DisclosableString                 name;
        DisclosablePlaceAddress           address;
        DisclosableString                 phone;
        DisclosableString                 fax;
        DisclosableString                 email;
        DisclosableString                 notify_email;  /**< e-mail for notifications */
        DisclosableString                 vat_number;
        DisclosableContactIdentification  identification;
        string                            creating_registrar_handle;
        string                            sponsoring_registrar_handle;
        IsoDateTime                       created;       /**< timestamp of creation */
        NullableIsoDateTime               changed;       /**< timestamp of last update */
        NullableIsoDateTime               last_transfer; /**< timestamp of last transfer */
        StringSeq                         statuses;      /**< list of status identifiers */
    };

    typedef sequence<Contact> ContactSeq;


    /**
     * IP address version type
     */
    enum IPVersion {IPv4, IPv6};

    struct IPAddress {
        string      address;
        IPVersion   version;
    };

    typedef sequence<IPAddress> IPAddressSeq;

    /**
     * Nameserver data
     */
    struct NameServer {
        string          fqdn;
        IPAddressSeq    ip_addresses;
    };

    typedef sequence<NameServer> NameServerSeq;

    /**
     * Nameserver set data
     */
    struct NSSet {
        string              handle;               /**< identifier */
        NameServerSeq       nservers;             /**< list of nameservers */
        StringSeq           tech_contact_handles; /**< list of technical contact identifiers */
        string              registrar_handle;     /**< sponsoring registrar identifier */
        IsoDateTime         created;              /**< timestamp of creation */
        NullableIsoDateTime changed;              /**< timestamp of last update */
        NullableIsoDateTime last_transfer;        /**< timestamp of last transfer */
        StringSeq           statuses;             /**< list of status identifiers */
    };

    typedef sequence<NSSet> NSSetSeq;


    /**
     * DNSKEY Resource Record data (rfc4034)
     */
    struct DNSKey {
        short   flags;
        short   protocol;
        short   alg;
        string  public_key;
    };

    typedef sequence<DNSKey> DNSKeySeq;

    /**
     * Keyset data (set of dnskeys)
     */
    struct KeySet {
        string              handle;               /**< identifier */
        DNSKeySeq           dns_keys;             /**< list of dnskeys */
        StringSeq           tech_contact_handles; /**< list of technical contact identifiers */
        string              registrar_handle;     /**< sponsoring registrar identifier */
        IsoDateTime         created;              /**< timestamp of creation */
        NullableIsoDateTime changed;              /**< timestamp of last update */
        NullableIsoDateTime last_transfer;        /**< timestamp of last transfer */
        StringSeq           statuses;             /**< list of status identifiers */
    };

    typedef sequence<KeySet> KeySetSeq;


    typedef sequence<string> RegistrarHandleList;

    /**
     * Group of registrars data
     */
    struct RegistrarGroup
    {
        string name;                 /**< group name (identifier) */
        RegistrarHandleList members; /**< list of registrar identifiers who are members of this group */
    };

    typedef sequence<RegistrarGroup> RegistrarGroupList;


    /**
     * Registrar evaluation data
     */
    struct RegistrarCertification
    {
        string registrar_handle;               /**< registrar identifier */
        short score;                           /**< evaluation score (1-5) */
        unsigned long long evaluation_file_id; /**< evaluation document id (filemanager) */
    };

    typedef sequence<RegistrarCertification> RegistrarCertificationList;


    typedef sequence<string> ZoneFqdnList;

    /**
     * Unexpected failure
     */
    exception INTERNAL_SERVER_ERROR {};

    /**
     * Requested object was not found
     */
    exception OBJECT_NOT_FOUND {};

    /**
     * Requested object identifier is not valid (bad format; in other words object of that handle
     * could not be even created at the time of request)
     */
    exception INVALID_HANDLE {};

    /**
     * Requested zone (part of domain name) is not managed by server
     */
    exception UNMANAGED_ZONE {};

    /**
     * Requested zone (part of domain name) is not managed by server (due to long name
     * in terms of domain name labels)
     * E.g. if server manages only '.example' zone and requested domain is 'a.b.example'
     */
    exception TOO_MANY_LABELS {};

    /**
     * Requested domain name has invalid character in label
     */
    exception INVALID_LABEL {};

    /**
     * Missing localization for requested language
     */
    exception MISSING_LOCALIZATION {};



    interface WhoisIntf
    {
        /**
         * Search for registrar data by handle
         *
         * @param handle                 registrar identifier
         * @throw OBJECT_NOT_FOUND       if requested registrar is not found
         * @throw INVALID_HANDLE         if @ref handle has invalid format
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        Registrar get_registrar_by_handle(in string handle)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);


        /**
         * Retrieve list of all registrars data
         *
         * @throw INTERNAL_SERVER_ERROR  in case of failure
         */
        RegistrarSeq get_registrars()
            raises (INTERNAL_SERVER_ERROR);


        /**
         * Retrieve list of all registrar groups
         *
         * @throw INTERNAL_SERVER_ERROR  in case of failure
         */
        RegistrarGroupList get_registrar_groups()
            raises (INTERNAL_SERVER_ERROR);


        /**
         * Retrieve list of registrar evaluation data
         *
         * @throw INTERNAL_SERVER_ERROR  in case of failure
         */
        RegistrarCertificationList get_registrar_certification_list()
            raises (INTERNAL_SERVER_ERROR);


        /**
         * Retrieve list of all managed zones
         *
         * @throw INTERNAL_SERVER_ERROR  in case of failure
         */
        ZoneFqdnList get_managed_zone_list()
            raises (INTERNAL_SERVER_ERROR);


        /**
         * Search for contact data by identifier
         *
         * @param handle                 contact identifier
         * @throw OBJECT_NOT_FOUND       if requested contact is not found
         * @throw INVALID_HANDLE         if @ref handle has invalid format
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        Contact get_contact_by_handle(in string handle)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);


        /**
         * Search for nsset data by identifier
         *
         * @param handle                 nsset identifier
         * @throw OBJECT_NOT_FOUND       if requested nsset is not found
         * @throw INVALID_HANDLE         if @ref handle has invalid format
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */

        NSSet get_nsset_by_handle(in string handle)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);


        /**
         * Search for nssets by nameserver fqdn
         *
         * @param handle                 nameserver fqdn
         * @param limit                  limit result size by this value
         * @param limit_exceeded         output flag which indicates that result was truncated
         * @throw OBJECT_NOT_FOUND       if no nsset is found (XXX: should return empty list instead)
         * @throw INVALID_HANDLE         if @ref handle has invalid format
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        NSSetSeq get_nssets_by_ns(
            in string handle,
            in unsigned long limit,
            out boolean limit_exceeded
        ) raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);


        /**
         * Search for nssets by technical contact identifier
         *
         * @param handle                 contact identifier
         * @param limit                  limit result size by this value
         * @param limit_exceeded         output flag which indicates that result was truncated
         * @throw OBJECT_NOT_FOUND       if no nsset is found (XXX: should return empty list instead)
         * @throw INVALID_HANDLE         if @ref handle has invalid format
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        NSSetSeq get_nssets_by_tech_c(
            in string handle,
            in unsigned long limit,
            out boolean limit_exceeded
        ) raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);


        /**
         * Search for nameserver data by fqdn
         *
         * @param fqdn                   nameserver fqdn
         * @throw OBJECT_NOT_FOUND       if requested nameserver is not found
         * @throw INVALID_HANDLE         if @ref handle has invalid format
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        NameServer get_nameserver_by_fqdn(in string fqdn)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);


        /**
         * Search for keyset data by identifier
         *
         * @param handle                 keyset identifier
         * @throw OBJECT_NOT_FOUND       if requested keyset is not found
         * @throw INVALID_HANDLE         if @ref handle has invalid format
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        KeySet get_keyset_by_handle(in string handle)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);


        /**
         * Search for keysets by technical contact identifier
         *
         * @param handle                 contact identifier
         * @param limit                  limit result size by this value
         * @param limit_exceeded         output flag which indicates that result was truncated
         * @throw OBJECT_NOT_FOUND       if no keyset is found (XXX: should return empty list instead)
         * @throw INVALID_HANDLE         if @ref handle has invalid format
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        KeySetSeq get_keysets_by_tech_c(
            in string handle,
            in unsigned long limit,
            out boolean limit_exceeded
        ) raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);


        /**
         * Search for domain data by fqdn
         *
         * @param handle                 fqdn
         * @throw UNMANAGED_ZONE         if fqdn doesn't fit to any managed zone by server
         * @throw TOO_MANY_LABELS        if fqdn contains too many labels
                                         (and therefore can't fit to any managed zone by server)
         * @throw INVALID_LABEL          if fqdn contains invalid label (format)
         * @throw OBJECT_NOT_FOUND       if requested domain is not found
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        Domain get_domain_by_handle(in string handle)
            raises (
                INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND,
                INVALID_LABEL, TOO_MANY_LABELS, UNMANAGED_ZONE
            );


        /**
         * Search for domain by holder identifier (contact handle)
         *
         * @param handle                 contact identifier
         * @param limit                  limit result size by this value
         * @param limit_exceeded         output flag which indicates that result was truncated
         * @throw OBJECT_NOT_FOUND       if no domain is found (XXX: should return empty list instead)
         * @throw INVALID_HANDLE         if @ref handle has invalid format
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        DomainSeq get_domains_by_registrant(
            in string handle,
            in unsigned long limit,
            out boolean limit_exceeded
        ) raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);


        /**
         * Search for domain by administrative contact identifier
         *
         * @param handle                 contact identifier
         * @param limit                  limit result size by this value
         * @param limit_exceeded         output flag which indicates that result was truncated
         * @throw OBJECT_NOT_FOUND       if no domain is found (XXX: should return empty list instead)
         * @throw INVALID_HANDLE         if @ref handle has invalid format
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        DomainSeq get_domains_by_admin_contact(
            in string handle,
            in unsigned long limit,
            out boolean limit_exceeded
        ) raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);


        /**
         * Search for domain by nsset identifier
         *
         * @param handle                 nsset identifier
         * @param limit                  limit result size by this value
         * @param limit_exceeded         output flag which indicates that result was truncated
         * @throw OBJECT_NOT_FOUND       if no domain is found (XXX: should return empty list instead)
         * @throw INVALID_HANDLE         if @ref handle has invalid format
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        DomainSeq get_domains_by_nsset(
            in string handle,
            in unsigned long limit,
            out boolean limit_exceeded
        ) raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);


        /**
         * Search for domain by keyset identifier
         *
         * @param handle                 keyset identifier
         * @param limit                  limit result size by this value
         * @param limit_exceeded         output flag which indicates that result was truncated
         * @throw OBJECT_NOT_FOUND       if no domain is found (XXX: should return empty list instead)
         * @throw INVALID_HANDLE         if @ref handle has invalid format
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        DomainSeq get_domains_by_keyset(
            in string handle,
            in unsigned long limit,
            out boolean limit_exceeded
        ) raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_FOUND, INVALID_HANDLE);


        /**
         * Retrieve all available human readable description for domain statuses
         *
         * @param lang                   language for description texts
         * @throw MISSING_LOCALIZATION   if no data for given @ref language is found
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        ObjectStatusDescSeq get_domain_status_descriptions(in string lang)
            raises (INTERNAL_SERVER_ERROR, MISSING_LOCALIZATION);

        /**
         * Retrieve all available human readable description for contact statuses
         *
         * @param lang                   language for description texts
         * @throw MISSING_LOCALIZATION   if no data for given @ref language is found
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        ObjectStatusDescSeq get_contact_status_descriptions(in string lang)
            raises (INTERNAL_SERVER_ERROR, MISSING_LOCALIZATION);

        /**
         * Retrieve all available human readable description for nsset statuses
         *
         * @param lang                   language for description texts
         * @throw MISSING_LOCALIZATION   if no data for given @ref language is found
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        ObjectStatusDescSeq get_nsset_status_descriptions(in string lang)
            raises (INTERNAL_SERVER_ERROR, MISSING_LOCALIZATION);

        /**
         * Retrieve all available human readable description for keyset statuses
         *
         * @param lang                   language for description texts
         * @throw MISSING_LOCALIZATION   if no data for given @ref language is found
         * @throw INTERNAL_SERVER_ERROR  in case of other failure
         */
        ObjectStatusDescSeq get_keyset_status_descriptions(in string lang)
            raises (INTERNAL_SERVER_ERROR, MISSING_LOCALIZATION);
    };
};
};

#endif
