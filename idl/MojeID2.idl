/**
 * @file
 * mojeid2 interface
 */


#ifndef MOJEID2_IDL_
#define MOJEID2_IDL_

module Registry
{
module MojeID
{

    struct Date
    {
        string value;///< iso format YYYY-MM-DD
    };

    struct DateTime
    {
        string value;///< iso (extended) format: YYYY-MM-DDTHH:MM:SS.fffffffff
    };

    valuetype NullableString string;
    valuetype NullableBoolean boolean;
    valuetype NullableDate Date;

    struct Address
    {
        string street1;
        NullableString street2;
        NullableString street3;
        string city;
        NullableString state;
        string postal_code;
        string country;
    };

    valuetype NullableAddress Address;

    struct ShippingAddress
    {
        NullableString company_name;
        string street1;
        NullableString street2;
        NullableString street3;
        string city;
        NullableString state;
        string postal_code;
        string country;
    };

    valuetype NullableShippingAddress ShippingAddress;


    enum ValidationError
    {
        NOT_AVAILABLE,
        INVALID,
        REQUIRED
    };

    valuetype NullableValidationError ValidationError;

    struct AddressValidationError
    {
        NullableValidationError street1;
        NullableValidationError city;
        NullableValidationError postal_code;
        NullableValidationError country;
    };

    valuetype NullableAddressValidationError AddressValidationError;

    struct MandatoryAddressValidationError
    {
        NullableValidationError address_presence;
        NullableValidationError street1;
        NullableValidationError city;
        NullableValidationError postal_code;
        NullableValidationError country;
    };

    valuetype NullableMandatoryAddressValidationError MandatoryAddressValidationError;

    struct ShippingAddressValidationError
    {
        NullableValidationError street1;
        NullableValidationError city;
        NullableValidationError postal_code;
        NullableValidationError country;
    };

    valuetype NullableShippingAddressValidationError ShippingAddressValidationError;


    typedef unsigned long long ContactId;    ///< type used for representing contact numeric identification
    typedef unsigned long long LogRequestId; ///< type used for representing request identification in logger

    struct CreateContact
    {
        string username;
        string first_name;
        string last_name;
        NullableString organization;
        NullableString vat_reg_num;
        NullableDate birth_date;
        NullableString id_card_num;
        NullableString passport_num;
        NullableString ssn_id_num;
        NullableString vat_id_num;
        Address permanent;
        NullableAddress mailing;
        NullableAddress billing;
        NullableShippingAddress shipping;
        NullableShippingAddress shipping2;
        NullableShippingAddress shipping3;
        string email;
        NullableString notify_email;
        string telephone;
        NullableString fax;
    };


    struct UpdateContact
    {
        ContactId id;
        string first_name;
        string last_name;
        NullableString organization;
        NullableString vat_reg_num;
        NullableDate birth_date;
        NullableString id_card_num;
        NullableString passport_num;
        NullableString ssn_id_num;
        NullableString vat_id_num;
        Address permanent;
        NullableAddress mailing;
        NullableAddress billing;
        NullableShippingAddress shipping;
        NullableShippingAddress shipping2;
        NullableShippingAddress shipping3;
        string email;
        NullableString notify_email;
        NullableString telephone;
        NullableString fax;
    };

    typedef UpdateContact InfoContact; ///< XXX


    struct ContactStateInfo
    {
        ContactId contact_id;
        DateTime mojeid_activation_datetime;
        Date conditionally_identification_date;
        NullableDate identification_date;
        NullableDate validation_date;
        NullableDate linked_date;
    };

    typedef sequence<ContactStateInfo> ContactStateInfoList;

    typedef sequence<octet> Buffer;

    typedef sequence<string> ContactHandleList;

    interface Server
    {

        exception INTERNAL_SERVER_ERROR { };

        exception OBJECT_EXISTS { };

        exception OBJECT_NOT_EXISTS { };

        exception IDENTIFICATION_FAILED { };

        exception IDENTIFICATION_ALREADY_PROCESSED { };

        exception IDENTIFICATION_ALREADY_INVALIDATED { };

        exception VALIDATION_ALREADY_PROCESSED { };

        exception OBJECT_CHANGED { };

        exception OBJECT_USER_BLOCKED { };

        exception OBJECT_ADMIN_BLOCKED { };

        exception ALREADY_MOJEID_CONTACT { };

        exception IDENTIFICATION_REQUEST_NOT_EXISTS { };

        exception MESSAGE_LIMIT_EXCEEDED
        {
            Date limit_expire_date;     ///< When a new message can be sent
            unsigned short limit_count; ///< At most a @ref limit_count messages can be sent in a @ref limit_days days
            unsigned short limit_days;  ///< @see limit_count
        };

        exception CREATE_CONTACT_PREPARE_VALIDATION_ERROR
        {
            NullableValidationError                username;
            NullableValidationError                first_name;
            NullableValidationError                last_name;
            NullableValidationError                email;
            NullableValidationError                phone;
            NullableAddressValidationError         permanent;
            NullableAddressValidationError         mailing;
            NullableAddressValidationError         billing;
            NullableShippingAddressValidationError shipping;
            NullableShippingAddressValidationError shipping2;
            NullableShippingAddressValidationError shipping3;
        };

        /**
         * create contact and identification request
         * chosen
         *
         * @param contact        create contact data structure
         * @param trans_id       database transaction identifier
         *                       for 2-phase commit
         * @param log_request_id associated request id in logger
         * @param ident          (output) unique identifier of the created identification request
         *
         * @throw CREATE_CONTACT_PREPARE_VALIDATION_ERROR in case of incorrect input data
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return               contact id
         */
        ContactId create_contact_prepare(
                in CreateContact contact,
                in string trans_id,
                in LogRequestId log_request_id,
                out string ident)
            raises (INTERNAL_SERVER_ERROR, CREATE_CONTACT_PREPARE_VALIDATION_ERROR);


        exception TRANSFER_CONTACT_PREPARE_VALIDATION_ERROR
        {
            NullableValidationError                username;
            NullableValidationError                first_name;
            NullableValidationError                last_name;
            NullableValidationError                email;
            NullableValidationError                phone;
            NullableValidationError                fax;
            NullableValidationError                notify_email;
            NullableValidationError                birth_date;
            NullableAddressValidationError         permanent;
            NullableAddressValidationError         mailing;
            NullableAddressValidationError         billing;
            NullableShippingAddressValidationError shipping;
            NullableShippingAddressValidationError shipping2;
            NullableShippingAddressValidationError shipping3;
        };

        /**
         * create identification request. When
         * the request is processed successfully, the contact is transfered to
         * the mojeID registrar
         *
         * @param handle         contact handle
         * @param trans_id       transaction identifier
         * @param log_request_id associated request id in logger
         * @param ident          (output) unique identifier of the created identification request
         *
         * @throw OBJECT_NOT_EXISTS in case contact handle is not registered
         * @throw TRANSFER_CONTACT_PREPARE_VALIDATION_ERROR in case of nontransferable contact data
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         * @throw OBJECT_USER_BLOCKED object manipulations constrained by user
         * @throw OBJECT_ADMIN_BLOCKED object manipulations constrained by administrator
         * @throw ALREADY_MOJEID_CONTACT object is mojeID contact already
         *
         * @return               data of the contact having the given username
         */
        InfoContact transfer_contact_prepare(
                in string handle,
                in string trans_id,
                in LogRequestId log_request_id,
                out string ident)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS, TRANSFER_CONTACT_PREPARE_VALIDATION_ERROR,
                    OBJECT_USER_BLOCKED, OBJECT_ADMIN_BLOCKED, ALREADY_MOJEID_CONTACT);


        exception UPDATE_CONTACT_PREPARE_VALIDATION_ERROR
        {
            NullableValidationError                first_name;
            NullableValidationError                last_name;
            NullableValidationError                email;
            NullableValidationError                phone;
            NullableAddressValidationError         permanent;
            NullableAddressValidationError         mailing;
            NullableAddressValidationError         billing;
            NullableShippingAddressValidationError shipping;
            NullableShippingAddressValidationError shipping2;
            NullableShippingAddressValidationError shipping3;
            NullableValidationError                notifyemail;
            NullableValidationError                fax;
        };
        /**
         * prepares contact for update (2-phase commit)
         *
         * @param contact        update contact data structure
         * @param trans_id       database transaction identifier
         *                       for 2-phase commit
         * @param log_request_id associated request id in logger
         *
         * @throw UPDATE_CONTACT_PREPARE_VALIDATION_ERROR
         * @throw OBJECT_NOT_EXISTS      in case of contact isn't registered
         * @throw INTERNAL_SERVER_ERROR  in case of internal server error
         * @throw MESSAGE_LIMIT_EXCEEDED in case of too many letters have been sent
         */
        void update_contact_prepare(
                in UpdateContact contact,
                in string trans_id,
                in LogRequestId log_request_id)
            raises (INTERNAL_SERVER_ERROR, UPDATE_CONTACT_PREPARE_VALIDATION_ERROR, OBJECT_NOT_EXISTS,
                    MESSAGE_LIMIT_EXCEEDED);



        exception DATA_VALIDATION_ERROR
        {
        };

        /**
         *
         */
        ContactId process_registration_request(
                in string ident_request_id,
                in string password,
                in LogRequestId log_request_id)
            raises (INTERNAL_SERVER_ERROR,
                    IDENTIFICATION_REQUEST_NOT_EXISTS,
                    IDENTIFICATION_FAILED, IDENTIFICATION_ALREADY_PROCESSED, IDENTIFICATION_ALREADY_INVALIDATED,
                    OBJECT_CHANGED, ALREADY_MOJEID_CONTACT, OBJECT_ADMIN_BLOCKED, OBJECT_USER_BLOCKED,
                    DATA_VALIDATION_ERROR);


        /**
         *
         */

        void process_identification_request(
                in ContactId contact_id,
                in string password,
                in LogRequestId log_request_id)
            raises (INTERNAL_SERVER_ERROR,
                    IDENTIFICATION_FAILED,
                    IDENTIFICATION_ALREADY_PROCESSED,
                    IDENTIFICATION_ALREADY_INVALIDATED,
                    DATA_VALIDATION_ERROR);


        /**
         * commit prepared update contact transaction
         *
         * @param trans_id        transaction identifier
         *
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         */
        void commit_prepared_transaction(
                in string trans_id)
            raises (INTERNAL_SERVER_ERROR);


        /**
         * rollback prepared update contact transaction
         *
         * @param trans_id        transaction identifier
         *
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         */
        void rollback_prepared_transaction(
                in string trans_id)
            raises (INTERNAL_SERVER_ERROR);


        /**
         * return buffer with pdf content generated from contact
         * validation request
         *
         * @param contact_id      contact id
         *
         * @throw OBJECT_NOT_EXISTS in case no MojeID contact validation public request is found for given contact_id
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return                validation pdf
         */
        Buffer get_validation_pdf(
                in ContactId contact_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);


        exception CREATE_VALIDATION_REQUEST_VALIDATION_ERROR
        {
            NullableValidationError                 first_name;
            NullableValidationError                 last_name;
            NullableMandatoryAddressValidationError permanent;
            NullableValidationError                 email;
            NullableValidationError                 phone;
            NullableValidationError                 notify_email;
            NullableValidationError                 fax;
            NullableValidationError                 ssn;
        };
        /**
         * create validation request
         *
         * @param contact_id      contact id
         * @param log_request_id  associated request id in logger
         *
         * @throw OBJECT_NOT_EXISTS in case contact_id is not registered
         * @throw OBJECT_EXISTS in case public request for contact_id validation already exists
         * @throw VALIDATION_ALREADY_PROCESSED in case contact_id is already validated
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         * @throw CREATE_VALIDATION_REQUEST_VALIDATION_ERROR in case of invalid contact data
         */
        void create_validation_request(
                in ContactId contact_id,
                in LogRequestId log_request_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_EXISTS, OBJECT_NOT_EXISTS,
                    VALIDATION_ALREADY_PROCESSED, CREATE_VALIDATION_REQUEST_VALIDATION_ERROR);


        /**
         * Get list of infos about states of those contacts which states changed in past `last_hours` hours.
         *
         * States for contacts which no longer have `mojeidContact` state are not included.
         *
         * @param last_hours      number of last hours to search in past
         *
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return                list of current contact states
         */
         ContactStateInfoList get_contacts_state_changes(
                in unsigned long last_hours)
            raises (INTERNAL_SERVER_ERROR);


        /**
         * Get info about contact state
         *
         * @param contact_id      contact id
         *
         * @throw OBJECT_NOT_EXISTS If contact doesn't exist or doesn't have `mojeidContact` state.
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return                current contact state
         */
        ContactStateInfo get_contact_state(
                in ContactId contact_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);


        /**
         *  cancel `mojeidContact` state at given mojeid contact
         *
         * @param contact_id     ID of the contact
         * @param trans_id       database transaction identifier
         *                       for 2-phase commit
         * @param log_request_id associated request id in logger
         *
         * @throw OBJECT_NOT_EXISTS     in case of contact_id is not registered
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         */
        void cancel_account_prepare(
                in ContactId contact_id,
                in string trans_id,
                in LogRequestId log_request_id)
            raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);


        /**
         * get contact handles which can't be registered
         *
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         *
         * @return list of contact handles in string sequence
         */
        ContactHandleList get_unregistrable_handles()
            raises (INTERNAL_SERVER_ERROR);


        /*
         * create new mojeid_contact_(re)identification request and generate new PIN3 letter
         *
         * @param contact_id      contact id
         * @param log_request_id  associated request id in logger
         *
         * @throw OBJECT_NOT_EXISTS if the contact doesn't exist or doesn't have `mojeidContact` state.
         * @throw IDENTIFICATION_REQUEST_NOT_EXISTS in case no opened mojeid_contact_(re)identification request exists
         * @throw INTERNAL_SERVER_ERROR in case of internal server error
         * @throw MESSAGE_LIMIT_EXCEEDED in case of too many letters have been sent
         */
        void send_new_pin3(
                in ContactId contact_id,
                in LogRequestId log_request_id)
            raises (OBJECT_NOT_EXISTS,
                    IDENTIFICATION_REQUEST_NOT_EXISTS,
                    INTERNAL_SERVER_ERROR,
                    MESSAGE_LIMIT_EXCEEDED);

        /*
         * generate new emergency card letter
         *
         * @param contact_id      contact id
         * @param log_request_id  associated request id in logger
         *
         * @throw OBJECT_NOT_EXISTS      if the contact doesn't exist or doesn't have `mojeidContact` state
         * @throw DATA_VALIDATION_ERROR
         * @throw INTERNAL_SERVER_ERROR  in case of internal server error
         * @throw MESSAGE_LIMIT_EXCEEDED in case of too many letters have been sent
         */
        void send_mojeid_card(
                in ContactId contact_id,
                in LogRequestId log_request_id)
            raises (OBJECT_NOT_EXISTS,
                    DATA_VALIDATION_ERROR,
                    INTERNAL_SERVER_ERROR,
                    MESSAGE_LIMIT_EXCEEDED);



    /* XXX: Following methods will be removed when methods
     * for transfer contact (to MojeID) with data change are implemented */

    /**
     * get contact id by its handle
     *
     * @param handle          contact handle
     *
     * @throw OBJECT_NOT_EXISTS in case contact handle is not registered
     * @throw INTERNAL_SERVER_ERROR in case of internal server error
     *
     * @return                contact id
     */
    ContactId get_contact_id(in string handle)
        raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);

     /**
      * get auth info for given contact
      *
      * @param contact_id          contact_id
      *
      * @throw OBJECT_NOT_EXISTS in case contact_id is not registered
      * @throw INTERNAL_SERVER_ERROR in case of internal server error
      *
      * @return auth_info
      */
     string get_contact_authinfo(in ContactId contact_id)
         raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);


    };
};
};

#endif//MOJEID2_IDL_
