#ifndef PAIN_IDL_DB189D57EF894375BECB3931E4AD4E54
#define PAIN_IDL_DB189D57EF894375BECB3931E4AD4E54

#include "IsoDateTime.idl"

module Registry {
module Accounting {

exception REGISTRAR_NOT_FOUND {};
exception INVALID_ZONE {};
exception INVALID_CREDIT_VALUE {};
exception CREDIT_ALREADY_PROCESSED {};
exception INTERNAL_SERVER_ERROR {};

typedef string Money;

struct PlaceAddress
{
    string street1;
    string street2;
    string street3;
    string city;
    string stateorprovince;
    string postalcode;
    string country_code;

};

struct Registrar
{
    string handle;
    string name;
    string organization;
    string url;
    string phone;
    string fax;
    PlaceAddress address;
};

struct PaymentData
{
    string bank_payment;
    string uuid;
    string account_number;
    string counter_account_number;
    string counter_account_name;
    string constant_symbol;
    string variable_symbol;
    string specific_symbol;
    string price;
    string date;
    string memo;
    string creation_time;
};

interface AccountingIntf
{

    void increase_zone_credit_of_registrar(
            in string transaction_ident,
            in string registrar_handle,
            in string zone,
            in Money credit_amount_to_add)
    raises (CREDIT_ALREADY_PROCESSED, REGISTRAR_NOT_FOUND, INVALID_ZONE, INVALID_CREDIT_VALUE, INTERNAL_SERVER_ERROR);

    void decrease_zone_credit_of_registrar(
            in string transaction_ident,
            in string registrar_handle,
            in string zone,
            in Money credit_amount_to_substract)
    raises (CREDIT_ALREADY_PROCESSED, REGISTRAR_NOT_FOUND, INVALID_ZONE, INVALID_CREDIT_VALUE, INTERNAL_SERVER_ERROR);

    Registrar get_registrar_by_payment(
            in PaymentData payment_data,
            out string zone)
    raises (INTERNAL_SERVER_ERROR, REGISTRAR_NOT_FOUND);

    void import_payment(
        in PaymentData payment,
        out Money credit)
    raises (INTERNAL_SERVER_ERROR);

};

}; // Registry::Accounting
}; // Registry

#endif
