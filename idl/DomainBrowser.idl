/*
 * Copyright (C) 2014  CZ.NIC, z.s.p.o.
 *
 * This file is part of FRED.
 *
 * FRED is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * FRED is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FRED.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 *  @file
 *  domain browser interface
 */


#ifndef DOMAIN_BROWSER_IDL_
#define DOMAIN_BROWSER_IDL_

module Registry {
module DomainBrowser {

    /**
     * Internal server error.
     * Unexpected failure, requires maintenance.
     */
    exception INTERNAL_SERVER_ERROR { };
    /**
     * Contact of the user requesting the service was not found.
     * The contact could have been deleted or set into inappropriate state.
     */
    exception USER_NOT_EXISTS { };
    /**
     * Requested object was not found.
     * Requested object could have been deleted or set into inappropriate state.
     */
    exception OBJECT_NOT_EXISTS { };
    /**
     * Incorrect usage of the service.
     * Unexpected input data. This should not happen, probably result of bad interface design.
     */
    exception INCORRECT_USAGE { };
    /**
     * Access to requested information is forbidden.
     */
    exception ACCESS_DENIED { };
    /**
     * Requested object does not allow update.
     * Requested object has a status that does not allow update.
     */
    exception OBJECT_BLOCKED { };

    /**
     * Invalid contacts.
     * Unable to merge contacts.
     */
    exception INVALID_CONTACTS { };

    /**
     * any nullable string
     */
    valuetype NullableString string;


    /**
     * ISO 8601 date in text form YYYY-MM-DD
     */
    typedef string DateIsoString;

    /**
     * nullable date
     */
    valuetype NullableDateIsoString DateIsoString;

    /**
     * ISO 8601 timestamp in text form YYYY-MM-DDTHH:MM:SS.fffffffff
     * dot with decimal fractions are optional
     */
    typedef string DateTimeIsoString;

    /**
     * nullable timestamp
     */
    valuetype NullableDateTimeIsoString DateTimeIsoString;

    /**
     * nullable database id
     */
    valuetype NullableULongLong unsigned long long;

    /**
     * nullable bit
     */
    valuetype NullableBoolean boolean;

    /**
     * Registry object id, handle and name data.
     */
    struct RegistryReference
    {
        unsigned long long id;
        string handle;
        string name;
    };
    typedef sequence<RegistryReference> RegistryReferenceSeq;

    /**
     * Object id sequence.
     */
    typedef sequence<unsigned long long> ObjectIdSeq;
    /**
     * Indicates whether user contact can get public or private data of given object
     */
    enum DataAccessLevel
    {
        PUBLIC_DATA,
        PRIVATE_DATA
    };

    struct RegistrarDetail {
        unsigned long long id;
        string handle;
        string name;
        string phone;
        string fax;
        string url;/**< web address of the registrar */
        string address;/**< postal address of the registrar */
    };

    /**
     * object state code sequence
     */
    typedef sequence<string> StateCodeSequence;

    struct DomainDetail {
        unsigned long long id;
        string fqdn;
        string roid;
        RegistryReference registrar;
        DateTimeIsoString create_time; /**< timestamp of creation*/
        NullableDateTimeIsoString update_time; /**< timestamp of update*/
        string auth_info;/**< password for transfer */
        RegistryReference registrant;
        DateIsoString expiration_date; /**< date of domain expiration*/
        NullableDateIsoString val_ex_date;/**< the expiration date of the ENUM domain validation */
        boolean publish;/**< flag for publishing ENUM number and associated contact in public directory */
        boolean is_enum;/**<  is ENUM domain */
        RegistryReference nsset;
        RegistryReference keyset;
        RegistryReferenceSeq admins;
        StateCodeSequence state_codes;/**< object states names from db. table enum_object_states */
    };

    /**
     * Contact fields disclose data.
     */
    struct ContactDiscloseFlags {
        boolean name;
        boolean organization;
        boolean email;
        boolean address;
        boolean telephone;
        boolean fax;
        boolean ident;
        boolean vat;
        boolean notify_email;
    };

    /**
     * Contact disclose flags to be set.
     */
    struct UpdateContactDiscloseFlags {
        boolean email;
        boolean address;
        boolean telephone;
        boolean fax;
        boolean ident;
        boolean vat;
        boolean notify_email;
    };

    struct PlaceAddress
    {
       string street1;
       NullableString street2;
       NullableString street3;
       string city;
       NullableString state;
       string postal_code;
       string country;
    };

    /**
     * nullable address
     */
    valuetype NullablePlaceAddress PlaceAddress;

    struct ContactDetail {
        unsigned long long id;
        string handle;
        string roid;/**< registry object identifier of the contact */
        RegistryReference registrar;
        DateTimeIsoString create_time;
        NullableDateTimeIsoString transfer_time;
        NullableDateTimeIsoString update_time;
        string auth_info;/**< password for transfer */
        string name;
        string organization;
        PlaceAddress permanent_address;
        NullablePlaceAddress mailing_address;
        string telephone;
        string fax;
        string email;
        string notify_email;
        string ssn;/**< unambiguous identification number e.g. social security number, identity card number, date of birth */
        string ssn_type;/**< type of identification */
        string vat;/**< taxpayer identification number */
        ContactDiscloseFlags disclose_flags;
        StateCodeSequence state_codes;/**< contact states names*/
        NullableBoolean warning_letter;/**< contact preference for sending domain expiration letters*/
    };

    /**
     * ip address sequence
     */
    typedef sequence<string> IPAddrSequence;

    struct DNSHost
    {
        string fqdn; /**< fully qualified name of the nameserver host*/
        IPAddrSequence inet; /**< list of IPv4 or IPv6 addresses of the nameserver host*/
    };

    struct NSSetDetail {
        unsigned long long id;
        string handle;
        string roid;/**< registry object identifier of nsset */
        RegistryReference registrar;
        DateTimeIsoString create_time;
        NullableDateTimeIsoString transfer_time;
        NullableDateTimeIsoString update_time;
        RegistryReference create_registrar;
        RegistryReference update_registrar;
        string auth_info;/**< password for transfer */
        RegistryReferenceSeq admins;
        sequence<DNSHost> hosts;/**< nsset DNS hosts */
        StateCodeSequence state_codes;/**< nsset states names */
        short report_level;/**< nsset level of technical checks */
    };

    /**
     * Type for an element of list of DS records to be removed, obsolete.
     */
    struct DSRecord
    {
        long key_tag;
        long alg;
        long digest_type;
        string digest;
        long max_sig_life;
    };

    struct DNSKey
    {
        unsigned short flags;
        unsigned short protocol;/**< only valid value is 3*/
        unsigned short alg;/**< the algorithm field identifies the public key's cryptographic algorithm, values can be found in RFC 4034 Apendix A.1. */
        string         key;/**< the public key field in base64 encoding */
    };


    struct KeysetDetail {
        unsigned long long id;
        string handle;
        string roid;/**< registry object identifier of keyset */
        RegistryReference registrar;
        DateTimeIsoString create_time;
        NullableDateTimeIsoString transfer_time;
        NullableDateTimeIsoString update_time;
        RegistryReference create_registrar;
        RegistryReference update_registrar;
        string auth_info;/**< password for transfer */
        RegistryReferenceSeq admins;
        sequence<DSRecord> dsrecords;/**< not set by implementation, to be removed */
        sequence<DNSKey> dnskeys;
        StateCodeSequence state_codes;/**< keyset states names */
    };

    /**
     * Type of blocking to be applied
     */
    enum ObjectBlockType {
        BLOCK_TRANSFER,
        UNBLOCK_TRANSFER,
        BLOCK_TRANSFER_AND_UPDATE,
        UNBLOCK_TRANSFER_AND_UPDATE
    };

    /**
     * Next domain state data.
     */
    struct NextDomainState
    {
        string state_code; /**< next state code */
        DateIsoString state_date; /**< next state date */
    };

    /**
     * optional next domain state
     */
    valuetype NullableNextDomainState NextDomainState;

    /**
     * element of DomainList
     */
    struct DomainListData
    {
        unsigned long long id;/**< id of the domain */
        string fqdn;/**< fully qualified domain name */
        unsigned long long external_importance;/**<  bitwise OR of importance values of states with external flag or next higher power of 2 value if bitwise OR is zero */
        NullableNextDomainState next_state;/**< next state of the domain (if any) according to current date and expiration date, outzone date and delete date of the domain */
        boolean have_keyset; /**< domain have keyset flag */
        string user_role; /**< domainbrowser user relation to the domain (holder/admin/'') */
        string registrar_handle; /**< domain registrar handle*/
        string registrar_name; /**< domain registrar name*/
        StateCodeSequence state_code;/**< domain states*/
        boolean is_server_blocked; /**< whether domain have serverBlocked state */
    };

    /**
     * domain list output
     */
    typedef sequence<DomainListData> DomainList;

    /**
     * element of NssetList
     */
    struct NssetListData
    {
        unsigned long long id;/**< id of the nsset */
        string handle;/**< nsset handle */
        unsigned long long domain_count;/**<  number of domains using this nsset */
        string registrar_handle; /**< nsset registrar handle*/
        string registrar_name; /**< nsset registrar name*/
        unsigned long long external_importance;/**<  bitwise OR of importance values of states with external flag or next higher power of 2 value if bitwise OR is zero */
        StateCodeSequence state_code;/**< nsset states*/
        boolean is_server_blocked; /**< whether nsset have serverBlocked state */
    };

    /**
     * nsset list output
     */
    typedef sequence<NssetListData> NssetList;

    /**
     * element of KeysetList
     */
    struct KeysetListData
    {
        unsigned long long id;/**< id of the keyset */
        string handle;/**< keyset handle */
        unsigned long long domain_count;/**<  number of domains using this keyset */
        string registrar_handle; /**< keyset registrar handle*/
        string registrar_name; /**< keyset registrar name*/
        unsigned long long external_importance;/**<  bitwise OR of importance values of states with external flag or next higher power of 2 value if bitwise OR is zero */
        StateCodeSequence state_code;/**< keyset states*/
        boolean is_server_blocked; /**< whether keyset have serverBlocked state*/
    };

    /**
     * keyset list output
     */
    typedef sequence<KeysetListData> KeysetList;

    /**
     * element of MergeContactCandidateList
     */
    struct MergeContactCandidateData
    {
        unsigned long long id;/**< id of the contact */
        string handle;/**< contact handle */
        unsigned long long domain_count;/**<  number of domains linked with this contact */
        unsigned long long nsset_count;/**<  number of nssets linked with this contact */
        unsigned long long keyset_count;/**<  number of keysets linked with this contact */
        string registrar_handle; /**< contact registrar handle*/
        string registrar_name; /**< contact registrar name*/
    };

    /**
     * merge contact candidate list
     */
    typedef sequence<MergeContactCandidateData> MergeContactCandidateList;

    /**
     * sequence of object handles refused by setObjectBlockStatus call
     */
    typedef sequence<string> RefusedObjectHandleSequence;

    /**
     * object state description
     */
     struct StatusDesc
     {
         string state_code;/**< state name */
         string state_desc;/**< state description in some language */
     };

    /**
     * sequence of object state description
     */
    typedef sequence<StatusDesc> StatusDescList;

    interface Server {

        /**
         * Gets database id of a contact.
         * @param handle object registry handle of the contact
         * @return contact database id of the contact
         * @throw OBJECT_NOT_EXISTS if contact is not found
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        unsigned long long getContactId(
            in string handle
        ) raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);

        /**
         * Gets list of domains registered or administered by a contact.
         * @param user_contact_id database id of the contact retrieved domains are linked to
         * @param contact_id if set, domains linked to the contact having this id are retrieved instead of @ref user_contact_id
         * @param offset list offset for pagination
         * @param limit_exceeded output flag; whether there are more domains to be retrieved---exceeding the list limit set by configuration
         * @return list of domain data
         * @throw USER_NOT_EXISTS if @ref user_contact_id is not in mojeid or is not found
         * @throw OBJECT_NOT_EXISTS if @ref contact_id is set and is not found
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        DomainList getDomainList(
            in unsigned long long user_contact_id,
            in NullableULongLong contact_id,
            in unsigned long offset,
            out boolean limit_exceeded
        ) raises (INTERNAL_SERVER_ERROR, USER_NOT_EXISTS, OBJECT_NOT_EXISTS);

        /**
         * Gets list of nssets administered by a contact.
         * @param user_contact_id database id of the user contact retrieved nssets are linked to
         * @param contact_id if set, nssets linked to the contact having this id are retrieved instead of @ref user_contact_id
         * @param offset list offset for pagination
         * @param limit_exceeded output flag; whether there are more nssets to be retrieved---exceeding the list limit set by configuration
         * @return list of nsset data
         * @throw USER_NOT_EXISTS if @ref user_contact_id is not in mojeid or is not found
         * @throw OBJECT_NOT_EXISTS if @ref contact_id is set and is not found
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        NssetList getNssetList(
            in unsigned long long user_contact_id,
            in NullableULongLong contact_id,
            in unsigned long offset,
            out boolean limit_exceeded
        ) raises (INTERNAL_SERVER_ERROR, USER_NOT_EXISTS, OBJECT_NOT_EXISTS);

        /**
         * Gets list of keysets administered by a contact.
         * @param user_contact_id database id of the user contact retrieved keysets are linked to
         * @param contact_id if set, keysets linked to the contact having this id are retrieved instead of @ref user_contact_id
         * @param offset list offset for pagination
         * @param limit_exceeded output flag; whether there are more keysets to be retrieved---exceeding the list limit set by configuration
         * @return list of keyset data
         * @throw USER_NOT_EXISTS if @ref user_contact_id is not in mojeid or is not found
         * @throw OBJECT_NOT_EXISTS if @ref contact_id is set and is not found
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        KeysetList getKeysetList(
            in unsigned long long user_contact_id,
            in NullableULongLong contact_id,
            in unsigned long offset,
            out boolean limit_exceeded
        ) raises (INTERNAL_SERVER_ERROR, USER_NOT_EXISTS, OBJECT_NOT_EXISTS);

        /**
         * Gets list of domains linked to a keyset.
         * @param user_contact_id database id of the user contact; the keyset must belong to it
         * @param keyset_id domains linked to the keyset having this id are retrieved
         * @param offset list offset for pagination
         * @param limit_exceeded output flag; whether there are more domains to be retrieved---exceeding the list limit set by configuration
         * @return list of domain data
         * @throw USER_NOT_EXISTS if @ref user_contact_id is not in mojeid or is not found
         * @throw ACCESS_DENIED if the keyset is not administered by @ref user_contact_id
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        DomainList getDomainsForKeyset(
            in unsigned long long user_contact_id,
            in unsigned long long keyset_id,
            in unsigned long offset,
            out boolean limit_exceeded
        ) raises (INTERNAL_SERVER_ERROR, USER_NOT_EXISTS, ACCESS_DENIED);

        /**
         * Gets list of domains linked to a nsset.
         * @param user_contact_id database id of the user contact; the nsset must belong to it
         * @param nsset_id domains linked to the nsset having this id are retrieved
         * @param offset list offset for pagination
         * @param limit_exceeded output flag; whether there are more domains to be retrieved---exceeding the list limit set by configuration
         * @return list of domain data
         * @throw USER_NOT_EXISTS if @ref user_contact_id is not in mojeid or is not found
         * @throw ACCESS_DENIED if the nsset is not administered by @ref user_contact_id
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        DomainList getDomainsForNsset(
            in unsigned long long user_contact_id,
            in unsigned long long nsset_id,
            in unsigned long offset,
            out boolean limit_exceeded
        ) raises (INTERNAL_SERVER_ERROR, USER_NOT_EXISTS, ACCESS_DENIED);

        /**
         * Returns details of a contact.
         * @param user_contact_id database id of the user contact
         * @param detail_id database id of the contact whose details are requested
         * @param auth_result PUBLIC_DATA if @ref user_contact_id differs from @ref detail_id (the transfer password is hidden); PRIVATE_DATA if @ref user_contact_id is the same as @ref detail_id (the transfer password is disclosed)
         * @return detailed data of the contact
         * @throw USER_NOT_EXISTS if @ref user_contact_id is not in mojeid or is not found
         * @throw OBJECT_NOT_EXISTS if @ref detail_id is not found
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        ContactDetail getContactDetail(
            in unsigned long long user_contact_id,
            in unsigned long long detail_id,
            out DataAccessLevel auth_result
        ) raises (INTERNAL_SERVER_ERROR, USER_NOT_EXISTS, OBJECT_NOT_EXISTS);

        /**
         * Returns details of a nsset.
         * @param user_contact_id database id of the user contact
         * @param nsset_id database id of the nsset details of which are requested
         * @param auth_result PUBLIC_DATA if @ref user_contact_id is not an admin of the nsset (the transfer password is hidden); PRIVATE_DATA if @ref user_contact_id is an admin of the nsset (the transfer password is disclosed)
         * @return detailed data of the nsset
         * @throw USER_NOT_EXISTS if @ref user_contact_id is not in mojeid or is not found
         * @throw OBJECT_NOT_EXISTS if @ref nsset_id is not found
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        NSSetDetail getNssetDetail(
            in unsigned long long user_contact_id,
            in unsigned long long nsset_id,
            out DataAccessLevel auth_result
        ) raises (INTERNAL_SERVER_ERROR, USER_NOT_EXISTS, OBJECT_NOT_EXISTS);

        /**
         * Returns details of a domain.
         * @param user_contact_id database id of the user contact
         * @param domain_id database id of the domain details of which are requested
         * @param auth_result PUBLIC_DATA if @ref user_contact_id is not an admin nor the owner of the domain (the transfer password is hidden); PRIVATE_DATA if @ref user_contact_id is an admin or the owner of the domain (the transfer password is disclosed)
         * @return detailed data of the domain
         * @throw USER_NOT_EXISTS if @ref user_contact_id is not in mojeid or is not found
         * @throw OBJECT_NOT_EXISTS if @ref domain_id is not found
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        DomainDetail getDomainDetail(
            in unsigned long long user_contact_id,
            in unsigned long long domain_id,
            out DataAccessLevel auth_result
        ) raises (INTERNAL_SERVER_ERROR, USER_NOT_EXISTS, OBJECT_NOT_EXISTS);

        /**
         * Returns details of a keyset.
         * @param user_contact_id database id of the user contact
         * @param keyset_id database id of the keyset details of which are requested
         * @param auth_result PUBLIC_DATA if @ref user_contact_id is not an admin of the keyset (the transfer password is hidden); PRIVATE_DATA if @ref user_contact_id is an admin of the keyset (the transfer password is disclosed)
         * @return detailed data of the keyset
         * @throw USER_NOT_EXISTS if @ref user_contact_id is not in mojeid or is not found
         * @throw OBJECT_NOT_EXISTS if @ref keyset_id is not found
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        KeysetDetail getKeysetDetail(
            in unsigned long long user_contact_id,
            in unsigned long long keyset_id,
            out DataAccessLevel auth_result
        ) raises (INTERNAL_SERVER_ERROR, USER_NOT_EXISTS, OBJECT_NOT_EXISTS);

        /**
         * Returns detail of a registrar.
         * @param user_contact_id database id of the user contact
         * @param handle object registry handle of the registrar whose details are requested
         * @return detailed data of the registrar
         * @throw USER_NOT_EXISTS if @ref user_contact_id is not in mojeid or is not found
         * @throw OBJECT_NOT_EXISTS if @ref handle is not found
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        RegistrarDetail getRegistrarDetail(
            in unsigned long long user_contact_id,
            in string handle
        ) raises (INTERNAL_SERVER_ERROR, USER_NOT_EXISTS, OBJECT_NOT_EXISTS);

        /**
         * Sets disclose flags of a contact.
         * @param user_contact_id database id of the user contact which is the contact to be modified
         * @param flags contact disclose flags
         * @param request_id id of the request used in the logger database
         * @return whether disclose flags have been set (false if the old ones are equal to the new ones)
         * @throw USER_NOT_EXISTS if @ref user_contact_id is not in mojeid or is not found
         * @throw ACCESS_DENIED if @ref user_contact_id is not identified nor validated
         * @throw INCORRECT_USAGE if the organization is set and hiding the address is required
         * @throw OBJECT_BLOCKED if @ref user_contact_id is blocked
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        boolean setContactDiscloseFlags(
            in unsigned long long user_contact_id,
            in UpdateContactDiscloseFlags flags,
            in unsigned long long request_id
        ) raises (INTERNAL_SERVER_ERROR, INCORRECT_USAGE, USER_NOT_EXISTS, ACCESS_DENIED, OBJECT_BLOCKED);

        /**
         * Sets transfer password of a contact.
         * @param user_contact_id database id of the user contact which is the contact to be modified
         * @param auth_info new transfer password
         * @param request_id id of the request used in the logger database
         * @return whether new authinfo has been set (false if the old one equals to the new one)
         * @throw USER_NOT_EXISTS if @ref user_contact_id is not in mojeid or is not found
         * @throw ACCESS_DENIED if @ref user_contact_id is not identified nor validated
         * @throw INCORRECT_USAGE if @ref auth_info is longer than 300 characters
         * @throw OBJECT_BLOCKED if @ref user_contact_id is blocked
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        boolean setContactAuthInfo(
            in unsigned long long user_contact_id,
            in string auth_info,
            in unsigned long long request_id
        ) raises (INTERNAL_SERVER_ERROR, INCORRECT_USAGE, USER_NOT_EXISTS, ACCESS_DENIED, OBJECT_BLOCKED);

        /**
         * Sets blocking or unblocking of objects.
         * @param user_contact_id database id of the user contact
         * @param objtype type of the objects to be (un)blocked; allowed values: "domain", "nsset", "keyset"
         * @param objects list of database ids of the objects to be (un)blocked
         * @param block type of (un)blocking to be applied: BLOCK_TRANSFER, UNBLOCK_TRANSFER, BLOCK_TRANSFER_AND_UPDATE, UNBLOCK_TRANSFER_AND_UPDATE
         * @param change_prohibited output list of handles of objects (un)blocking of which could not be performed (since they are SERVER_BLOCKED or were attempted to be unblocked for transfer while being blocked for update)
         * @return whether at least one object is (un)blocked now as requested in @ref block
         * @throw USER_NOT_EXISTS if @ref user_contact_id is not in mojeid or is not found
         * @throw OBJECT_NOT_EXISTS if any of @ref objects is not found or is not linked to @ref user_contact_id
         * @throw ACCESS_DENIED if @ref user_contact_id is not validated
         * @throw INCORRECT_USAGE if @ref objtype has a disallowed value or @ref objects list contains more than 500 elements
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        boolean setObjectBlockStatus(
            in unsigned long long user_contact_id,
            in string objtype,
            in ObjectIdSeq objects,
            in ObjectBlockType block,
            out RefusedObjectHandleSequence change_prohibited
        ) raises (INTERNAL_SERVER_ERROR, INCORRECT_USAGE, USER_NOT_EXISTS, OBJECT_NOT_EXISTS, ACCESS_DENIED);

        /**
         * Gets description of public states.
         * @param lang language of the description; currently supported values: "EN", "CS"
         * @return list of description of states
         * @throw INTERNAL_SERVER_ERROR in case of failure.
         */
        StatusDescList getPublicStatusDesc(
                in string lang
            ) raises (INTERNAL_SERVER_ERROR);

        /**
         * Gets list of contacts mergeable to a user contact.
         * @param user_contact_id database id of the user contact
         * @param offset list offset for pagination
         * @param limit_exceeded output flag; whether there are more contacts to be retrieved---exceeding the list limit set by configuration
         * @return list of contacts: candidates for merging
         * @throw USER_NOT_EXISTS if @ref user_contact_id is not in mojeid or is not found
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        MergeContactCandidateList getMergeContactCandidateList(
                in unsigned long long user_contact_id,
                in unsigned long offset,
                out boolean limit_exceeded
            ) raises (INTERNAL_SERVER_ERROR, USER_NOT_EXISTS);

        /**
         * Merges contact list to a destination contact.
         * @param dst_contact_id id of the destination contact
         * @param src_contact_id_list list of ids of source contacts
         * @param request_id id of the request used in the logger database
         * @throw USER_NOT_EXISTS if @ref dst_contact_id is not in mojeid or is not found
         * @throw INVALID_CONTACTS if contacts cannot be merged
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        void mergeContacts(
                in unsigned long long dst_contact_id,
                in ObjectIdSeq src_contact_id_list,
                in unsigned long long request_id
            ) raises (INTERNAL_SERVER_ERROR, USER_NOT_EXISTS, INVALID_CONTACTS);

        /**
         * Sets contact preference for sending domain expiration letters.
         * @param user_contact_id database id of the user contact
         * @param send_expiration_letters user preference whether to send him letters about expiration of his domains
         * @param request_id id of the request used in the logger database
         * @throw USER_NOT_EXISTS if @ref user_contact_id is not in mojeid or is not found
         * @throw ACCESS_DENIED if @ref send_expiration_letters is false and the user contact is not validated
         * @throw OBJECT_BLOCKED if the user contact is blocked
         * @throw INTERNAL_SERVER_ERROR in case of failure
         */
        void setContactPreferenceForDomainExpirationLetters(
                in unsigned long long user_contact_id,
                in boolean send_expiration_letters,
                in unsigned long long request_id
            ) raises (INTERNAL_SERVER_ERROR, USER_NOT_EXISTS, ACCESS_DENIED, OBJECT_BLOCKED);

    };
};
};

#endif
