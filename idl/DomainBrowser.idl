interface DomainBrowser {

/////// exceptions 
exception INTERNAL_SERVER_ERROR
{
    string message;
};

// object with specified ID does not exist
exception OBJECT_NOT_EXISTS 
{ };

// given parameter value (like SortSpec.field) is not valid
exception INCORRECT_USAGE
{ };

/////// data types  
// database ID
typedef unsigned long long TID;
// contact, nsset, domain or keyset - ID from object_registry 
typedef string RegistryObject;

struct SortSpec 
{
    string field;
    boolean desc;
    long limit;
    long offset;
};

enum RecordType {
    TEXT,
    DATE,
    BOOL,
    INT
};

// sequences of column names and corresponding data types
struct RecordSetMeta
{
    sequence<string> column_names;
    sequence<RecordType> data_types; // for sorting in frontend
};

struct RecordSet 
{
    sequence<sequence<string> > data;
};


/////////////////// object lists

RecordSet getDomainList(in RegistryObject contact, in SortSpec sort_by) raises (INTERNAL_SERVER_ERROR, INCORRECT_USAGE, OBJECT_NOT_EXISTS);
RecordSetMeta getDomainListMeta() raises (INTERNAL_SERVER_ERROR);

RecordSet getNssetList(in RegistryObject contact, in SortSpec sort_by) raises (INTERNAL_SERVER_ERROR, INCORRECT_USAGE, OBJECT_NOT_EXISTS);
RecordSetMeta getNssetListMeta() raises (INTERNAL_SERVER_ERROR);

RecordSet getKeysetList(in RegistryObject contact, in SortSpec sort_by) raises (INTERNAL_SERVER_ERROR, INCORRECT_USAGE, OBJECT_NOT_EXISTS);
RecordSetMeta getKeysetListMeta() raises (INTERNAL_SERVER_ERROR);

/////////////////// objects details
typedef sequence<string> ContactHandleSeq;
typedef sequence<string> ObjectStatusSeq;

struct DomainDetail {
 TID id;
 string fqdn;
 string roid;
 string registrar;
 string create_date;
 string transfer_date;
 string update_date;
 string create_registrar;
 string update_registrar;
 string auth_info;
 string registrant;
 string expiration_date;
 string val_ex_date;
 boolean publish; 
 string nsset;
 string keyset;
 ContactHandleSeq admins;
 ContactHandleSeq temps;
 ObjectStatusSeq status_list;
};


struct ContactDiscloseFlags {
 boolean name;
 boolean organization;
 boolean email;
 boolean address;
 boolean telephone;
 boolean fax;
 boolean ident;
 boolean vat;
 boolean notify_email;
};

struct ContactDetail {
 TID id;
 string handle;
 string roid;
 string registrar;
 string create_date;
 string transfer_date;
 string update_date;
 string create_registrar;
 string update_registrar;
 string auth_info;
 string name;
 string organization;
 string street1;
 string street2;
 string street3;
 string province;
 string postalcode;
 string city;
 string country;
 string telephone;
 string fax;
 string email;
 string notify_email;
 string ssn;
 string ssn_type;
 string vat;
 ContactDiscloseFlags disclose_flags;
 ObjectStatusSeq status_list;
};

struct DNSHost
{
    string fqdn; ///< Fqdn of DNS server
    string inet; ///< List of IP addresses
};

struct NSSetDetail {
 TID id;
 string handle;
 string roid;
 string registrar;
 string create_date;
 string transfer_date;
 string update_date;
 string create_registrar;
 string update_registrar;
 string auth_info;
 ContactHandleSeq admins;
 sequence<DNSHost> hosts;
 ObjectStatusSeq status_list;     
 short report_level;
};

/// Type for an element of list of DS records
struct DSRecord
{
  long key_tag;
  long alg;
  long digest_type;
  string digest;
  long max_sig_life;
};

struct DNSKey
{
  unsigned short flags;
  unsigned short protocol;
  unsigned short alg;
  string         key;
};


struct KeysetDetail {
  TID id;
  string handle;
  string roid;
  string registrar;
  string create_date;
  string transfer_date;
  string update_date;
  string create_registrar;
  string update_registrar;
  string auth_info;
  ContactHandleSeq admins;
  sequence<DSRecord> dsrecords;
  sequence<DNSKey> dnskeys;
  ObjectStatusSeq  status_list;
};


ContactDetail getContactDetail(in RegistryObject contact) raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);
NSSetDetail getNssetDetail(in RegistryObject contact, in RegistryObject nsset) raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);
DomainDetail getDomainDetail(in RegistryObject contact, in RegistryObject domain) raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);
KeysetDetail getKeysetDetail(in RegistryObject contact, in RegistryObject keyset) raises (INTERNAL_SERVER_ERROR, OBJECT_NOT_EXISTS);

};
