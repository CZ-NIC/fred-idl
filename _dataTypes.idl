module ccReg {

  /// definition of stringu that prepare SQL update and insert NULL value
  const string SET_NULL_VALUE = "$$SET_NULL_VALUE$$" ; 

  /// Types for expresion of date and time according to rfc3339
  /** YYYY-MM-DD  (just date)
   *  YYYY-MM-DDTHH:MM:SS.ssZ 
   *  (date and time in UTC zulu time, sec. with 2 decimal places)
   *  YYYY-MM-DDTHH:MM:SS.ss(+/-)HH:MM 
   *  (date and time plus timezone offset, sec. with 2 decimal places)  
   */
  typedef string timestamp;
  /// Type for date in format YYYY-MM-DD  
  typedef string date;
  /// Type for a list of nameservers
  typedef sequence < string > NameServers;
  /// Type for a list of handles of technical contacts
  typedef sequence < string > TechContact;
  /// Type for common list of strings
  typedef sequence < string > Lists;
  /// Type for a list of IP addresses
  typedef sequence < string > InetAddress;
  /// Type for an element of list of records about individual nameservers
  struct DNSHost_str
  {
    string fqdn; ///< Fqdn of DNS server
    InetAddress inet; ///< List of IP addresses
  };
  /// Type for a list  of records about individual nameservers
  typedef sequence < DNSHost_str > DNSHost;
  
  /// Structure for handling day
  struct DateType {
    short day; ///< day of month (1..31)
    short month; ///< month in year (1..12)
    short year; ///< year (i.e. 2006)
  };
  
  /// Structure for handling interval of days
  struct DateInterval {
    DateType from; ///< start of interval - Date(0,0,0) means ignore this field
    DateType to; ///< end of interval - Date(0,0,0) means ignore this field 
  };
  
  /// Structure for handling date and time
  struct DateTimeType {
    DateType date;
    short hour; ///< hour (0..23)
    short minute; ///< minute (0..59)
    short second; ///< second (0..59)
  };
  
  /// Structure for handling interval of times
  struct DateTimeInterval {
    DateTimeType from; ///< start of interval 
    DateTimeType to; ///< end of interval
  };

};
