// IDL rozhrani pro volani CORBA funkci
// interfaces: EPP , Whois , Admin

module ccReg
{
  typedef unsigned long long timestamp;

  // komunikacni jazyky
  enum Languages  { EN , CS }; // 0 default anglictina 1 cestina

  enum RegObjectType { NONE , CZ_DOMAIN, ENUM_DOMAIN,  CONTACT_HANDLE , NSSET_HANDLE };

  enum Disclose { DISCL_EMPTY, DISCL_HIDE, DISCL_DISPLAY };
  
  // vracena hodnota avail v check funkcich  
  enum CheckAvail { Exist , NotExist , BadFormat , BlackList }; // navrh na vraceni pri Check

  enum SSNtyp { EMPTY , RC , OP , PASS , ICO , MPSV }; // typ SSN rodne cislo ,  obcanka , cestovni pas , ico

  // specifikace chybneho parametru (odvozen od nazvu funkce a parametru)
  enum ErrorSpec {
	unknow, 
	pollAck_msgID,
	contactCreate_cc, // kod zeme pri vytvoreni kontaktu
	contactUpdate_cc, // kod zeme pri updatu kontaktu

	contactCreate_handle, // nespravny format handlu
	nssetCreate_handle,
	domainCreate_fqdn, // spatny nazev domeny
        domainUpdate_fqdn, // spatny nazev domeny
        domainRenew_fqdn, // spatny nazev domeny 
        contactUpdate_status_add,
        contactUpdate_status_rem,
        nssetCreate_tech,
        nssetCreate_ns_name, 
        nssetCreate_ns_addr, 
        nssetUpdate_ns_name_add,
        nssetUpdate_ns_addr_add,
        nssetUpdate_ns_name_rem, 
        nssetUpdate_ns_addr_rem,
        nssetUpdate_tech_add,
        nssetUpdate_tech_rem,
        nssetUpdate_status_add,
        nssetUpdate_status_rem,
        domainCreate_registrant,
        domainCreate_nsset,
        domainCreate_period,
        domainCreate_admin,
        domainCreate_ext_valDate,
        domainUpdate_registrant,
        domainUpdate_nsset,
        domainUpdate_admin_add,
        domainUpdate_admin_rem,
        domainUpdate_status_add,
        domainUpdate_status_rem,
        domainUpdate_ext_valDate,
        domainRenew_curExpDate,
        domainRenew_period,
        domainRenew_ext_valDate,
        domainInfo_fqdn, // spatny nazev domeny
        contactInfo_handle,
        nssetInfo_handle 
  };

  struct CheckSeq {
    CheckAvail avail;
    string reason;              // if avail != NotExist tak zde je duvod
  };

  typedef sequence < CheckSeq > CheckResp; // check response

  struct Error_seq
  {
    ErrorSpec code;		// kod chyby (urcuje funkci a parametr) - nutny
    				// pro spravne doplneni xml tagu v EPP serveru
    any value;		        // hodnota zadana klientem, ktera zpusobila chybu
                                // string timestamp Long 
    string reason;		// duvod chyby, textovy popis
  };

  typedef sequence < Error_seq > Error;

  // vracena struktura 
  struct Response
  {
    short errCode;		// navratovy kod definovany EPP protokolem
    string errMsg;              // zprava prislusejici navratovemu kodu
    string svTRID;		// server transaction ID
    Error errors;		// chyby
  };

  typedef sequence < string > NameServers;
  typedef sequence < string > InetAddress;
  typedef sequence < string > TechContact;
  typedef sequence < string > AdminContact;
  typedef sequence < string > Check;	// sequence pro check
  typedef sequence < string > Status;	// vraceny status je sequence stringu 

  struct DNSHost_str
  {
    string fqdn;		// fqdn DNS serveru
    InetAddress inet;		// pole ip adres 
  };

  typedef sequence < DNSHost_str > DNSHost;

  struct Contact
  {
    string handle;		// handle kontaktu
    string ROID;		// identifikator kontaktu  repository ID
    string ClID;		// identifikator registratora ktery ma pravo na zemnu
    string CrID;		// identifikator registratora ktery vytvoril kontak
    string UpID;		// identifikator registratora ktery provedl zmeny
    Status stat;		// status sequence
    timestamp CrDate;		// datum a cas vytvoreni
    timestamp UpDate;		// datum a cas zmeny
    timestamp TrDate;		// datum a cas transferu
    string Name;		// jmeno nebo nazev kontaktu
    string Organization;	// nazev organizace
    string Street1;		// adresa
    string Street2;		// adresa
    string Street3;		// adresa
    string City;		// obec
    string StateOrProvince;
    string PostalCode;		// PSC
    string CountryCode;		// ISO kod
    string Telephone;
    string Fax;
    string Email;
    string NotifyEmail;		// upozornovaci email
    string VAT;			// DIC 
    string SSN;			// SSN
    SSNtyp SSNtype;             // typ SSN
    string AuthInfoPw;		// autentifikace
    Disclose DiscloseName;	// povolovani zobrazeni
    Disclose DiscloseOrganization;
    Disclose DiscloseAddress;
    Disclose DiscloseTelephone;
    Disclose DiscloseFax;
    Disclose DiscloseEmail;
  };

  struct ContactChange
  {
    string Name;		// jmeno nebo nazev kontaktu
    string Organization;	// nazev organizace
    string Street1;		// adresa
    string Street2;		// adresa
    string Street3;		// adresa
    string City;		// obec
    string StateOrProvince;
    string PostalCode;		// PSC
    string CC;		        // country code dvojmistny kod zeme ISO 
    string Telephone;
    string Fax;
    string Email;
    string NotifyEmail;		// upozornovaci email
    string VAT;			// DIC 
    string SSN;			// SSN
    SSNtyp SSNtype;             // typ SSN
    string AuthInfoPw;		// autentifikace
    Disclose DiscloseName;	// povolovani zobrazeni
    Disclose DiscloseOrganization;
    Disclose DiscloseAddress;
    Disclose DiscloseTelephone;
    Disclose DiscloseFax;
    Disclose DiscloseEmail;
  };

  struct NSSet
  {
    string ROID;
    string handle;
    Status stat;		// status sequence
    string ClID;		// identifikator registratora ktery ma pravo na zemnu
    string CrID;		// identifikator registratora ktery zaznam vytvoril
    string UpID;		// identifikator registratora ktery zmenil zaznam
    timestamp CrDate;		// datum a cas vytvoreni
    timestamp UpDate;		// datum a cas update
    timestamp TrDate;		// datum a cas transferu
    string AuthInfoPw;		// autentifikace
    DNSHost dns;		// hosty DNS
    TechContact tech;		// sequence handle na technicke kontakty
  };

  struct ENUMValidationExtension {
    timestamp valExDate; // datum expirace overeni validity
  };

 typedef sequence<any> ExtensionList;  

  // struktura pro popis domen
  struct Domain
  {
    string ROID;
    string name;		// fqdn nazev domeny
    string Registrant;		// ROID registranta contactu
    string nsset;		// handle NSSETu
    Status stat;		// status sequence
    string ClID;		// identifikator registratora ktery ma pravo na zemnu
    string CrID;		// identifikator registratora ktery zaznam vytvoril 
    string UpID;		// identifikator registratora ktery zmenil zaznam
    timestamp CrDate;		// datum a cas vytvoreni
    timestamp ExDate;		// taum a cas expirace domeny
    timestamp UpDate;		// datum a cas update
    timestamp TrDate;		// datum a cas transferu
    string AuthInfoPw;		// autentifikace
    AdminContact admin;		// administrativni kontakty (handle)
    ExtensionList ext;  // obecne rozsirujici informace 
  };

    // detail registratora
    struct Registrar {
       long id;
       string handle;
       string name;
       string organization;
       string street1;
       string street2;
       string street3;
       string city;
       string stateorprovince;
       string postalcode;
       string country;
       string telephone;
       string fax;
       string email;
       string url;
    };

    // typ seznamu registratoru 
    typedef sequence<Registrar> RegistrarList;


  typedef sequence < string > Lists;
 
  interface Admin;
  // pro klienty EPP  protokolu 
  interface EPP
  {
    Admin getAdmin();

    string version(); // vraceni cisla verze

    // pro vraceni serverTRID 
    Response GetTransaction (in long clientID, in string clTRID,
			     in short errCode  );
 

    // poll funkce
    // potvrezeni prijeti zpravy msgID vraci pocet zbyvajicich zprav a 
    // dalsi id zpravy
    Response PollAcknowledgement (in long msgID, out short count,
				  out long newmsgID, in long clientID,
				  in string clTRID , in string XML );
    // ziskani zpravy s msgID ze servru
    // count  celkovy pocet zprav  msgID id zpravy  qDate datum zarazeni 
    // do fronty mesg zprava
    Response PollRequest (out long msgID, out short count,
			  out timestamp qDate, out string mesg,
			  in long clientID, in string clTRID , in string XML );


    // pro prihlaseni clienta 
    Response ClientLogin (in string ClID, in string passwd, in string newpass,
			  in string clTRID,  in string XML ,  out long clientID,
			  in string certID , in Languages  lang );
    Response ClientLogout (in long clientID, in string clTRID , in string XML);

    // zjisteni kontaktaktu
    Response ContactCheck (in Check handle, out CheckResp a, in long clientID,
			   in string clTRID, in string XML);
    // info o kontaktni osobe
    Response ContactInfo (in string handle, out Contact c, in long clientID,
			  in string clTRID, in string XML);
    // vymazani kontaktni osoby 
    Response ContactDelete (in string handle, in long clientID,
			    in string clTRID, in string XML);
    // zmena udaju u kontaktni osoby 
    // zmena je co je ve strukture  Contact chg 
    // remove a add je pouze status
    Response ContactUpdate (in string handle, in ContactChange c,
			    in Status status_add, in Status status_rem,
			    in long clientID, in string clTRID , in string XML);
    // vytvoreni kontaktni osoby 
    Response ContactCreate (in string handle, in ContactChange c,
			    out timestamp crDate, in long clientID,
			    in string clTRID, in string XML );

    // prevod kontaktni osoby
    Response ContactTransfer (in string handle, in string authInfo,
			    in long clientID, in string clTRID , in string XML );

    // listing registrovanych kontaktu
    Response ContactList (out Lists contacts,
			    in long clientID, in string clTRID , in string XML );

    // predelano na NSSET
    // check hostu
    Response NSSetCheck (in Check handle, out CheckResp a, in long clientID,
			 in string clTRID, in string XML );
    // info o hostu
    Response NSSetInfo (in string handle, out NSSet n, in long clientID,
			in string clTRID, in string XML);
    // smazani hostu
    Response NSSetDelete (in string handle, in long clientID,
			  in string clTRID, in string XML);
    // vytvoreni hostu
    Response NSSetCreate (in string handle, in string authInfoPw,
			  in TechContact tech, in DNSHost dns,
			  out timestamp crDate, in long clientID,
			  in string clTRID , in string XML);
    // zmena udaju update  change pouze authInfo 
    // pridat nebo zrusit pouze TechContact 
    // dns_rem zrusene dns hosty 
    // dns_add pridane dns hosty
    Response NSSetUpdate (in string handle, in string authInfo_chg,
			  in DNSHost dns_add, in DNSHost dns_rem,
			  in TechContact tech_add, in TechContact tech_rem,
			  in Status status_add, in Status status_rem,
			  in long clientID, in string clTRID , in string XML );

    // prevod nssetu
    Response NSSetTransfer (in string handle, in string authInfo,
			    in long clientID, in string clTRID , in string XML );

    // listing registrovanych nssetu
    Response NSSetList (out Lists nssets,
			    in long clientID, in string clTRID , in string XML );


    //  funkce na spravu domen
    Response DomainCheck (in Check fqdn, out CheckResp a, in long clientID,
			  in string clTRID  , in string XML);
    Response DomainInfo (in string fqdn, out Domain d, in long clientID,
			 in string clTRID , in string XML);
    Response DomainDelete (in string fqdn, in long clientID,
			   in string clTRID , in string XML );

    // Data elements that can be changed: registrant authInfo and nsset
    // Data elements that can be added or removed: admin contact and status 
    Response DomainUpdate (in string fqdn, in string registrant_chg,
			   in string authInfo_chg, in string nsset_chg,
			   in AdminContact admin_add,
			   in AdminContact admin_rem, in Status status_add,
			   in Status status_rem, in long clientID,
			   in string clTRID, in string XML , 
			   in ExtensionList ext);
    Response DomainCreate (in string fqdn, in string Registrant,
			   in string nsset, in string AuthInfoPw,
			   in short period, in AdminContact admin,
			   out timestamp crDate, out timestamp exDate,
			   in long clientID, in string clTRID, in string XML,
			   in ExtensionList ext);

    // doba prodlouzeni period je v mesicich
    Response DomainRenew (in string fqdn, in timestamp curExpDate,
			  in short period, out timestamp exDate,
			  in long clientID, in string clTRID, in string XML,
			  in ExtensionList ext);			  
    // transfer funkce 
    Response DomainTransfer (in string fqdn, in string authInfo,
              in long clientID, in string clTRID , in string XML );

    // listing registrovanych domen
    Response DomainList (out Lists domains,
			    in long clientID, in string clTRID , in string XML );

    // vycet typu objektu spravovanych registrem


   // vrati typ objektu, ktery je evidovan pod danym jmenem
    RegObjectType getRegObjectType(in string objectName);




  };

  // struktura
  struct DomainWhois
  {
    string name;
    // string description; // popis domeny ted tam je 
    short status;		// status 1 REGISTRED - 0 FREE
    timestamp created;
    timestamp expired;
    string registrarName;	// jmeno registratora
    string registrarUrl;	// odkaz na jeho webovou adresu
    NameServers ns;		// sequence nameservru
    string nsset;		// handle NSSETu
    TechContact tech;		// sequence handle na technicke kontakty
    AdminContact admin;		// administrativni kontakty (handle)
  };

  interface Whois
  {
    // vraci identifikaci domeny pro whois server podle nazvu
    DomainWhois Domain (in string domain_name);
  };

  // administratorske rozhrani
  interface Admin
  {
    exception ObjectNotFound {};
    // vrati kompletni seznam registratoru
    RegistrarList getRegistrars();
    // najde jednoho registratora
    Registrar getRegistrarByHandle(in string handle) raises (ObjectNotFound);

    // List funkce na vypis
    Lists ListRegistrar(); 
    Lists ListDomain(); 
    Lists ListContact(); 
    Lists ListNSSet(); 
  };

  // datove typy pro generovani zony
  struct ZoneItem {
    string name;    // fqdn
    DNSHost nameservers; // seznam nameserveru vcetne jejich adres
                         // pokud jsou potrebne (GLUE RR)
  };
  typedef sequence<ZoneItem> ZoneSeq; 

  // interface (zatim jen) pro generovani zony
  interface ZoneGenerator {

    exception ZoneGeneratorError {
      string message;
    };

    // Request zone transfer
    long transferRequest(in string zonename,
      out long ttl,
      out string hostmaster,
      out string serial,
      out long refresh,
      out long update_retr,
      out long expiry,
      out long minimum,
      out DNSHost_str primns, // fqdn and addresses of prim. nameserver
      out DNSHost nameservers // secondary nameservers
      ) raises (ZoneGeneratorError);

    // get domains and their nameservers
    ZoneSeq getZoneData(in long trID, in long count, out boolean eof)
        raises (ZoneGeneratorError);
  };
};
